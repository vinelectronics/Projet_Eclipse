   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 18, 4
  12              		.thumb
  13              		.file	"ff.c"
  21              	.Ltext0:
  22              		.section	.text.mem_cpy,"ax",%progbits
  23              		.align	2
  24              		.thumb
  25              		.thumb_func
  27              	mem_cpy:
  28              	.LFB2:
  29              		.file 1 "Libraries/fat_sd/ff.c"
   1:Libraries/fat_sd/ff.c **** /*----------------------------------------------------------------------------/
   2:Libraries/fat_sd/ff.c **** /  FatFs - FAT file system module  R0.08                  (C)ChaN, 2010
   3:Libraries/fat_sd/ff.c **** /-----------------------------------------------------------------------------/
   4:Libraries/fat_sd/ff.c **** / FatFs module is a generic FAT file system module for small embedded systems.
   5:Libraries/fat_sd/ff.c **** / This is a free software that opened for education, research and commercial
   6:Libraries/fat_sd/ff.c **** / developments under license policy of following terms.
   7:Libraries/fat_sd/ff.c **** /
   8:Libraries/fat_sd/ff.c **** /  Copyright (C) 2010, ChaN, all right reserved.
   9:Libraries/fat_sd/ff.c **** /
  10:Libraries/fat_sd/ff.c **** / * The FatFs module is a free software and there is NO WARRANTY.
  11:Libraries/fat_sd/ff.c **** / * No restriction on use. You can use, modify and redistribute it for
  12:Libraries/fat_sd/ff.c **** /   personal, non-profit or commercial products UNDER YOUR RESPONSIBILITY.
  13:Libraries/fat_sd/ff.c **** / * Redistributions of source code must retain the above copyright notice.
  14:Libraries/fat_sd/ff.c **** /
  15:Libraries/fat_sd/ff.c **** /-----------------------------------------------------------------------------/
  16:Libraries/fat_sd/ff.c **** / Feb 26,'06 R0.00  Prototype.
  17:Libraries/fat_sd/ff.c **** /
  18:Libraries/fat_sd/ff.c **** / Apr 29,'06 R0.01  First stable version.
  19:Libraries/fat_sd/ff.c **** /
  20:Libraries/fat_sd/ff.c **** / Jun 01,'06 R0.02  Added FAT12 support.
  21:Libraries/fat_sd/ff.c **** /                   Removed unbuffered mode.
  22:Libraries/fat_sd/ff.c **** /                   Fixed a problem on small (<32M) partition.
  23:Libraries/fat_sd/ff.c **** / Jun 10,'06 R0.02a Added a configuration option (_FS_MINIMUM).
  24:Libraries/fat_sd/ff.c **** /
  25:Libraries/fat_sd/ff.c **** / Sep 22,'06 R0.03  Added f_rename().
  26:Libraries/fat_sd/ff.c **** /                   Changed option _FS_MINIMUM to _FS_MINIMIZE.
  27:Libraries/fat_sd/ff.c **** / Dec 11,'06 R0.03a Improved cluster scan algorithm to write files fast.
  28:Libraries/fat_sd/ff.c **** /                   Fixed f_mkdir() creates incorrect directory on FAT32.
  29:Libraries/fat_sd/ff.c **** /
  30:Libraries/fat_sd/ff.c **** / Feb 04,'07 R0.04  Supported multiple drive system.
  31:Libraries/fat_sd/ff.c **** /                   Changed some interfaces for multiple drive system.
  32:Libraries/fat_sd/ff.c **** /                   Changed f_mountdrv() to f_mount().
  33:Libraries/fat_sd/ff.c **** /                   Added f_mkfs().
  34:Libraries/fat_sd/ff.c **** / Apr 01,'07 R0.04a Supported multiple partitions on a physical drive.
  35:Libraries/fat_sd/ff.c **** /                   Added a capability of extending file size to f_lseek().
  36:Libraries/fat_sd/ff.c **** /                   Added minimization level 3.
  37:Libraries/fat_sd/ff.c **** /                   Fixed an endian sensitive code in f_mkfs().
  38:Libraries/fat_sd/ff.c **** / May 05,'07 R0.04b Added a configuration option _USE_NTFLAG.
  39:Libraries/fat_sd/ff.c **** /                   Added FSInfo support.
  40:Libraries/fat_sd/ff.c **** /                   Fixed DBCS name can result FR_INVALID_NAME.
  41:Libraries/fat_sd/ff.c **** /                   Fixed short seek (<= csize) collapses the file object.
  42:Libraries/fat_sd/ff.c **** /
  43:Libraries/fat_sd/ff.c **** / Aug 25,'07 R0.05  Changed arguments of f_read(), f_write() and f_mkfs().
  44:Libraries/fat_sd/ff.c **** /                   Fixed f_mkfs() on FAT32 creates incorrect FSInfo.
  45:Libraries/fat_sd/ff.c **** /                   Fixed f_mkdir() on FAT32 creates incorrect directory.
  46:Libraries/fat_sd/ff.c **** / Feb 03,'08 R0.05a Added f_truncate() and f_utime().
  47:Libraries/fat_sd/ff.c **** /                   Fixed off by one error at FAT sub-type determination.
  48:Libraries/fat_sd/ff.c **** /                   Fixed btr in f_read() can be mistruncated.
  49:Libraries/fat_sd/ff.c **** /                   Fixed cached sector is not flushed when create and close
  50:Libraries/fat_sd/ff.c **** /                   without write.
  51:Libraries/fat_sd/ff.c **** /
  52:Libraries/fat_sd/ff.c **** / Apr 01,'08 R0.06  Added fputc(), fputs(), fprintf() and fgets().
  53:Libraries/fat_sd/ff.c **** /                   Improved performance of f_lseek() on moving to the same
  54:Libraries/fat_sd/ff.c **** /                   or following cluster.
  55:Libraries/fat_sd/ff.c **** /
  56:Libraries/fat_sd/ff.c **** / Apr 01,'09 R0.07  Merged Tiny-FatFs as a buffer configuration option.
  57:Libraries/fat_sd/ff.c **** /                   Added long file name support.
  58:Libraries/fat_sd/ff.c **** /                   Added multiple code page support.
  59:Libraries/fat_sd/ff.c **** /                   Added re-entrancy for multitask operation.
  60:Libraries/fat_sd/ff.c **** /                   Added auto cluster size selection to f_mkfs().
  61:Libraries/fat_sd/ff.c **** /                   Added rewind option to f_readdir().
  62:Libraries/fat_sd/ff.c **** /                   Changed result code of critical errors.
  63:Libraries/fat_sd/ff.c **** /                   Renamed string functions to avoid name collision.
  64:Libraries/fat_sd/ff.c **** / Apr 14,'09 R0.07a Separated out OS dependent code on reentrant cfg.
  65:Libraries/fat_sd/ff.c **** /                   Added multiple sector size support.
  66:Libraries/fat_sd/ff.c **** / Jun 21,'09 R0.07c Fixed f_unlink() can return FR_OK on error.
  67:Libraries/fat_sd/ff.c **** /                   Fixed wrong cache control in f_lseek().
  68:Libraries/fat_sd/ff.c **** /                   Added relative path feature.
  69:Libraries/fat_sd/ff.c **** /                   Added f_chdir() and f_chdrive().
  70:Libraries/fat_sd/ff.c **** /                   Added proper case conversion to extended char.
  71:Libraries/fat_sd/ff.c **** / Nov 03,'09 R0.07e Separated out configuration options from ff.h to ffconf.h.
  72:Libraries/fat_sd/ff.c **** /                   Fixed f_unlink() fails to remove a sub-dir on _FS_RPATH.
  73:Libraries/fat_sd/ff.c **** /                   Fixed name matching error on the 13 char boundary.
  74:Libraries/fat_sd/ff.c **** /                   Added a configuration option, _LFN_UNICODE.
  75:Libraries/fat_sd/ff.c **** /                   Changed f_readdir() to return the SFN with always upper
  76:Libraries/fat_sd/ff.c **** /                   case on non-LFN cfg.
  77:Libraries/fat_sd/ff.c **** /
  78:Libraries/fat_sd/ff.c **** / May 15,'10 R0.08  Added a memory configuration option. (_USE_LFN)
  79:Libraries/fat_sd/ff.c **** /                   Added file lock feature. (_FS_SHARE)
  80:Libraries/fat_sd/ff.c **** /                   Added fast seek feature. (_USE_FASTSEEK)
  81:Libraries/fat_sd/ff.c **** /                   Changed some types on the API, XCHAR->TCHAR.
  82:Libraries/fat_sd/ff.c **** /                   Changed fname member in the FILINFO structure on Unicode cfg.
  83:Libraries/fat_sd/ff.c **** /                   String functions support UTF-8 encoding files on Unicode cfg.
  84:Libraries/fat_sd/ff.c **** /---------------------------------------------------------------------------*/
  85:Libraries/fat_sd/ff.c **** 
  86:Libraries/fat_sd/ff.c **** #include "ff.h"			/* FatFs configurations and declarations */
  87:Libraries/fat_sd/ff.c **** #include "diskio.h"		/* Declarations of low level disk I/O functions */
  88:Libraries/fat_sd/ff.c **** 
  89:Libraries/fat_sd/ff.c **** 
  90:Libraries/fat_sd/ff.c **** /*--------------------------------------------------------------------------
  91:Libraries/fat_sd/ff.c **** 
  92:Libraries/fat_sd/ff.c ****    Module Private Definitions
  93:Libraries/fat_sd/ff.c **** 
  94:Libraries/fat_sd/ff.c **** ---------------------------------------------------------------------------*/
  95:Libraries/fat_sd/ff.c **** 
  96:Libraries/fat_sd/ff.c **** #if _FATFS != 8085
  97:Libraries/fat_sd/ff.c **** #error Wrong include file (ff.h).
  98:Libraries/fat_sd/ff.c **** #endif
  99:Libraries/fat_sd/ff.c **** 
 100:Libraries/fat_sd/ff.c **** 
 101:Libraries/fat_sd/ff.c **** /* FAT sub-type boundaries */
 102:Libraries/fat_sd/ff.c **** /* Note that the FAT spec by Microsoft says 4085 but Windows works with 4087! */
 103:Libraries/fat_sd/ff.c **** #define MIN_FAT16	4086	/* Minimum number of clusters for FAT16 */
 104:Libraries/fat_sd/ff.c **** #define	MIN_FAT32	65526	/* Minimum number of clusters for FAT32 */
 105:Libraries/fat_sd/ff.c **** 
 106:Libraries/fat_sd/ff.c **** 
 107:Libraries/fat_sd/ff.c **** /* Definitions corresponds to multiple sector size */
 108:Libraries/fat_sd/ff.c **** #if _MAX_SS == 512		/* Single sector size */
 109:Libraries/fat_sd/ff.c **** #define	SS(fs)	512U
 110:Libraries/fat_sd/ff.c **** #elif _MAX_SS == 1024 || _MAX_SS == 2048 || _MAX_SS == 4096	/* Multiple sector size */
 111:Libraries/fat_sd/ff.c **** #define	SS(fs)	((fs)->ssize)
 112:Libraries/fat_sd/ff.c **** #else
 113:Libraries/fat_sd/ff.c **** #error Wrong sector size.
 114:Libraries/fat_sd/ff.c **** #endif
 115:Libraries/fat_sd/ff.c **** 
 116:Libraries/fat_sd/ff.c **** 
 117:Libraries/fat_sd/ff.c **** /* Reentrancy related */
 118:Libraries/fat_sd/ff.c **** #if _FS_REENTRANT
 119:Libraries/fat_sd/ff.c **** #if _USE_LFN == 1
 120:Libraries/fat_sd/ff.c **** #error Static LFN work area must not be used in re-entrant configuration.
 121:Libraries/fat_sd/ff.c **** #endif
 122:Libraries/fat_sd/ff.c **** #define	ENTER_FF(fs)		{ if (!lock_fs(fs)) return FR_TIMEOUT; }
 123:Libraries/fat_sd/ff.c **** #define	LEAVE_FF(fs, res)	{ unlock_fs(fs, res); return res; }
 124:Libraries/fat_sd/ff.c **** 
 125:Libraries/fat_sd/ff.c **** #else
 126:Libraries/fat_sd/ff.c **** #define	ENTER_FF(fs)
 127:Libraries/fat_sd/ff.c **** #define LEAVE_FF(fs, res)	return res
 128:Libraries/fat_sd/ff.c **** 
 129:Libraries/fat_sd/ff.c **** #endif
 130:Libraries/fat_sd/ff.c **** 
 131:Libraries/fat_sd/ff.c **** #define	ABORT(fs, res)		{ fp->flag |= FA__ERROR; LEAVE_FF(fs, res); }
 132:Libraries/fat_sd/ff.c **** 
 133:Libraries/fat_sd/ff.c **** 
 134:Libraries/fat_sd/ff.c **** /* Character code support macros */
 135:Libraries/fat_sd/ff.c **** #define IsUpper(c)	(((c)>='A')&&((c)<='Z'))
 136:Libraries/fat_sd/ff.c **** #define IsLower(c)	(((c)>='a')&&((c)<='z'))
 137:Libraries/fat_sd/ff.c **** #define IsDigit(c)	(((c)>='0')&&((c)<='9'))
 138:Libraries/fat_sd/ff.c **** 
 139:Libraries/fat_sd/ff.c **** #if _DF1S		/* Code page is DBCS */
 140:Libraries/fat_sd/ff.c **** 
 141:Libraries/fat_sd/ff.c **** #ifdef _DF2S	/* Two 1st byte areas */
 142:Libraries/fat_sd/ff.c **** #define IsDBCS1(c)	(((BYTE)(c) >= _DF1S && (BYTE)(c) <= _DF1E) || ((BYTE)(c) >= _DF2S && (BYTE)(c) 
 143:Libraries/fat_sd/ff.c **** #else			/* One 1st byte area */
 144:Libraries/fat_sd/ff.c **** #define IsDBCS1(c)	((BYTE)(c) >= _DF1S && (BYTE)(c) <= _DF1E)
 145:Libraries/fat_sd/ff.c **** #endif
 146:Libraries/fat_sd/ff.c **** 
 147:Libraries/fat_sd/ff.c **** #ifdef _DS3S	/* Three 2nd byte areas */
 148:Libraries/fat_sd/ff.c **** #define IsDBCS2(c)	(((BYTE)(c) >= _DS1S && (BYTE)(c) <= _DS1E) || ((BYTE)(c) >= _DS2S && (BYTE)(c) 
 149:Libraries/fat_sd/ff.c **** #else			/* Two 2nd byte areas */
 150:Libraries/fat_sd/ff.c **** #define IsDBCS2(c)	(((BYTE)(c) >= _DS1S && (BYTE)(c) <= _DS1E) || ((BYTE)(c) >= _DS2S && (BYTE)(c) 
 151:Libraries/fat_sd/ff.c **** #endif
 152:Libraries/fat_sd/ff.c **** 
 153:Libraries/fat_sd/ff.c **** #else			/* Code page is SBCS */
 154:Libraries/fat_sd/ff.c **** 
 155:Libraries/fat_sd/ff.c **** #define IsDBCS1(c)	0
 156:Libraries/fat_sd/ff.c **** #define IsDBCS2(c)	0
 157:Libraries/fat_sd/ff.c **** 
 158:Libraries/fat_sd/ff.c **** #endif /* _DF1S */
 159:Libraries/fat_sd/ff.c **** 
 160:Libraries/fat_sd/ff.c **** 
 161:Libraries/fat_sd/ff.c **** /* Name status flags */
 162:Libraries/fat_sd/ff.c **** #define NS			11		/* Offset of name status byte */
 163:Libraries/fat_sd/ff.c **** #define NS_LOSS		0x01	/* Out of 8.3 format */
 164:Libraries/fat_sd/ff.c **** #define NS_LFN		0x02	/* Force to create LFN entry */
 165:Libraries/fat_sd/ff.c **** #define NS_LAST		0x04	/* Last segment */
 166:Libraries/fat_sd/ff.c **** #define NS_BODY		0x08	/* Lower case flag (body) */
 167:Libraries/fat_sd/ff.c **** #define NS_EXT		0x10	/* Lower case flag (ext) */
 168:Libraries/fat_sd/ff.c **** #define NS_DOT		0x20	/* Dot entry */
 169:Libraries/fat_sd/ff.c **** 
 170:Libraries/fat_sd/ff.c **** 
 171:Libraries/fat_sd/ff.c **** 
 172:Libraries/fat_sd/ff.c **** /*------------------------------------------------------------*/
 173:Libraries/fat_sd/ff.c **** /* Work area                                                  */
 174:Libraries/fat_sd/ff.c **** 
 175:Libraries/fat_sd/ff.c **** #if !_DRIVES
 176:Libraries/fat_sd/ff.c **** #error Number of drives must not be 0.
 177:Libraries/fat_sd/ff.c **** #endif
 178:Libraries/fat_sd/ff.c **** static
 179:Libraries/fat_sd/ff.c **** WORD Fsid;				/* File system mount ID */
 180:Libraries/fat_sd/ff.c **** static
 181:Libraries/fat_sd/ff.c **** FATFS *FatFs[_DRIVES];	/* Pointer to the file system objects (logical drives) */
 182:Libraries/fat_sd/ff.c **** 
 183:Libraries/fat_sd/ff.c **** #if _FS_RPATH
 184:Libraries/fat_sd/ff.c **** static
 185:Libraries/fat_sd/ff.c **** BYTE Drive;				/* Current drive */
 186:Libraries/fat_sd/ff.c **** #endif
 187:Libraries/fat_sd/ff.c **** 
 188:Libraries/fat_sd/ff.c **** 
 189:Libraries/fat_sd/ff.c **** #if _USE_LFN == 0			/* No LFN */
 190:Libraries/fat_sd/ff.c **** #define	DEF_NAMEBUF			BYTE sfn[12]
 191:Libraries/fat_sd/ff.c **** #define INIT_BUF(dobj)		(dobj).fn = sfn
 192:Libraries/fat_sd/ff.c **** #define	FREE_BUF()
 193:Libraries/fat_sd/ff.c **** 
 194:Libraries/fat_sd/ff.c **** #elif _USE_LFN == 1			/* LFN with static LFN working buffer */
 195:Libraries/fat_sd/ff.c **** static WCHAR LfnBuf[_MAX_LFN + 1];
 196:Libraries/fat_sd/ff.c **** #define	DEF_NAMEBUF			BYTE sfn[12]
 197:Libraries/fat_sd/ff.c **** #define INIT_BUF(dobj)		{ (dobj).fn = sfn; (dobj).lfn = LfnBuf; }
 198:Libraries/fat_sd/ff.c **** #define	FREE_BUF()
 199:Libraries/fat_sd/ff.c **** 
 200:Libraries/fat_sd/ff.c **** #elif _USE_LFN == 2 		/* LFN with dynamic LFN working buffer on the stack */
 201:Libraries/fat_sd/ff.c **** #define	DEF_NAMEBUF			BYTE sfn[12]; WCHAR lbuf[_MAX_LFN + 1]
 202:Libraries/fat_sd/ff.c **** #define INIT_BUF(dobj)		{ (dobj).fn = sfn; (dobj).lfn = lbuf; }
 203:Libraries/fat_sd/ff.c **** #define	FREE_BUF()
 204:Libraries/fat_sd/ff.c **** 
 205:Libraries/fat_sd/ff.c **** #elif _USE_LFN == 3 		/* LFN with dynamic LFN working buffer on the heap */
 206:Libraries/fat_sd/ff.c **** #define	DEF_NAMEBUF			BYTE sfn[12]; WCHAR *lfn
 207:Libraries/fat_sd/ff.c **** #define INIT_BUF(dobj)		{ lfn = ff_memalloc((_MAX_LFN + 1) * 2); \
 208:Libraries/fat_sd/ff.c **** 							  if (!lfn) LEAVE_FF((dobj).fs, FR_NOT_ENOUGH_CORE); \
 209:Libraries/fat_sd/ff.c **** 							  (dobj).lfn = lfn;	(dobj).fn = sfn; }
 210:Libraries/fat_sd/ff.c **** #define	FREE_BUF()			ff_memfree(lfn)
 211:Libraries/fat_sd/ff.c **** 
 212:Libraries/fat_sd/ff.c **** #else
 213:Libraries/fat_sd/ff.c **** #error Wrong LFN configuration.
 214:Libraries/fat_sd/ff.c **** #endif
 215:Libraries/fat_sd/ff.c **** 
 216:Libraries/fat_sd/ff.c **** 
 217:Libraries/fat_sd/ff.c **** 
 218:Libraries/fat_sd/ff.c **** 
 219:Libraries/fat_sd/ff.c **** /*--------------------------------------------------------------------------
 220:Libraries/fat_sd/ff.c **** 
 221:Libraries/fat_sd/ff.c ****    Module Private Functions
 222:Libraries/fat_sd/ff.c **** 
 223:Libraries/fat_sd/ff.c **** ---------------------------------------------------------------------------*/
 224:Libraries/fat_sd/ff.c **** 
 225:Libraries/fat_sd/ff.c **** 
 226:Libraries/fat_sd/ff.c **** /*-----------------------------------------------------------------------*/
 227:Libraries/fat_sd/ff.c **** /* String functions                                                      */
 228:Libraries/fat_sd/ff.c **** /*-----------------------------------------------------------------------*/
 229:Libraries/fat_sd/ff.c **** 
 230:Libraries/fat_sd/ff.c **** /* Copy memory to memory */
 231:Libraries/fat_sd/ff.c **** static
 232:Libraries/fat_sd/ff.c **** void mem_cpy (void* dst, const void* src, int cnt) {
  30              	etend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              	.LVL0:
  33              		push	{lr}
  34 0000 00B5     	.LCFI0:
  35              		.loc 1 232 0
  36              		mov	lr, #0
  37 0002 4FF0000E 		.loc 1 243 0
 233:Libraries/fat_sd/ff.c **** 	BYTE *d = (BYTE*)dst;
 234:Libraries/fat_sd/ff.c **** 	const BYTE *s = (const BYTE*)src;
 235:Libraries/fat_sd/ff.c **** 
 236:Libraries/fat_sd/ff.c **** #if _WORD_ACCESS == 1
 237:Libraries/fat_sd/ff.c **** 	while (cnt >= sizeof(int)) {
 238:Libraries/fat_sd/ff.c **** 		*(int*)d = *(int*)s;
 239:Libraries/fat_sd/ff.c **** 		d += sizeof(int); s += sizeof(int);
 240:Libraries/fat_sd/ff.c **** 		cnt -= sizeof(int);
 241:Libraries/fat_sd/ff.c **** 	}
 242:Libraries/fat_sd/ff.c **** #endif
 243:Libraries/fat_sd/ff.c **** 	while (cnt--)
  38              	L3:
  39 0006 05E0     		.loc 1 244 0
  40              		ldrb	r3, [lr, r1]	@ zero_extendqisi2
 244:Libraries/fat_sd/ff.c **** 		*d++ = *s++;
  41              	rb	r3, [lr, r0]
  42 0008 1EF80130 		add	lr, lr, #1
  43 000c 0EF80030 	.L2:
  44 0010 0EF1010E 		.loc 1 243 0
  45              		subs	r2, r2, #1
  46              	.LVL1:
  47 0014 013A     		bcs	.L3
  48              		.loc 1 245 0
  49 0016 F7D2     		pop	{pc}
 245:Libraries/fat_sd/ff.c **** }
  50              	size	mem_cpy, .-mem_cpy
  51 0018 00BD     		.section	.text.mem_set,"ax",%progbits
  52              		.align	2
  53              		.thumb
  54 001a C046     		.thumb_func
  56              	mem_set:
  57              	.LFB3:
  58              		.loc 1 249 0
  59              		@ args = 0, pretend = 0, frame = 0
  60              		@ frame_needed = 0, uses_anonymous_args = 0
 246:Libraries/fat_sd/ff.c **** 
 247:Libraries/fat_sd/ff.c **** /* Fill memory */
 248:Libraries/fat_sd/ff.c **** static
 249:Libraries/fat_sd/ff.c **** void mem_set (void* dst, int val, int cnt) {
  61              	ister save eliminated.
  62              	.LVL2:
  63              		@ lr needed for prologue
  64              		.loc 1 249 0
  65              		movs	r3, #0
  66              		.loc 1 252 0
  67              		b	.L7
  68 0000 0023     	.L8:
 250:Libraries/fat_sd/ff.c **** 	BYTE *d = (BYTE*)dst;
 251:Libraries/fat_sd/ff.c **** 
 252:Libraries/fat_sd/ff.c **** 	while (cnt--)
  69              	253 0
  70 0002 01E0     		strb	r1, [r3, r0]
  71              		adds	r3, r3, #1
 253:Libraries/fat_sd/ff.c **** 		*d++ = (BYTE)val;
  72              	:
  73 0004 1954     		.loc 1 252 0
  74 0006 0133     		subs	r2, r2, #1
  75              	.LVL3:
  76              		bcs	.L8
  77 0008 013A     		.loc 1 254 0
  78              		bx	lr
  79 000a FBD2     	.LFE3:
 254:Libraries/fat_sd/ff.c **** }
  80              	em_set, .-mem_set
  81 000c 7047     		.section	.text.chk_chr,"ax",%progbits
  82              		.align	2
  83              		.thumb
  84 000e C046     		.thumb_func
  86              	chk_chr:
  87              	.LFB5:
  88              		.loc 1 268 0
  89              		@ args = 0, pretend = 0, frame = 0
  90              		@ frame_needed = 0, uses_anonymous_args = 0
 255:Libraries/fat_sd/ff.c **** 
 256:Libraries/fat_sd/ff.c **** /* Compare memory to memory */
 257:Libraries/fat_sd/ff.c **** static
 258:Libraries/fat_sd/ff.c **** int mem_cmp (const void* dst, const void* src, int cnt) {
 259:Libraries/fat_sd/ff.c **** 	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 260:Libraries/fat_sd/ff.c **** 	int r = 0;
 261:Libraries/fat_sd/ff.c **** 
 262:Libraries/fat_sd/ff.c **** 	while (cnt-- && (r = *d++ - *s++) == 0) ;
 263:Libraries/fat_sd/ff.c **** 	return r;
 264:Libraries/fat_sd/ff.c **** }
 265:Libraries/fat_sd/ff.c **** 
 266:Libraries/fat_sd/ff.c **** /* Check if chr is contained in the string */
 267:Libraries/fat_sd/ff.c **** static
 268:Libraries/fat_sd/ff.c **** int chk_chr (const char* str, int chr) {
  91              	ister save eliminated.
  92              	.LVL4:
  93              		@ lr needed for prologue
  94              		.loc 1 268 0
  95              		mov	r3, r0
  96              		.loc 1 269 0
  97              		b	.L12
  98 0000 0346     	.LVL5:
 269:Libraries/fat_sd/ff.c **** 	while (*str && *str != chr) str++;
  99              	dds	r3, r3, #1
 100 0002 00E0     	.LVL6:
 101              	.L12:
 102              		ldrb	r0, [r3, #0]	@ zero_extendqisi2
 103 0004 0133     		cbz	r0, .L14
 104              		cmp	r0, r1
 105              		bne	.L13
 106 0006 1878     	.L14:
 107 0008 08B1     		.loc 1 271 0
 108 000a 8842     		bx	lr
 109 000c FAD1     	.LFE5:
 270:Libraries/fat_sd/ff.c **** 	return *str;
 271:Libraries/fat_sd/ff.c **** }
 111              	ext.clust2sect,"ax",%progbits
 112 000e 7047     		.align	2
 113              		.global	clust2sect
 114              		.thumb
 115              		.thumb_func
 117              	clust2sect:
 118              	.LFB12:
 119              		.loc 1 698 0
 120              		@ args = 0, pretend = 0, frame = 0
 121              		@ frame_needed = 0, uses_anonymous_args = 0
 122              		@ link register save eliminated.
 272:Libraries/fat_sd/ff.c **** 
 273:Libraries/fat_sd/ff.c **** 
 274:Libraries/fat_sd/ff.c **** 
 275:Libraries/fat_sd/ff.c **** /*-----------------------------------------------------------------------*/
 276:Libraries/fat_sd/ff.c **** /* Request/Release grant to access the volume                            */
 277:Libraries/fat_sd/ff.c **** /*-----------------------------------------------------------------------*/
 278:Libraries/fat_sd/ff.c **** #if _FS_REENTRANT
 279:Libraries/fat_sd/ff.c **** 
 280:Libraries/fat_sd/ff.c **** static
 281:Libraries/fat_sd/ff.c **** int lock_fs (
 282:Libraries/fat_sd/ff.c **** 	FATFS *fs		/* File system object */
 283:Libraries/fat_sd/ff.c **** )
 284:Libraries/fat_sd/ff.c **** {
 285:Libraries/fat_sd/ff.c **** 	return ff_req_grant(fs->sobj);
 286:Libraries/fat_sd/ff.c **** }
 287:Libraries/fat_sd/ff.c **** 
 288:Libraries/fat_sd/ff.c **** 
 289:Libraries/fat_sd/ff.c **** static
 290:Libraries/fat_sd/ff.c **** void unlock_fs (
 291:Libraries/fat_sd/ff.c **** 	FATFS *fs,		/* File system object */
 292:Libraries/fat_sd/ff.c **** 	FRESULT res		/* Result code to be returned */
 293:Libraries/fat_sd/ff.c **** )
 294:Libraries/fat_sd/ff.c **** {
 295:Libraries/fat_sd/ff.c **** 	if (res != FR_NOT_ENABLED &&
 296:Libraries/fat_sd/ff.c **** 		res != FR_INVALID_DRIVE &&
 297:Libraries/fat_sd/ff.c **** 		res != FR_INVALID_OBJECT &&
 298:Libraries/fat_sd/ff.c **** 		res != FR_TIMEOUT) {
 299:Libraries/fat_sd/ff.c **** 		ff_rel_grant(fs->sobj);
 300:Libraries/fat_sd/ff.c **** 	}
 301:Libraries/fat_sd/ff.c **** }
 302:Libraries/fat_sd/ff.c **** #endif
 303:Libraries/fat_sd/ff.c **** 
 304:Libraries/fat_sd/ff.c **** 
 305:Libraries/fat_sd/ff.c **** 
 306:Libraries/fat_sd/ff.c **** /*-----------------------------------------------------------------------*/
 307:Libraries/fat_sd/ff.c **** /* File shareing control functions                                       */
 308:Libraries/fat_sd/ff.c **** /*-----------------------------------------------------------------------*/
 309:Libraries/fat_sd/ff.c **** #if _FS_SHARE
 310:Libraries/fat_sd/ff.c **** 
 311:Libraries/fat_sd/ff.c **** static
 312:Libraries/fat_sd/ff.c **** FRESULT chk_lock (	/* Check if the file can be accessed */
 313:Libraries/fat_sd/ff.c **** 	DIR* dj,		/* Directory object pointing the file to be checked */
 314:Libraries/fat_sd/ff.c **** 	int acc			/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
 315:Libraries/fat_sd/ff.c **** )
 316:Libraries/fat_sd/ff.c **** {
 317:Libraries/fat_sd/ff.c **** 	UINT i, be;
 318:Libraries/fat_sd/ff.c **** 
 319:Libraries/fat_sd/ff.c **** 	/* Search file semaphore table */
 320:Libraries/fat_sd/ff.c **** 	for (i = be = 0; i < _FS_SHARE; i++) {
 321:Libraries/fat_sd/ff.c **** 		if (dj->fs->flsem[i].ctr) {	/* Existing entry */
 322:Libraries/fat_sd/ff.c **** 			if (dj->fs->flsem[i].clu == dj->sclust && 	/* The file is found (identified with its location) *
 323:Libraries/fat_sd/ff.c **** 				dj->fs->flsem[i].idx == dj->index) break;
 324:Libraries/fat_sd/ff.c **** 		} else {					/* Blank entry */
 325:Libraries/fat_sd/ff.c **** 			be++;
 326:Libraries/fat_sd/ff.c **** 		}
 327:Libraries/fat_sd/ff.c **** 	}
 328:Libraries/fat_sd/ff.c **** 	if (i == _FS_SHARE)	/* The file has not been opened */
 329:Libraries/fat_sd/ff.c **** 		return (be || acc != 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new file?
 330:Libraries/fat_sd/ff.c **** 
 331:Libraries/fat_sd/ff.c **** 	/* The file has been opened. Reject any open against writing file and all write mode open */
 332:Libraries/fat_sd/ff.c **** 	return (acc || dj->fs->flsem[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 333:Libraries/fat_sd/ff.c **** }
 334:Libraries/fat_sd/ff.c **** 
 335:Libraries/fat_sd/ff.c **** 
 336:Libraries/fat_sd/ff.c **** static
 337:Libraries/fat_sd/ff.c **** int enq_lock (	/* Check if an entry is available for a new file */
 338:Libraries/fat_sd/ff.c **** 	FATFS* fs	/* File system object */
 339:Libraries/fat_sd/ff.c **** )
 340:Libraries/fat_sd/ff.c **** {
 341:Libraries/fat_sd/ff.c **** 	UINT i;
 342:Libraries/fat_sd/ff.c **** 
 343:Libraries/fat_sd/ff.c **** 	for (i = 0; i < _FS_SHARE && fs->flsem[i].ctr; i++) ;
 344:Libraries/fat_sd/ff.c **** 	return (i == _FS_SHARE) ? 0 : 1;
 345:Libraries/fat_sd/ff.c **** }
 346:Libraries/fat_sd/ff.c **** 
 347:Libraries/fat_sd/ff.c **** 
 348:Libraries/fat_sd/ff.c **** static
 349:Libraries/fat_sd/ff.c **** UINT inc_lock (	/* Increment file open counter and returns its index (0:int error) */
 350:Libraries/fat_sd/ff.c **** 	DIR* dj,	/* Directory object pointing the file to register or increment */
 351:Libraries/fat_sd/ff.c **** 	int acc		/* Desired access mode (0:Read, !0:Write) */
 352:Libraries/fat_sd/ff.c **** )
 353:Libraries/fat_sd/ff.c **** {
 354:Libraries/fat_sd/ff.c **** 	UINT i;
 355:Libraries/fat_sd/ff.c **** 
 356:Libraries/fat_sd/ff.c **** 
 357:Libraries/fat_sd/ff.c **** 	for (i = 0; i < _FS_SHARE; i++) {	/* Find the file */
 358:Libraries/fat_sd/ff.c **** 		if (dj->fs->flsem[i].ctr &&
 359:Libraries/fat_sd/ff.c **** 			dj->fs->flsem[i].clu == dj->sclust &&
 360:Libraries/fat_sd/ff.c **** 			dj->fs->flsem[i].idx == dj->index) break;
 361:Libraries/fat_sd/ff.c **** 	}
 362:Libraries/fat_sd/ff.c **** 
 363:Libraries/fat_sd/ff.c **** 	if (i == _FS_SHARE) {				/* Not opened. Register it as new. */
 364:Libraries/fat_sd/ff.c **** 		for (i = 0; i < _FS_SHARE && dj->fs->flsem[i].ctr; i++) ;
 365:Libraries/fat_sd/ff.c **** 		if (i == _FS_SHARE) return 0;	/* No space to register (int err) */
 366:Libraries/fat_sd/ff.c **** 		dj->fs->flsem[i].clu = dj->sclust;
 367:Libraries/fat_sd/ff.c **** 		dj->fs->flsem[i].idx = dj->index;
 368:Libraries/fat_sd/ff.c **** 	}
 369:Libraries/fat_sd/ff.c **** 
 370:Libraries/fat_sd/ff.c **** 	if (acc && dj->fs->flsem[i].ctr) return 0;	/* Access violation (int err) */
 371:Libraries/fat_sd/ff.c **** 
 372:Libraries/fat_sd/ff.c **** 	dj->fs->flsem[i].ctr = acc ? 0x100 : dj->fs->flsem[i].ctr + 1;	/* Set semaphore value */
 373:Libraries/fat_sd/ff.c **** 
 374:Libraries/fat_sd/ff.c **** 	return i + 1;
 375:Libraries/fat_sd/ff.c **** }
 376:Libraries/fat_sd/ff.c **** 
 377:Libraries/fat_sd/ff.c **** 
 378:Libraries/fat_sd/ff.c **** static
 379:Libraries/fat_sd/ff.c **** FRESULT dec_lock (	/* Decrement file open counter */
 380:Libraries/fat_sd/ff.c **** 	FATFS* fs,		/* File system object */
 381:Libraries/fat_sd/ff.c **** 	UINT i			/* Semaphore index */
 382:Libraries/fat_sd/ff.c **** )
 383:Libraries/fat_sd/ff.c **** {
 384:Libraries/fat_sd/ff.c **** 	WORD n;
 385:Libraries/fat_sd/ff.c **** 	FRESULT res;
 386:Libraries/fat_sd/ff.c **** 
 387:Libraries/fat_sd/ff.c **** 
 388:Libraries/fat_sd/ff.c **** 	if (--i < _FS_SHARE) {
 389:Libraries/fat_sd/ff.c **** 		n = fs->flsem[i].ctr;
 390:Libraries/fat_sd/ff.c **** 		if (n >= 0x100) n = 0;
 391:Libraries/fat_sd/ff.c **** 		if (n) n--;
 392:Libraries/fat_sd/ff.c **** 		fs->flsem[i].ctr = n;
 393:Libraries/fat_sd/ff.c **** 		res = FR_OK;
 394:Libraries/fat_sd/ff.c **** 	} else {
 395:Libraries/fat_sd/ff.c **** 		res = FR_INT_ERR;
 396:Libraries/fat_sd/ff.c **** 	}
 397:Libraries/fat_sd/ff.c **** 	return res;
 398:Libraries/fat_sd/ff.c **** }
 399:Libraries/fat_sd/ff.c **** 
 400:Libraries/fat_sd/ff.c **** #endif
 401:Libraries/fat_sd/ff.c **** 
 402:Libraries/fat_sd/ff.c **** 
 403:Libraries/fat_sd/ff.c **** 
 404:Libraries/fat_sd/ff.c **** /*-----------------------------------------------------------------------*/
 405:Libraries/fat_sd/ff.c **** /* Change window offset                                                  */
 406:Libraries/fat_sd/ff.c **** /*-----------------------------------------------------------------------*/
 407:Libraries/fat_sd/ff.c **** 
 408:Libraries/fat_sd/ff.c **** static
 409:Libraries/fat_sd/ff.c **** FRESULT move_window (
 410:Libraries/fat_sd/ff.c **** 	FATFS *fs,		/* File system object */
 411:Libraries/fat_sd/ff.c **** 	DWORD sector	/* Sector number to make appearance in the fs->win[] */
 412:Libraries/fat_sd/ff.c **** )					/* Move to zero only writes back dirty window */
 413:Libraries/fat_sd/ff.c **** {
 414:Libraries/fat_sd/ff.c **** 	DWORD wsect;
 415:Libraries/fat_sd/ff.c **** 
 416:Libraries/fat_sd/ff.c **** 
 417:Libraries/fat_sd/ff.c **** 	wsect = fs->winsect;
 418:Libraries/fat_sd/ff.c **** 	if (wsect != sector) {	/* Changed current window */
 419:Libraries/fat_sd/ff.c **** #if !_FS_READONLY
 420:Libraries/fat_sd/ff.c **** 		if (fs->wflag) {	/* Write back dirty window if needed */
 421:Libraries/fat_sd/ff.c **** 			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
 422:Libraries/fat_sd/ff.c **** 				return FR_DISK_ERR;
 423:Libraries/fat_sd/ff.c **** 			fs->wflag = 0;
 424:Libraries/fat_sd/ff.c **** 			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
 425:Libraries/fat_sd/ff.c **** 				BYTE nf;
 426:Libraries/fat_sd/ff.c **** 				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 427:Libraries/fat_sd/ff.c **** 					wsect += fs->fsize;
 428:Libraries/fat_sd/ff.c **** 					disk_write(fs->drv, fs->win, wsect, 1);
 429:Libraries/fat_sd/ff.c **** 				}
 430:Libraries/fat_sd/ff.c **** 			}
 431:Libraries/fat_sd/ff.c **** 		}
 432:Libraries/fat_sd/ff.c **** #endif
 433:Libraries/fat_sd/ff.c **** 		if (sector) {
 434:Libraries/fat_sd/ff.c **** 			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
 435:Libraries/fat_sd/ff.c **** 				return FR_DISK_ERR;
 436:Libraries/fat_sd/ff.c **** 			fs->winsect = sector;
 437:Libraries/fat_sd/ff.c **** 		}
 438:Libraries/fat_sd/ff.c **** 	}
 439:Libraries/fat_sd/ff.c **** 
 440:Libraries/fat_sd/ff.c **** 	return FR_OK;
 441:Libraries/fat_sd/ff.c **** }
 442:Libraries/fat_sd/ff.c **** 
 443:Libraries/fat_sd/ff.c **** 
 444:Libraries/fat_sd/ff.c **** 
 445:Libraries/fat_sd/ff.c **** 
 446:Libraries/fat_sd/ff.c **** /*-----------------------------------------------------------------------*/
 447:Libraries/fat_sd/ff.c **** /* Clean-up cached data                                                  */
 448:Libraries/fat_sd/ff.c **** /*-----------------------------------------------------------------------*/
 449:Libraries/fat_sd/ff.c **** #if !_FS_READONLY
 450:Libraries/fat_sd/ff.c **** static
 451:Libraries/fat_sd/ff.c **** FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
 452:Libraries/fat_sd/ff.c **** 	FATFS *fs	/* File system object */
 453:Libraries/fat_sd/ff.c **** )
 454:Libraries/fat_sd/ff.c **** {
 455:Libraries/fat_sd/ff.c **** 	FRESULT res;
 456:Libraries/fat_sd/ff.c **** 
 457:Libraries/fat_sd/ff.c **** 
 458:Libraries/fat_sd/ff.c **** 	res = move_window(fs, 0);
 459:Libraries/fat_sd/ff.c **** 	if (res == FR_OK) {
 460:Libraries/fat_sd/ff.c **** 		/* Update FSInfo sector if needed */
 461:Libraries/fat_sd/ff.c **** 		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
 462:Libraries/fat_sd/ff.c **** 			fs->winsect = 0;
 463:Libraries/fat_sd/ff.c **** 			mem_set(fs->win, 0, 512);
 464:Libraries/fat_sd/ff.c **** 			ST_WORD(fs->win+BS_55AA, 0xAA55);
 465:Libraries/fat_sd/ff.c **** 			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
 466:Libraries/fat_sd/ff.c **** 			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
 467:Libraries/fat_sd/ff.c **** 			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
 468:Libraries/fat_sd/ff.c **** 			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
 469:Libraries/fat_sd/ff.c **** 			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
 470:Libraries/fat_sd/ff.c **** 			fs->fsi_flag = 0;
 471:Libraries/fat_sd/ff.c **** 		}
 472:Libraries/fat_sd/ff.c **** 		/* Make sure that no pending write process in the physical drive */
 473:Libraries/fat_sd/ff.c **** 		if (disk_ioctl(fs->drv, CTRL_SYNC, (void*)0) != RES_OK)
 474:Libraries/fat_sd/ff.c **** 			res = FR_DISK_ERR;
 475:Libraries/fat_sd/ff.c **** 	}
 476:Libraries/fat_sd/ff.c **** 
 477:Libraries/fat_sd/ff.c **** 	return res;
 478:Libraries/fat_sd/ff.c **** }
 479:Libraries/fat_sd/ff.c **** #endif
 480:Libraries/fat_sd/ff.c **** 
 481:Libraries/fat_sd/ff.c **** 
 482:Libraries/fat_sd/ff.c **** 
 483:Libraries/fat_sd/ff.c **** 
 484:Libraries/fat_sd/ff.c **** /*-----------------------------------------------------------------------*/
 485:Libraries/fat_sd/ff.c **** /* FAT access - Read value of a FAT entry                                */
 486:Libraries/fat_sd/ff.c **** /*-----------------------------------------------------------------------*/
 487:Libraries/fat_sd/ff.c **** 
 488:Libraries/fat_sd/ff.c **** 
 489:Libraries/fat_sd/ff.c **** DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
 490:Libraries/fat_sd/ff.c **** 	FATFS *fs,	/* File system object */
 491:Libraries/fat_sd/ff.c **** 	DWORD clst	/* Cluster# to get the link information */
 492:Libraries/fat_sd/ff.c **** )
 493:Libraries/fat_sd/ff.c **** {
 494:Libraries/fat_sd/ff.c **** 	UINT wc, bc;
 495:Libraries/fat_sd/ff.c **** 	BYTE *p;
 496:Libraries/fat_sd/ff.c **** 
 497:Libraries/fat_sd/ff.c **** 
 498:Libraries/fat_sd/ff.c **** 	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
 499:Libraries/fat_sd/ff.c **** 		return 1;
 500:Libraries/fat_sd/ff.c **** 
 501:Libraries/fat_sd/ff.c **** 	switch (fs->fs_type) {
 502:Libraries/fat_sd/ff.c **** 	case FS_FAT12 :
 503:Libraries/fat_sd/ff.c **** 		bc = (UINT)clst; bc += bc / 2;
 504:Libraries/fat_sd/ff.c **** 		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
 505:Libraries/fat_sd/ff.c **** 		wc = fs->win[bc % SS(fs)]; bc++;
 506:Libraries/fat_sd/ff.c **** 		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
 507:Libraries/fat_sd/ff.c **** 		wc |= fs->win[bc % SS(fs)] << 8;
 508:Libraries/fat_sd/ff.c **** 		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 509:Libraries/fat_sd/ff.c **** 
 510:Libraries/fat_sd/ff.c **** 	case FS_FAT16 :
 511:Libraries/fat_sd/ff.c **** 		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
 512:Libraries/fat_sd/ff.c **** 		p = &fs->win[clst * 2 % SS(fs)];
 513:Libraries/fat_sd/ff.c **** 		return LD_WORD(p);
 514:Libraries/fat_sd/ff.c **** 
 515:Libraries/fat_sd/ff.c **** 	case FS_FAT32 :
 516:Libraries/fat_sd/ff.c **** 		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
 517:Libraries/fat_sd/ff.c **** 		p = &fs->win[clst * 4 % SS(fs)];
 518:Libraries/fat_sd/ff.c **** 		return LD_DWORD(p) & 0x0FFFFFFF;
 519:Libraries/fat_sd/ff.c **** 	}
 520:Libraries/fat_sd/ff.c **** 
 521:Libraries/fat_sd/ff.c **** 	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
 522:Libraries/fat_sd/ff.c **** }
 523:Libraries/fat_sd/ff.c **** 
 524:Libraries/fat_sd/ff.c **** 
 525:Libraries/fat_sd/ff.c **** 
 526:Libraries/fat_sd/ff.c **** 
 527:Libraries/fat_sd/ff.c **** /*-----------------------------------------------------------------------*/
 528:Libraries/fat_sd/ff.c **** /* FAT access - Change value of a FAT entry                              */
 529:Libraries/fat_sd/ff.c **** /*-----------------------------------------------------------------------*/
 530:Libraries/fat_sd/ff.c **** #if !_FS_READONLY
 531:Libraries/fat_sd/ff.c **** 
 532:Libraries/fat_sd/ff.c **** FRESULT put_fat (
 533:Libraries/fat_sd/ff.c **** 	FATFS *fs,	/* File system object */
 534:Libraries/fat_sd/ff.c **** 	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
 535:Libraries/fat_sd/ff.c **** 	DWORD val	/* New value to mark the cluster */
 536:Libraries/fat_sd/ff.c **** )
 537:Libraries/fat_sd/ff.c **** {
 538:Libraries/fat_sd/ff.c **** 	UINT bc;
 539:Libraries/fat_sd/ff.c **** 	BYTE *p;
 540:Libraries/fat_sd/ff.c **** 	FRESULT res;
 541:Libraries/fat_sd/ff.c **** 
 542:Libraries/fat_sd/ff.c **** 
 543:Libraries/fat_sd/ff.c **** 	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 544:Libraries/fat_sd/ff.c **** 		res = FR_INT_ERR;
 545:Libraries/fat_sd/ff.c **** 
 546:Libraries/fat_sd/ff.c **** 	} else {
 547:Libraries/fat_sd/ff.c **** 		switch (fs->fs_type) {
 548:Libraries/fat_sd/ff.c **** 		case FS_FAT12 :
 549:Libraries/fat_sd/ff.c **** 			bc = clst; bc += bc / 2;
 550:Libraries/fat_sd/ff.c **** 			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 551:Libraries/fat_sd/ff.c **** 			if (res != FR_OK) break;
 552:Libraries/fat_sd/ff.c **** 			p = &fs->win[bc % SS(fs)];
 553:Libraries/fat_sd/ff.c **** 			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 554:Libraries/fat_sd/ff.c **** 			bc++;
 555:Libraries/fat_sd/ff.c **** 			fs->wflag = 1;
 556:Libraries/fat_sd/ff.c **** 			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 557:Libraries/fat_sd/ff.c **** 			if (res != FR_OK) break;
 558:Libraries/fat_sd/ff.c **** 			p = &fs->win[bc % SS(fs)];
 559:Libraries/fat_sd/ff.c **** 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 560:Libraries/fat_sd/ff.c **** 			break;
 561:Libraries/fat_sd/ff.c **** 
 562:Libraries/fat_sd/ff.c **** 		case FS_FAT16 :
 563:Libraries/fat_sd/ff.c **** 			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 564:Libraries/fat_sd/ff.c **** 			if (res != FR_OK) break;
 565:Libraries/fat_sd/ff.c **** 			p = &fs->win[clst * 2 % SS(fs)];
 566:Libraries/fat_sd/ff.c **** 			ST_WORD(p, (WORD)val);
 567:Libraries/fat_sd/ff.c **** 			break;
 568:Libraries/fat_sd/ff.c **** 
 569:Libraries/fat_sd/ff.c **** 		case FS_FAT32 :
 570:Libraries/fat_sd/ff.c **** 			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 571:Libraries/fat_sd/ff.c **** 			if (res != FR_OK) break;
 572:Libraries/fat_sd/ff.c **** 			p = &fs->win[clst * 4 % SS(fs)];
 573:Libraries/fat_sd/ff.c **** 			val |= LD_DWORD(p) & 0xF0000000;
 574:Libraries/fat_sd/ff.c **** 			ST_DWORD(p, val);
 575:Libraries/fat_sd/ff.c **** 			break;
 576:Libraries/fat_sd/ff.c **** 
 577:Libraries/fat_sd/ff.c **** 		default :
 578:Libraries/fat_sd/ff.c **** 			res = FR_INT_ERR;
 579:Libraries/fat_sd/ff.c **** 		}
 580:Libraries/fat_sd/ff.c **** 		fs->wflag = 1;
 581:Libraries/fat_sd/ff.c **** 	}
 582:Libraries/fat_sd/ff.c **** 
 583:Libraries/fat_sd/ff.c **** 	return res;
 584:Libraries/fat_sd/ff.c **** }
 585:Libraries/fat_sd/ff.c **** #endif /* !_FS_READONLY */
 586:Libraries/fat_sd/ff.c **** 
 587:Libraries/fat_sd/ff.c **** 
 588:Libraries/fat_sd/ff.c **** 
 589:Libraries/fat_sd/ff.c **** 
 590:Libraries/fat_sd/ff.c **** /*-----------------------------------------------------------------------*/
 591:Libraries/fat_sd/ff.c **** /* FAT handling - Remove a cluster chain                                 */
 592:Libraries/fat_sd/ff.c **** /*-----------------------------------------------------------------------*/
 593:Libraries/fat_sd/ff.c **** #if !_FS_READONLY
 594:Libraries/fat_sd/ff.c **** static
 595:Libraries/fat_sd/ff.c **** FRESULT remove_chain (
 596:Libraries/fat_sd/ff.c **** 	FATFS *fs,			/* File system object */
 597:Libraries/fat_sd/ff.c **** 	DWORD clst			/* Cluster# to remove a chain from */
 598:Libraries/fat_sd/ff.c **** )
 599:Libraries/fat_sd/ff.c **** {
 600:Libraries/fat_sd/ff.c **** 	FRESULT res;
 601:Libraries/fat_sd/ff.c **** 	DWORD nxt;
 602:Libraries/fat_sd/ff.c **** 
 603:Libraries/fat_sd/ff.c **** 
 604:Libraries/fat_sd/ff.c **** 	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 605:Libraries/fat_sd/ff.c **** 		res = FR_INT_ERR;
 606:Libraries/fat_sd/ff.c **** 
 607:Libraries/fat_sd/ff.c **** 	} else {
 608:Libraries/fat_sd/ff.c **** 		res = FR_OK;
 609:Libraries/fat_sd/ff.c **** 		while (clst < fs->n_fatent) {			/* Not a last link? */
 610:Libraries/fat_sd/ff.c **** 			nxt = get_fat(fs, clst);			/* Get cluster status */
 611:Libraries/fat_sd/ff.c **** 			if (nxt == 0) break;				/* Empty cluster? */
 612:Libraries/fat_sd/ff.c **** 			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 613:Libraries/fat_sd/ff.c **** 			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 614:Libraries/fat_sd/ff.c **** 			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 615:Libraries/fat_sd/ff.c **** 			if (res != FR_OK) break;
 616:Libraries/fat_sd/ff.c **** 			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
 617:Libraries/fat_sd/ff.c **** 				fs->free_clust++;
 618:Libraries/fat_sd/ff.c **** 				fs->fsi_flag = 1;
 619:Libraries/fat_sd/ff.c **** 			}
 620:Libraries/fat_sd/ff.c **** 			clst = nxt;	/* Next cluster */
 621:Libraries/fat_sd/ff.c **** 		}
 622:Libraries/fat_sd/ff.c **** 	}
 623:Libraries/fat_sd/ff.c **** 
 624:Libraries/fat_sd/ff.c **** 	return res;
 625:Libraries/fat_sd/ff.c **** }
 626:Libraries/fat_sd/ff.c **** #endif
 627:Libraries/fat_sd/ff.c **** 
 628:Libraries/fat_sd/ff.c **** 
 629:Libraries/fat_sd/ff.c **** 
 630:Libraries/fat_sd/ff.c **** 
 631:Libraries/fat_sd/ff.c **** /*-----------------------------------------------------------------------*/
 632:Libraries/fat_sd/ff.c **** /* FAT handling - Stretch or Create a cluster chain                      */
 633:Libraries/fat_sd/ff.c **** /*-----------------------------------------------------------------------*/
 634:Libraries/fat_sd/ff.c **** #if !_FS_READONLY
 635:Libraries/fat_sd/ff.c **** static
 636:Libraries/fat_sd/ff.c **** DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster
 637:Libraries/fat_sd/ff.c **** 	FATFS *fs,			/* File system object */
 638:Libraries/fat_sd/ff.c **** 	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
 639:Libraries/fat_sd/ff.c **** )
 640:Libraries/fat_sd/ff.c **** {
 641:Libraries/fat_sd/ff.c **** 	DWORD cs, ncl, scl;
 642:Libraries/fat_sd/ff.c **** 
 643:Libraries/fat_sd/ff.c **** 
 644:Libraries/fat_sd/ff.c **** 	if (clst == 0) {		/* Create a new chain */
 645:Libraries/fat_sd/ff.c **** 		scl = fs->last_clust;			/* Get suggested start point */
 646:Libraries/fat_sd/ff.c **** 		if (!scl || scl >= fs->n_fatent) scl = 1;
 647:Libraries/fat_sd/ff.c **** 	}
 648:Libraries/fat_sd/ff.c **** 	else {					/* Stretch the current chain */
 649:Libraries/fat_sd/ff.c **** 		cs = get_fat(fs, clst);			/* Check the cluster status */
 650:Libraries/fat_sd/ff.c **** 		if (cs < 2) return 1;			/* It is an invalid cluster */
 651:Libraries/fat_sd/ff.c **** 		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 652:Libraries/fat_sd/ff.c **** 		scl = clst;
 653:Libraries/fat_sd/ff.c **** 	}
 654:Libraries/fat_sd/ff.c **** 
 655:Libraries/fat_sd/ff.c **** 	ncl = scl;				/* Start cluster */
 656:Libraries/fat_sd/ff.c **** 	for (;;) {
 657:Libraries/fat_sd/ff.c **** 		ncl++;							/* Next cluster */
 658:Libraries/fat_sd/ff.c **** 		if (ncl >= fs->n_fatent) {		/* Wrap around */
 659:Libraries/fat_sd/ff.c **** 			ncl = 2;
 660:Libraries/fat_sd/ff.c **** 			if (ncl > scl) return 0;	/* No free cluster */
 661:Libraries/fat_sd/ff.c **** 		}
 662:Libraries/fat_sd/ff.c **** 		cs = get_fat(fs, ncl);			/* Get the cluster status */
 663:Libraries/fat_sd/ff.c **** 		if (cs == 0) break;				/* Found a free cluster */
 664:Libraries/fat_sd/ff.c **** 		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 665:Libraries/fat_sd/ff.c **** 			return cs;
 666:Libraries/fat_sd/ff.c **** 		if (ncl == scl) return 0;		/* No free cluster */
 667:Libraries/fat_sd/ff.c **** 	}
 668:Libraries/fat_sd/ff.c **** 
 669:Libraries/fat_sd/ff.c **** 	if (put_fat(fs, ncl, 0x0FFFFFFF))	/* Mark the new cluster "last link" */
 670:Libraries/fat_sd/ff.c **** 		return 0xFFFFFFFF;
 671:Libraries/fat_sd/ff.c **** 	if (clst != 0) {					/* Link it to the previous one if needed */
 672:Libraries/fat_sd/ff.c **** 		if (put_fat(fs, clst, ncl))
 673:Libraries/fat_sd/ff.c **** 			return 0xFFFFFFFF;
 674:Libraries/fat_sd/ff.c **** 	}
 675:Libraries/fat_sd/ff.c **** 
 676:Libraries/fat_sd/ff.c **** 	fs->last_clust = ncl;				/* Update FSINFO */
 677:Libraries/fat_sd/ff.c **** 	if (fs->free_clust != 0xFFFFFFFF) {
 678:Libraries/fat_sd/ff.c **** 		fs->free_clust--;
 679:Libraries/fat_sd/ff.c **** 		fs->fsi_flag = 1;
 680:Libraries/fat_sd/ff.c **** 	}
 681:Libraries/fat_sd/ff.c **** 
 682:Libraries/fat_sd/ff.c **** 	return ncl;		/* Return new cluster number */
 683:Libraries/fat_sd/ff.c **** }
 684:Libraries/fat_sd/ff.c **** #endif /* !_FS_READONLY */
 685:Libraries/fat_sd/ff.c **** 
 686:Libraries/fat_sd/ff.c **** 
 687:Libraries/fat_sd/ff.c **** 
 688:Libraries/fat_sd/ff.c **** 
 689:Libraries/fat_sd/ff.c **** /*-----------------------------------------------------------------------*/
 690:Libraries/fat_sd/ff.c **** /* Get sector# from cluster#                                             */
 691:Libraries/fat_sd/ff.c **** /*-----------------------------------------------------------------------*/
 692:Libraries/fat_sd/ff.c **** 
 693:Libraries/fat_sd/ff.c **** 
 694:Libraries/fat_sd/ff.c **** DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
 695:Libraries/fat_sd/ff.c **** 	FATFS *fs,		/* File system object */
 696:Libraries/fat_sd/ff.c **** 	DWORD clst		/* Cluster# to be converted */
 697:Libraries/fat_sd/ff.c **** )
 698:Libraries/fat_sd/ff.c **** {
 123              	 1 700 0
 124              		ldr	r3, [r0, #28]
 125              		.loc 1 699 0
 126              		subs	r1, r1, #2
 127              	.LVL8:
 699:Libraries/fat_sd/ff.c **** 	clst -= 2;
 700:Libraries/fat_sd/ff.c **** 	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
 128              	 1 700 0
 129 0000 C369     		subs	r3, r3, #2
 130              		cmp	r1, r3
 131 0002 0239     		.loc 1 698 0
 132              		@ lr needed for prologue
 133              		.loc 1 700 0
 134 0004 023B     		bcc	.L18
 135 0006 9942     		movs	r0, #0
 136              	.LVL9:
 137              		b	.L20
 138              	.LVL10:
 139 0008 01D3     	.L18:
 140 000a 0020     		.loc 1 701 0
 141              		ldrb	r2, [r0, #2]	@ zero_extendqisi2
 142 000c 03E0     		ldr	r3, [r0, #44]
 143              		mla	r0, r2, r1, r3
 144              	.LVL11:
 701:Libraries/fat_sd/ff.c **** 	return clst * fs->csize + fs->database;
 145              	 0
 146 000e 8278     		bx	lr
 147 0010 C36A     	.LFE12:
 149              		.section	.text.gen_numname,"ax",%progbits
 150              		.align	2
 702:Libraries/fat_sd/ff.c **** }
 151              	al	gen_numname
 152 0016 7047     		.thumb
 153              		.thumb_func
 155              	gen_numname:
 156              	.LFB18:
 157              		.loc 1 937 0
 158              		@ args = 0, pretend = 0, frame = 8
 159              		@ frame_needed = 0, uses_anonymous_args = 0
 160              	.LVL12:
 161              		push	{r0, r1, r4, r5, r6, lr}
 162              	.LCFI1:
 703:Libraries/fat_sd/ff.c **** 
 704:Libraries/fat_sd/ff.c **** 
 705:Libraries/fat_sd/ff.c **** 
 706:Libraries/fat_sd/ff.c **** 
 707:Libraries/fat_sd/ff.c **** /*-----------------------------------------------------------------------*/
 708:Libraries/fat_sd/ff.c **** /* Directory handling - Set directory index                              */
 709:Libraries/fat_sd/ff.c **** /*-----------------------------------------------------------------------*/
 710:Libraries/fat_sd/ff.c **** 
 711:Libraries/fat_sd/ff.c **** static
 712:Libraries/fat_sd/ff.c **** FRESULT dir_sdi (
 713:Libraries/fat_sd/ff.c **** 	DIR *dj,		/* Pointer to directory object */
 714:Libraries/fat_sd/ff.c **** 	WORD idx		/* Directory index number */
 715:Libraries/fat_sd/ff.c **** )
 716:Libraries/fat_sd/ff.c **** {
 717:Libraries/fat_sd/ff.c **** 	DWORD clst;
 718:Libraries/fat_sd/ff.c **** 	WORD ic;
 719:Libraries/fat_sd/ff.c **** 
 720:Libraries/fat_sd/ff.c **** 
 721:Libraries/fat_sd/ff.c **** 	dj->index = idx;
 722:Libraries/fat_sd/ff.c **** 	clst = dj->sclust;
 723:Libraries/fat_sd/ff.c **** 	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
 724:Libraries/fat_sd/ff.c **** 		return FR_INT_ERR;
 725:Libraries/fat_sd/ff.c **** 	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 726:Libraries/fat_sd/ff.c **** 		clst = dj->fs->dirbase;
 727:Libraries/fat_sd/ff.c **** 
 728:Libraries/fat_sd/ff.c **** 	if (clst == 0) {	/* Static table */
 729:Libraries/fat_sd/ff.c **** 		dj->clust = clst;
 730:Libraries/fat_sd/ff.c **** 		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
 731:Libraries/fat_sd/ff.c **** 			return FR_INT_ERR;
 732:Libraries/fat_sd/ff.c **** 		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / 32);	/* Sector# */
 733:Libraries/fat_sd/ff.c **** 	}
 734:Libraries/fat_sd/ff.c **** 	else {				/* Dynamic table */
 735:Libraries/fat_sd/ff.c **** 		ic = SS(dj->fs) / 32 * dj->fs->csize;	/* Entries per cluster */
 736:Libraries/fat_sd/ff.c **** 		while (idx >= ic) {	/* Follow cluster chain */
 737:Libraries/fat_sd/ff.c **** 			clst = get_fat(dj->fs, clst);				/* Get next cluster */
 738:Libraries/fat_sd/ff.c **** 			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 739:Libraries/fat_sd/ff.c **** 			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
 740:Libraries/fat_sd/ff.c **** 				return FR_INT_ERR;
 741:Libraries/fat_sd/ff.c **** 			idx -= ic;
 742:Libraries/fat_sd/ff.c **** 		}
 743:Libraries/fat_sd/ff.c **** 		dj->clust = clst;
 744:Libraries/fat_sd/ff.c **** 		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / 32);	/* Sector# */
 745:Libraries/fat_sd/ff.c **** 	}
 746:Libraries/fat_sd/ff.c **** 
 747:Libraries/fat_sd/ff.c **** 	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / 32)) * 32;	/* Ptr to the entry in the sector */
 748:Libraries/fat_sd/ff.c **** 
 749:Libraries/fat_sd/ff.c **** 	return FR_OK;	/* Seek succeeded */
 750:Libraries/fat_sd/ff.c **** }
 751:Libraries/fat_sd/ff.c **** 
 752:Libraries/fat_sd/ff.c **** 
 753:Libraries/fat_sd/ff.c **** 
 754:Libraries/fat_sd/ff.c **** 
 755:Libraries/fat_sd/ff.c **** /*-----------------------------------------------------------------------*/
 756:Libraries/fat_sd/ff.c **** /* Directory handling - Move directory index next                        */
 757:Libraries/fat_sd/ff.c **** /*-----------------------------------------------------------------------*/
 758:Libraries/fat_sd/ff.c **** 
 759:Libraries/fat_sd/ff.c **** static
 760:Libraries/fat_sd/ff.c **** FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch
 761:Libraries/fat_sd/ff.c **** 	DIR *dj,		/* Pointer to directory object */
 762:Libraries/fat_sd/ff.c **** 	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
 763:Libraries/fat_sd/ff.c **** )
 764:Libraries/fat_sd/ff.c **** {
 765:Libraries/fat_sd/ff.c **** 	DWORD clst;
 766:Libraries/fat_sd/ff.c **** 	WORD i;
 767:Libraries/fat_sd/ff.c **** 
 768:Libraries/fat_sd/ff.c **** 
 769:Libraries/fat_sd/ff.c **** 	i = dj->index + 1;
 770:Libraries/fat_sd/ff.c **** 	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
 771:Libraries/fat_sd/ff.c **** 		return FR_NO_FILE;
 772:Libraries/fat_sd/ff.c **** 
 773:Libraries/fat_sd/ff.c **** 	if (!(i % (SS(dj->fs) / 32))) {	/* Sector changed? */
 774:Libraries/fat_sd/ff.c **** 		dj->sect++;					/* Next sector */
 775:Libraries/fat_sd/ff.c **** 
 776:Libraries/fat_sd/ff.c **** 		if (dj->clust == 0) {	/* Static table */
 777:Libraries/fat_sd/ff.c **** 			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
 778:Libraries/fat_sd/ff.c **** 				return FR_NO_FILE;
 779:Libraries/fat_sd/ff.c **** 		}
 780:Libraries/fat_sd/ff.c **** 		else {					/* Dynamic table */
 781:Libraries/fat_sd/ff.c **** 			if (((i / (SS(dj->fs) / 32)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
 782:Libraries/fat_sd/ff.c **** 				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
 783:Libraries/fat_sd/ff.c **** 				if (clst <= 1) return FR_INT_ERR;
 784:Libraries/fat_sd/ff.c **** 				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 785:Libraries/fat_sd/ff.c **** 				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
 786:Libraries/fat_sd/ff.c **** #if !_FS_READONLY
 787:Libraries/fat_sd/ff.c **** 					BYTE c;
 788:Libraries/fat_sd/ff.c **** 					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
 789:Libraries/fat_sd/ff.c **** 					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
 790:Libraries/fat_sd/ff.c **** 					if (clst == 0) return FR_DENIED;			/* No free cluster */
 791:Libraries/fat_sd/ff.c **** 					if (clst == 1) return FR_INT_ERR;
 792:Libraries/fat_sd/ff.c **** 					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 793:Libraries/fat_sd/ff.c **** 					/* Clean-up stretched table */
 794:Libraries/fat_sd/ff.c **** 					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
 795:Libraries/fat_sd/ff.c **** 					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
 796:Libraries/fat_sd/ff.c **** 					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
 797:Libraries/fat_sd/ff.c **** 					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
 798:Libraries/fat_sd/ff.c **** 						dj->fs->wflag = 1;
 799:Libraries/fat_sd/ff.c **** 						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
 800:Libraries/fat_sd/ff.c **** 						dj->fs->winsect++;
 801:Libraries/fat_sd/ff.c **** 					}
 802:Libraries/fat_sd/ff.c **** 					dj->fs->winsect -= c;						/* Rewind window address */
 803:Libraries/fat_sd/ff.c **** #else
 804:Libraries/fat_sd/ff.c **** 					return FR_NO_FILE;			/* Report EOT */
 805:Libraries/fat_sd/ff.c **** #endif
 806:Libraries/fat_sd/ff.c **** 				}
 807:Libraries/fat_sd/ff.c **** 				dj->clust = clst;				/* Initialize data for new cluster */
 808:Libraries/fat_sd/ff.c **** 				dj->sect = clust2sect(dj->fs, clst);
 809:Libraries/fat_sd/ff.c **** 			}
 810:Libraries/fat_sd/ff.c **** 		}
 811:Libraries/fat_sd/ff.c **** 	}
 812:Libraries/fat_sd/ff.c **** 
 813:Libraries/fat_sd/ff.c **** 	dj->index = i;
 814:Libraries/fat_sd/ff.c **** 	dj->dir = dj->fs->win + (i % (SS(dj->fs) / 32)) * 32;
 815:Libraries/fat_sd/ff.c **** 
 816:Libraries/fat_sd/ff.c **** 	return FR_OK;
 817:Libraries/fat_sd/ff.c **** }
 818:Libraries/fat_sd/ff.c **** 
 819:Libraries/fat_sd/ff.c **** 
 820:Libraries/fat_sd/ff.c **** 
 821:Libraries/fat_sd/ff.c **** 
 822:Libraries/fat_sd/ff.c **** /*-----------------------------------------------------------------------*/
 823:Libraries/fat_sd/ff.c **** /* LFN handling - Test/Pick/Fit an LFN segment from/to directory entry   */
 824:Libraries/fat_sd/ff.c **** /*-----------------------------------------------------------------------*/
 825:Libraries/fat_sd/ff.c **** #if _USE_LFN
 826:Libraries/fat_sd/ff.c **** static
 827:Libraries/fat_sd/ff.c **** const BYTE LfnOfs[] = {1,3,5,7,9,14,16,18,20,22,24,28,30};	/* Offset of LFN chars in the directory 
 828:Libraries/fat_sd/ff.c **** 
 829:Libraries/fat_sd/ff.c **** 
 830:Libraries/fat_sd/ff.c **** static
 831:Libraries/fat_sd/ff.c **** int cmp_lfn (			/* 1:Matched, 0:Not matched */
 832:Libraries/fat_sd/ff.c **** 	WCHAR *lfnbuf,		/* Pointer to the LFN to be compared */
 833:Libraries/fat_sd/ff.c **** 	BYTE *dir			/* Pointer to the directory entry containing a part of LFN */
 834:Libraries/fat_sd/ff.c **** )
 835:Libraries/fat_sd/ff.c **** {
 836:Libraries/fat_sd/ff.c **** 	int i, s;
 837:Libraries/fat_sd/ff.c **** 	WCHAR wc, uc;
 838:Libraries/fat_sd/ff.c **** 
 839:Libraries/fat_sd/ff.c **** 
 840:Libraries/fat_sd/ff.c **** 	i = ((dir[LDIR_Ord] & 0xBF) - 1) * 13;	/* Get offset in the LFN buffer */
 841:Libraries/fat_sd/ff.c **** 	s = 0; wc = 1;
 842:Libraries/fat_sd/ff.c **** 	do {
 843:Libraries/fat_sd/ff.c **** 		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
 844:Libraries/fat_sd/ff.c **** 		if (wc) {	/* Last char has not been processed */
 845:Libraries/fat_sd/ff.c **** 			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 846:Libraries/fat_sd/ff.c **** 			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 847:Libraries/fat_sd/ff.c **** 				return 0;				/* Not matched */
 848:Libraries/fat_sd/ff.c **** 		} else {
 849:Libraries/fat_sd/ff.c **** 			if (uc != 0xFFFF) return 0;	/* Check filler */
 850:Libraries/fat_sd/ff.c **** 		}
 851:Libraries/fat_sd/ff.c **** 	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
 852:Libraries/fat_sd/ff.c **** 
 853:Libraries/fat_sd/ff.c **** 	if ((dir[LDIR_Ord] & 0x40) && wc && lfnbuf[i])	/* Last segment matched but different length */
 854:Libraries/fat_sd/ff.c **** 		return 0;
 855:Libraries/fat_sd/ff.c **** 
 856:Libraries/fat_sd/ff.c **** 	return 1;						/* The part of LFN matched */
 857:Libraries/fat_sd/ff.c **** }
 858:Libraries/fat_sd/ff.c **** 
 859:Libraries/fat_sd/ff.c **** 
 860:Libraries/fat_sd/ff.c **** 
 861:Libraries/fat_sd/ff.c **** static
 862:Libraries/fat_sd/ff.c **** int pick_lfn (			/* 1:Succeeded, 0:Buffer overflow */
 863:Libraries/fat_sd/ff.c **** 	WCHAR *lfnbuf,		/* Pointer to the Unicode-LFN buffer */
 864:Libraries/fat_sd/ff.c **** 	BYTE *dir			/* Pointer to the directory entry */
 865:Libraries/fat_sd/ff.c **** )
 866:Libraries/fat_sd/ff.c **** {
 867:Libraries/fat_sd/ff.c **** 	int i, s;
 868:Libraries/fat_sd/ff.c **** 	WCHAR wc, uc;
 869:Libraries/fat_sd/ff.c **** 
 870:Libraries/fat_sd/ff.c **** 
 871:Libraries/fat_sd/ff.c **** 	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 872:Libraries/fat_sd/ff.c **** 
 873:Libraries/fat_sd/ff.c **** 	s = 0; wc = 1;
 874:Libraries/fat_sd/ff.c **** 	do {
 875:Libraries/fat_sd/ff.c **** 		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
 876:Libraries/fat_sd/ff.c **** 		if (wc) {	/* Last char has not been processed */
 877:Libraries/fat_sd/ff.c **** 			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 878:Libraries/fat_sd/ff.c **** 			lfnbuf[i++] = wc = uc;			/* Store it */
 879:Libraries/fat_sd/ff.c **** 		} else {
 880:Libraries/fat_sd/ff.c **** 			if (uc != 0xFFFF) return 0;		/* Check filler */
 881:Libraries/fat_sd/ff.c **** 		}
 882:Libraries/fat_sd/ff.c **** 	} while (++s < 13);						/* Read all character in the entry */
 883:Libraries/fat_sd/ff.c **** 
 884:Libraries/fat_sd/ff.c **** 	if (dir[LDIR_Ord] & 0x40) {				/* Put terminator if it is the last LFN part */
 885:Libraries/fat_sd/ff.c **** 		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 886:Libraries/fat_sd/ff.c **** 		lfnbuf[i] = 0;
 887:Libraries/fat_sd/ff.c **** 	}
 888:Libraries/fat_sd/ff.c **** 
 889:Libraries/fat_sd/ff.c **** 	return 1;
 890:Libraries/fat_sd/ff.c **** }
 891:Libraries/fat_sd/ff.c **** 
 892:Libraries/fat_sd/ff.c **** 
 893:Libraries/fat_sd/ff.c **** #if !_FS_READONLY
 894:Libraries/fat_sd/ff.c **** static
 895:Libraries/fat_sd/ff.c **** void fit_lfn (
 896:Libraries/fat_sd/ff.c **** 	const WCHAR *lfnbuf,	/* Pointer to the LFN buffer */
 897:Libraries/fat_sd/ff.c **** 	BYTE *dir,				/* Pointer to the directory entry */
 898:Libraries/fat_sd/ff.c **** 	BYTE ord,				/* LFN order (1-20) */
 899:Libraries/fat_sd/ff.c **** 	BYTE sum				/* SFN sum */
 900:Libraries/fat_sd/ff.c **** )
 901:Libraries/fat_sd/ff.c **** {
 902:Libraries/fat_sd/ff.c **** 	int i, s;
 903:Libraries/fat_sd/ff.c **** 	WCHAR wc;
 904:Libraries/fat_sd/ff.c **** 
 905:Libraries/fat_sd/ff.c **** 
 906:Libraries/fat_sd/ff.c **** 	dir[LDIR_Chksum] = sum;			/* Set check sum */
 907:Libraries/fat_sd/ff.c **** 	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 908:Libraries/fat_sd/ff.c **** 	dir[LDIR_Type] = 0;
 909:Libraries/fat_sd/ff.c **** 	ST_WORD(dir+LDIR_FstClusLO, 0);
 910:Libraries/fat_sd/ff.c **** 
 911:Libraries/fat_sd/ff.c **** 	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 912:Libraries/fat_sd/ff.c **** 	s = wc = 0;
 913:Libraries/fat_sd/ff.c **** 	do {
 914:Libraries/fat_sd/ff.c **** 		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
 915:Libraries/fat_sd/ff.c **** 		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 916:Libraries/fat_sd/ff.c **** 		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
 917:Libraries/fat_sd/ff.c **** 	} while (++s < 13);
 918:Libraries/fat_sd/ff.c **** 	if (wc == 0xFFFF || !lfnbuf[i]) ord |= 0x40;	/* Bottom LFN part is the start of LFN sequence */
 919:Libraries/fat_sd/ff.c **** 	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 920:Libraries/fat_sd/ff.c **** }
 921:Libraries/fat_sd/ff.c **** 
 922:Libraries/fat_sd/ff.c **** #endif
 923:Libraries/fat_sd/ff.c **** #endif
 924:Libraries/fat_sd/ff.c **** 
 925:Libraries/fat_sd/ff.c **** 
 926:Libraries/fat_sd/ff.c **** 
 927:Libraries/fat_sd/ff.c **** /*-----------------------------------------------------------------------*/
 928:Libraries/fat_sd/ff.c **** /* Create numbered name                                                  */
 929:Libraries/fat_sd/ff.c **** /*-----------------------------------------------------------------------*/
 930:Libraries/fat_sd/ff.c **** #if _USE_LFN
 931:Libraries/fat_sd/ff.c **** void gen_numname (
 932:Libraries/fat_sd/ff.c **** 	BYTE *dst,			/* Pointer to generated SFN */
 933:Libraries/fat_sd/ff.c **** 	const BYTE *src,	/* Pointer to source SFN to be modified */
 934:Libraries/fat_sd/ff.c **** 	const WCHAR *lfn,	/* Pointer to LFN */
 935:Libraries/fat_sd/ff.c **** 	WORD seq			/* Sequence number */
 936:Libraries/fat_sd/ff.c **** )
 937:Libraries/fat_sd/ff.c **** {
 163              	c 1 937 0
 164              		mov	r4, r3
 165              		mov	r5, r2
 166              		.loc 1 942 0
 167 0000 73B5     		movs	r2, #11
 168              	.LVL14:
 169              		.loc 1 937 0
 170              		mov	r6, r0
 171 0002 1C46     	.LVL15:
 172 0004 1546     		.loc 1 942 0
 938:Libraries/fat_sd/ff.c **** 	BYTE ns[8], c;
 939:Libraries/fat_sd/ff.c **** 	int i, j;
 940:Libraries/fat_sd/ff.c **** 
 941:Libraries/fat_sd/ff.c **** 
 942:Libraries/fat_sd/ff.c **** 	mem_cpy(dst, src, 11);
 173              	y
 174 0006 0B22     	.LVL16:
 175              		.loc 1 944 0
 176              		cmp	r4, #5
 177 0008 0646     		bls	.L23
 178              		mov	r1, r5
 179              	.L25:
 180 000a FFF7FEFF 		.loc 1 945 0
 181              		lsls	r3, r4, #15
 943:Libraries/fat_sd/ff.c **** 
 944:Libraries/fat_sd/ff.c **** 	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 182              	 [r1, #0]
 183 000e 052C     		orr	r3, r3, r4, lsr #1
 184 0010 0AD9     		adds	r3, r3, r2
 185 0012 2946     		uxth	r4, r3
 186              		ldrh	r3, [r1, #2]!
 945:Libraries/fat_sd/ff.c **** 		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
 187              	r3, #0
 188 0014 E303     		bne	.L25
 189 0016 0A88     	.L23:
 190 0018 43EA5403 		movs	r1, #7
 191 001c 9B18     	.LVL17:
 192 001e 9CB2     	.L26:
 193 0020 31F8023F 		.loc 1 951 0
 194 0024 002B     		and	r3, r4, #15
 195 0026 F5D1     		add	r2, r3, #48
 196              	.LVL18:
 197 0028 0721     		.loc 1 952 0
 198              		cmp	r2, #57
 199              		it	hi
 946:Libraries/fat_sd/ff.c **** 	}
 947:Libraries/fat_sd/ff.c **** 
 948:Libraries/fat_sd/ff.c **** 	/* itoa */
 949:Libraries/fat_sd/ff.c **** 	i = 7;
 950:Libraries/fat_sd/ff.c **** 	do {
 951:Libraries/fat_sd/ff.c **** 		c = (seq % 16) + '0';
 200              	, #7
 201 002a 04F00F03 		.loc 1 953 0
 202 002e 03F13002 		strb	r2, [sp, r1]
 203              		subs	r1, r1, #1
 952:Libraries/fat_sd/ff.c **** 		if (c > '9') c += 7;
 204              	c 1 955 0
 205 0032 392A     		lsrs	r4, r4, #4
 206 0034 88BF     		bne	.L26
 207 0036 0732     		.loc 1 956 0
 953:Libraries/fat_sd/ff.c **** 		ns[i--] = c;
 208              		r3, sp, #8
 209 0038 0DF80120 		adds	r2, r3, r1
 210 003c 0139     	.LVL19:
 954:Libraries/fat_sd/ff.c **** 		seq /= 16;
 955:Libraries/fat_sd/ff.c **** 	} while (seq);
 211              	vs	r3, #126
 212 003e 2409     		strb	r3, [r2, #-8]
 213 0040 F3D1     		mov	r2, r4
 956:Libraries/fat_sd/ff.c **** 	ns[i] = '~';
 214              	L20:
 215 0042 02AB     		.loc 1 959 0
 216 0044 5A18     		b	.L30
 217              	.L31:
 218 0046 7E23     		adds	r2, r2, #1
 219 0048 02F8083C 	.L30:
 220 004c 2246     		cmp	r2, r1
 221              		blt	.L32
 957:Libraries/fat_sd/ff.c **** 
 958:Libraries/fat_sd/ff.c **** 	/* Append the number */
 959:Libraries/fat_sd/ff.c **** 	for (j = 0; j < i && dst[j] != ' '; j++) {
 222              	dds	r0, r6, r2
 223 004e 00E0     		b	.L34
 224              	.L32:
 225 0050 0132     		ldrb	r3, [r2, r6]	@ zero_extendqisi2
 226              		cmp	r3, #32
 227 0052 8A42     		bne	.L31
 228 0054 01DB     		b	.L33
 229              	.L34:
 230 0056 B018     		.loc 1 966 0
 231 0058 03E0     		cmp	r1, #7
 232              		ble	.L35
 233 005a 935D     		movs	r3, #32
 234 005c 202B     		b	.L37
 235 005e F7D1     	.L35:
 236 0060 F9E7     		add	r4, sp, #8
 237              	.LVL21:
 960:Libraries/fat_sd/ff.c **** 		if (IsDBCS1(dst[j])) {
 961:Libraries/fat_sd/ff.c **** 			if (j == i - 1) break;
 962:Libraries/fat_sd/ff.c **** 			j++;
 963:Libraries/fat_sd/ff.c **** 		}
 964:Libraries/fat_sd/ff.c **** 	}
 965:Libraries/fat_sd/ff.c **** 	do {
 966:Libraries/fat_sd/ff.c **** 		dst[j++] = (i < 8) ? ns[i++] : ' ';
 238              	
 239 0062 0729     		ldrb	r3, [r3, #-8]	@ zero_extendqisi2
 240 0064 01DD     		adds	r1, r1, #1
 241 0066 2023     	.LVL22:
 242 0068 04E0     	.L37:
 243              		adds	r2, r2, #1
 244 006a 02AC     		.loc 1 967 0
 245              		cmp	r2, #7
 246 006c 6318     		.loc 1 966 0
 247 006e 13F8083C 		strb	r3, [r0], #1
 248 0072 0131     		.loc 1 967 0
 249              		ble	.L34
 250              		.loc 1 968 0
 251 0074 0132     		pop	{r2, r3, r4, r5, r6, pc}
 967:Libraries/fat_sd/ff.c **** 	} while (j < 8);
 252              	e	gen_numname, .-gen_numname
 253 0076 072A     		.section	.text.sum_sfn,"ax",%progbits
 254              		.align	2
 255 0078 00F8013B 		.thumb
 256              		.thumb_func
 968:Libraries/fat_sd/ff.c **** }
 258              	n:
 259 007e 7CBD     	.LFB19:
 260              		.loc 1 982 0
 261              		@ args = 0, pretend = 0, frame = 0
 262              		@ frame_needed = 0, uses_anonymous_args = 0
 263              	.LVL23:
 264              		push	{r4, lr}
 265              	.LCFI2:
 266              		.loc 1 982 0
 267              		movs	r1, #11
 268              	.LVL24:
 969:Libraries/fat_sd/ff.c **** #endif
 970:Libraries/fat_sd/ff.c **** 
 971:Libraries/fat_sd/ff.c **** 
 972:Libraries/fat_sd/ff.c **** 
 973:Libraries/fat_sd/ff.c **** 
 974:Libraries/fat_sd/ff.c **** /*-----------------------------------------------------------------------*/
 975:Libraries/fat_sd/ff.c **** /* Calculate sum of an SFN                                               */
 976:Libraries/fat_sd/ff.c **** /*-----------------------------------------------------------------------*/
 977:Libraries/fat_sd/ff.c **** #if _USE_LFN
 978:Libraries/fat_sd/ff.c **** static
 979:Libraries/fat_sd/ff.c **** BYTE sum_sfn (
 980:Libraries/fat_sd/ff.c **** 	const BYTE *dir		/* Ptr to directory entry */
 981:Libraries/fat_sd/ff.c **** )
 982:Libraries/fat_sd/ff.c **** {
 269              	
 270              		movs	r0, #0
 271              	.LVL25:
 272              	.L41:
 273 0000 10B5     		.loc 1 986 0
 274              		lsls	r3, r0, #7
 275              		ldrb	r2, [r4], #1	@ zero_extendqisi2
 276 0002 0B21     		orr	r3, r3, r0, lsr #1
 277              		adds	r3, r3, r2
 278 0004 0446     		adds	r1, r1, #-1
 279 0006 0020     		uxtb	r0, r3
 280              		bne	.L41
 281              		.loc 1 988 0
 983:Libraries/fat_sd/ff.c **** 	BYTE sum = 0;
 984:Libraries/fat_sd/ff.c **** 	int n = 11;
 985:Libraries/fat_sd/ff.c **** 
 986:Libraries/fat_sd/ff.c **** 	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 282              	}
 283 0008 C301     	.LFE19:
 285 000e 43EA5003 		.section	.text.f_mount,"ax",%progbits
 286 0012 9B18     		.align	2
 287 0014 11F1FF31 		.global	f_mount
 288 0018 D8B2     		.thumb
 289 001a F5D1     		.thumb_func
 987:Libraries/fat_sd/ff.c **** 	return sum;
 988:Libraries/fat_sd/ff.c **** }
 290              	_mount, %function
 291 001c 10BD     	f_mount:
 292              	.LFB30:
 293              		.loc 1 1853 0
 294 001e C046     		@ args = 0, pretend = 0, frame = 0
 295              		@ frame_needed = 0, uses_anonymous_args = 0
 296              	.LVL26:
 297              		.loc 1 1857 0
 298              		cmp	r0, #1
 299              		.loc 1 1853 0
 300              		push	{r4, lr}
 301              	.LCFI3:
 989:Libraries/fat_sd/ff.c **** #endif
 990:Libraries/fat_sd/ff.c **** 
 991:Libraries/fat_sd/ff.c **** 
 992:Libraries/fat_sd/ff.c **** 
 993:Libraries/fat_sd/ff.c **** 
 994:Libraries/fat_sd/ff.c **** /*-----------------------------------------------------------------------*/
 995:Libraries/fat_sd/ff.c **** /* Directory handling - Find an object in the directory                  */
 996:Libraries/fat_sd/ff.c **** /*-----------------------------------------------------------------------*/
 997:Libraries/fat_sd/ff.c **** 
 998:Libraries/fat_sd/ff.c **** static
 999:Libraries/fat_sd/ff.c **** FRESULT dir_find (
1000:Libraries/fat_sd/ff.c **** 	DIR *dj			/* Pointer to the directory object linked to the file name */
1001:Libraries/fat_sd/ff.c **** )
1002:Libraries/fat_sd/ff.c **** {
1003:Libraries/fat_sd/ff.c **** 	FRESULT res;
1004:Libraries/fat_sd/ff.c **** 	BYTE c, *dir;
1005:Libraries/fat_sd/ff.c **** #if _USE_LFN
1006:Libraries/fat_sd/ff.c **** 	BYTE a, ord, sum;
1007:Libraries/fat_sd/ff.c **** #endif
1008:Libraries/fat_sd/ff.c **** 
1009:Libraries/fat_sd/ff.c **** 	res = dir_sdi(dj, 0);			/* Rewind directory object */
1010:Libraries/fat_sd/ff.c **** 	if (res != FR_OK) return res;
1011:Libraries/fat_sd/ff.c **** 
1012:Libraries/fat_sd/ff.c **** #if _USE_LFN
1013:Libraries/fat_sd/ff.c **** 	ord = sum = 0xFF;
1014:Libraries/fat_sd/ff.c **** #endif
1015:Libraries/fat_sd/ff.c **** 	do {
1016:Libraries/fat_sd/ff.c **** 		res = move_window(dj->fs, dj->sect);
1017:Libraries/fat_sd/ff.c **** 		if (res != FR_OK) break;
1018:Libraries/fat_sd/ff.c **** 		dir = dj->dir;					/* Ptr to the directory entry of current index */
1019:Libraries/fat_sd/ff.c **** 		c = dir[DIR_Name];
1020:Libraries/fat_sd/ff.c **** 		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
1021:Libraries/fat_sd/ff.c **** #if _USE_LFN	/* LFN configuration */
1022:Libraries/fat_sd/ff.c **** 		a = dir[DIR_Attr] & AM_MASK;
1023:Libraries/fat_sd/ff.c **** 		if (c == 0xE5 || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
1024:Libraries/fat_sd/ff.c **** 			ord = 0xFF;
1025:Libraries/fat_sd/ff.c **** 		} else {
1026:Libraries/fat_sd/ff.c **** 			if (a == AM_LFN) {			/* An LFN entry is found */
1027:Libraries/fat_sd/ff.c **** 				if (dj->lfn) {
1028:Libraries/fat_sd/ff.c **** 					if (c & 0x40) {		/* Is it start of LFN sequence? */
1029:Libraries/fat_sd/ff.c **** 						sum = dir[LDIR_Chksum];
1030:Libraries/fat_sd/ff.c **** 						c &= 0xBF; ord = c;	/* LFN start order */
1031:Libraries/fat_sd/ff.c **** 						dj->lfn_idx = dj->index;
1032:Libraries/fat_sd/ff.c **** 					}
1033:Libraries/fat_sd/ff.c **** 					/* Check validity of the LFN entry and compare it with given name */
1034:Libraries/fat_sd/ff.c **** 					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
1035:Libraries/fat_sd/ff.c **** 				}
1036:Libraries/fat_sd/ff.c **** 			} else {					/* An SFN entry is found */
1037:Libraries/fat_sd/ff.c **** 				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
1038:Libraries/fat_sd/ff.c **** 				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
1039:Libraries/fat_sd/ff.c **** 				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
1040:Libraries/fat_sd/ff.c **** 			}
1041:Libraries/fat_sd/ff.c **** 		}
1042:Libraries/fat_sd/ff.c **** #else		/* Non LFN configuration */
1043:Libraries/fat_sd/ff.c **** 		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
1044:Libraries/fat_sd/ff.c **** 			break;
1045:Libraries/fat_sd/ff.c **** #endif
1046:Libraries/fat_sd/ff.c **** 		res = dir_next(dj, 0);		/* Next entry */
1047:Libraries/fat_sd/ff.c **** 	} while (res == FR_OK);
1048:Libraries/fat_sd/ff.c **** 
1049:Libraries/fat_sd/ff.c **** 	return res;
1050:Libraries/fat_sd/ff.c **** }
1051:Libraries/fat_sd/ff.c **** 
1052:Libraries/fat_sd/ff.c **** 
1053:Libraries/fat_sd/ff.c **** 
1054:Libraries/fat_sd/ff.c **** 
1055:Libraries/fat_sd/ff.c **** /*-----------------------------------------------------------------------*/
1056:Libraries/fat_sd/ff.c **** /* Read an object from the directory                                     */
1057:Libraries/fat_sd/ff.c **** /*-----------------------------------------------------------------------*/
1058:Libraries/fat_sd/ff.c **** #if _FS_MINIMIZE <= 1
1059:Libraries/fat_sd/ff.c **** static
1060:Libraries/fat_sd/ff.c **** FRESULT dir_read (
1061:Libraries/fat_sd/ff.c **** 	DIR *dj			/* Pointer to the directory object that pointing the entry to be read */
1062:Libraries/fat_sd/ff.c **** )
1063:Libraries/fat_sd/ff.c **** {
1064:Libraries/fat_sd/ff.c **** 	FRESULT res;
1065:Libraries/fat_sd/ff.c **** 	BYTE c, *dir;
1066:Libraries/fat_sd/ff.c **** #if _USE_LFN
1067:Libraries/fat_sd/ff.c **** 	BYTE a, ord = 0xFF, sum = 0xFF;
1068:Libraries/fat_sd/ff.c **** #endif
1069:Libraries/fat_sd/ff.c **** 
1070:Libraries/fat_sd/ff.c **** 	res = FR_NO_FILE;
1071:Libraries/fat_sd/ff.c **** 	while (dj->sect) {
1072:Libraries/fat_sd/ff.c **** 		res = move_window(dj->fs, dj->sect);
1073:Libraries/fat_sd/ff.c **** 		if (res != FR_OK) break;
1074:Libraries/fat_sd/ff.c **** 		dir = dj->dir;					/* Ptr to the directory entry of current index */
1075:Libraries/fat_sd/ff.c **** 		c = dir[DIR_Name];
1076:Libraries/fat_sd/ff.c **** 		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
1077:Libraries/fat_sd/ff.c **** #if _USE_LFN	/* LFN configuration */
1078:Libraries/fat_sd/ff.c **** 		a = dir[DIR_Attr] & AM_MASK;
1079:Libraries/fat_sd/ff.c **** 		if (c == 0xE5 || (!_FS_RPATH && c == '.') || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without
1080:Libraries/fat_sd/ff.c **** 			ord = 0xFF;
1081:Libraries/fat_sd/ff.c **** 		} else {
1082:Libraries/fat_sd/ff.c **** 			if (a == AM_LFN) {			/* An LFN entry is found */
1083:Libraries/fat_sd/ff.c **** 				if (c & 0x40) {			/* Is it start of LFN sequence? */
1084:Libraries/fat_sd/ff.c **** 					sum = dir[LDIR_Chksum];
1085:Libraries/fat_sd/ff.c **** 					c &= 0xBF; ord = c;
1086:Libraries/fat_sd/ff.c **** 					dj->lfn_idx = dj->index;
1087:Libraries/fat_sd/ff.c **** 				}
1088:Libraries/fat_sd/ff.c **** 				/* Check LFN validity and capture it */
1089:Libraries/fat_sd/ff.c **** 				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
1090:Libraries/fat_sd/ff.c **** 			} else {					/* An SFN entry is found */
1091:Libraries/fat_sd/ff.c **** 				if (ord || sum != sum_sfn(dir))	/* Is there a valid LFN? */
1092:Libraries/fat_sd/ff.c **** 					dj->lfn_idx = 0xFFFF;		/* It has no LFN. */
1093:Libraries/fat_sd/ff.c **** 				break;
1094:Libraries/fat_sd/ff.c **** 			}
1095:Libraries/fat_sd/ff.c **** 		}
1096:Libraries/fat_sd/ff.c **** #else		/* Non LFN configuration */
1097:Libraries/fat_sd/ff.c **** 		if (c != 0xE5 && (_FS_RPATH || c != '.') && !(dir[DIR_Attr] & AM_VOL))	/* Is it a valid entry? */
1098:Libraries/fat_sd/ff.c **** 			break;
1099:Libraries/fat_sd/ff.c **** #endif
1100:Libraries/fat_sd/ff.c **** 		res = dir_next(dj, 0);				/* Next entry */
1101:Libraries/fat_sd/ff.c **** 		if (res != FR_OK) break;
1102:Libraries/fat_sd/ff.c **** 	}
1103:Libraries/fat_sd/ff.c **** 
1104:Libraries/fat_sd/ff.c **** 	if (res != FR_OK) dj->sect = 0;
1105:Libraries/fat_sd/ff.c **** 
1106:Libraries/fat_sd/ff.c **** 	return res;
1107:Libraries/fat_sd/ff.c **** }
1108:Libraries/fat_sd/ff.c **** #endif
1109:Libraries/fat_sd/ff.c **** 
1110:Libraries/fat_sd/ff.c **** 
1111:Libraries/fat_sd/ff.c **** 
1112:Libraries/fat_sd/ff.c **** /*-----------------------------------------------------------------------*/
1113:Libraries/fat_sd/ff.c **** /* Register an object to the directory                                   */
1114:Libraries/fat_sd/ff.c **** /*-----------------------------------------------------------------------*/
1115:Libraries/fat_sd/ff.c **** #if !_FS_READONLY
1116:Libraries/fat_sd/ff.c **** static
1117:Libraries/fat_sd/ff.c **** FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_D
1118:Libraries/fat_sd/ff.c **** 	DIR *dj				/* Target directory with object name to be created */
1119:Libraries/fat_sd/ff.c **** )
1120:Libraries/fat_sd/ff.c **** {
1121:Libraries/fat_sd/ff.c **** 	FRESULT res;
1122:Libraries/fat_sd/ff.c **** 	BYTE c, *dir;
1123:Libraries/fat_sd/ff.c **** #if _USE_LFN	/* LFN configuration */
1124:Libraries/fat_sd/ff.c **** 	WORD n, ne, is;
1125:Libraries/fat_sd/ff.c **** 	BYTE sn[12], *fn, sum;
1126:Libraries/fat_sd/ff.c **** 	WCHAR *lfn;
1127:Libraries/fat_sd/ff.c **** 
1128:Libraries/fat_sd/ff.c **** 
1129:Libraries/fat_sd/ff.c **** 	fn = dj->fn; lfn = dj->lfn;
1130:Libraries/fat_sd/ff.c **** 	mem_cpy(sn, fn, 12);
1131:Libraries/fat_sd/ff.c **** 
1132:Libraries/fat_sd/ff.c **** 	if (_FS_RPATH && (sn[NS] & NS_DOT)) return FR_INVALID_NAME;	/* Cannot create dot entry */
1133:Libraries/fat_sd/ff.c **** 
1134:Libraries/fat_sd/ff.c **** 	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
1135:Libraries/fat_sd/ff.c **** 		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
1136:Libraries/fat_sd/ff.c **** 		for (n = 1; n < 100; n++) {
1137:Libraries/fat_sd/ff.c **** 			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
1138:Libraries/fat_sd/ff.c **** 			res = dir_find(dj);				/* Check if the name collides with existing SFN */
1139:Libraries/fat_sd/ff.c **** 			if (res != FR_OK) break;
1140:Libraries/fat_sd/ff.c **** 		}
1141:Libraries/fat_sd/ff.c **** 		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
1142:Libraries/fat_sd/ff.c **** 		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
1143:Libraries/fat_sd/ff.c **** 		fn[NS] = sn[NS]; dj->lfn = lfn;
1144:Libraries/fat_sd/ff.c **** 	}
1145:Libraries/fat_sd/ff.c **** 
1146:Libraries/fat_sd/ff.c **** 	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
1147:Libraries/fat_sd/ff.c **** 		for (ne = 0; lfn[ne]; ne++) ;
1148:Libraries/fat_sd/ff.c **** 		ne = (ne + 25) / 13;
1149:Libraries/fat_sd/ff.c **** 	} else {						/* Otherwise reserve only an SFN entry. */
1150:Libraries/fat_sd/ff.c **** 		ne = 1;
1151:Libraries/fat_sd/ff.c **** 	}
1152:Libraries/fat_sd/ff.c **** 
1153:Libraries/fat_sd/ff.c **** 	/* Reserve contiguous entries */
1154:Libraries/fat_sd/ff.c **** 	res = dir_sdi(dj, 0);
1155:Libraries/fat_sd/ff.c **** 	if (res != FR_OK) return res;
1156:Libraries/fat_sd/ff.c **** 	n = is = 0;
1157:Libraries/fat_sd/ff.c **** 	do {
1158:Libraries/fat_sd/ff.c **** 		res = move_window(dj->fs, dj->sect);
1159:Libraries/fat_sd/ff.c **** 		if (res != FR_OK) break;
1160:Libraries/fat_sd/ff.c **** 		c = *dj->dir;				/* Check the entry status */
1161:Libraries/fat_sd/ff.c **** 		if (c == 0xE5 || c == 0) {	/* Is it a blank entry? */
1162:Libraries/fat_sd/ff.c **** 			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
1163:Libraries/fat_sd/ff.c **** 			if (++n == ne) break;	/* A contiguous entry that required count is found */
1164:Libraries/fat_sd/ff.c **** 		} else {
1165:Libraries/fat_sd/ff.c **** 			n = 0;					/* Not a blank entry. Restart to search */
1166:Libraries/fat_sd/ff.c **** 		}
1167:Libraries/fat_sd/ff.c **** 		res = dir_next(dj, 1);		/* Next entry with table stretch */
1168:Libraries/fat_sd/ff.c **** 	} while (res == FR_OK);
1169:Libraries/fat_sd/ff.c **** 
1170:Libraries/fat_sd/ff.c **** 	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
1171:Libraries/fat_sd/ff.c **** 		res = dir_sdi(dj, is);
1172:Libraries/fat_sd/ff.c **** 		if (res == FR_OK) {
1173:Libraries/fat_sd/ff.c **** 			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
1174:Libraries/fat_sd/ff.c **** 			ne--;
1175:Libraries/fat_sd/ff.c **** 			do {					/* Store LFN entries in bottom first */
1176:Libraries/fat_sd/ff.c **** 				res = move_window(dj->fs, dj->sect);
1177:Libraries/fat_sd/ff.c **** 				if (res != FR_OK) break;
1178:Libraries/fat_sd/ff.c **** 				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
1179:Libraries/fat_sd/ff.c **** 				dj->fs->wflag = 1;
1180:Libraries/fat_sd/ff.c **** 				res = dir_next(dj, 0);	/* Next entry */
1181:Libraries/fat_sd/ff.c **** 			} while (res == FR_OK && --ne);
1182:Libraries/fat_sd/ff.c **** 		}
1183:Libraries/fat_sd/ff.c **** 	}
1184:Libraries/fat_sd/ff.c **** 
1185:Libraries/fat_sd/ff.c **** #else	/* Non LFN configuration */
1186:Libraries/fat_sd/ff.c **** 	res = dir_sdi(dj, 0);
1187:Libraries/fat_sd/ff.c **** 	if (res == FR_OK) {
1188:Libraries/fat_sd/ff.c **** 		do {	/* Find a blank entry for the SFN */
1189:Libraries/fat_sd/ff.c **** 			res = move_window(dj->fs, dj->sect);
1190:Libraries/fat_sd/ff.c **** 			if (res != FR_OK) break;
1191:Libraries/fat_sd/ff.c **** 			c = *dj->dir;
1192:Libraries/fat_sd/ff.c **** 			if (c == 0xE5 || c == 0) break;	/* Is it a blank entry? */
1193:Libraries/fat_sd/ff.c **** 			res = dir_next(dj, 1);			/* Next entry with table stretch */
1194:Libraries/fat_sd/ff.c **** 		} while (res == FR_OK);
1195:Libraries/fat_sd/ff.c **** 	}
1196:Libraries/fat_sd/ff.c **** #endif
1197:Libraries/fat_sd/ff.c **** 
1198:Libraries/fat_sd/ff.c **** 	if (res == FR_OK) {		/* Initialize the SFN entry */
1199:Libraries/fat_sd/ff.c **** 		res = move_window(dj->fs, dj->sect);
1200:Libraries/fat_sd/ff.c **** 		if (res == FR_OK) {
1201:Libraries/fat_sd/ff.c **** 			dir = dj->dir;
1202:Libraries/fat_sd/ff.c **** 			mem_set(dir, 0, 32);		/* Clean the entry */
1203:Libraries/fat_sd/ff.c **** 			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
1204:Libraries/fat_sd/ff.c **** #if _USE_LFN
1205:Libraries/fat_sd/ff.c **** 			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
1206:Libraries/fat_sd/ff.c **** #endif
1207:Libraries/fat_sd/ff.c **** 			dj->fs->wflag = 1;
1208:Libraries/fat_sd/ff.c **** 		}
1209:Libraries/fat_sd/ff.c **** 	}
1210:Libraries/fat_sd/ff.c **** 
1211:Libraries/fat_sd/ff.c **** 	return res;
1212:Libraries/fat_sd/ff.c **** }
1213:Libraries/fat_sd/ff.c **** #endif /* !_FS_READONLY */
1214:Libraries/fat_sd/ff.c **** 
1215:Libraries/fat_sd/ff.c **** 
1216:Libraries/fat_sd/ff.c **** 
1217:Libraries/fat_sd/ff.c **** 
1218:Libraries/fat_sd/ff.c **** /*-----------------------------------------------------------------------*/
1219:Libraries/fat_sd/ff.c **** /* Remove an object from the directory                                   */
1220:Libraries/fat_sd/ff.c **** /*-----------------------------------------------------------------------*/
1221:Libraries/fat_sd/ff.c **** #if !_FS_READONLY && !_FS_MINIMIZE
1222:Libraries/fat_sd/ff.c **** static
1223:Libraries/fat_sd/ff.c **** FRESULT dir_remove (	/* FR_OK: Successful, FR_DISK_ERR: A disk error */
1224:Libraries/fat_sd/ff.c **** 	DIR *dj				/* Directory object pointing the entry to be removed */
1225:Libraries/fat_sd/ff.c **** )
1226:Libraries/fat_sd/ff.c **** {
1227:Libraries/fat_sd/ff.c **** 	FRESULT res;
1228:Libraries/fat_sd/ff.c **** #if _USE_LFN	/* LFN configuration */
1229:Libraries/fat_sd/ff.c **** 	WORD i;
1230:Libraries/fat_sd/ff.c **** 
1231:Libraries/fat_sd/ff.c **** 	i = dj->index;	/* SFN index */
1232:Libraries/fat_sd/ff.c **** 	res = dir_sdi(dj, (WORD)((dj->lfn_idx == 0xFFFF) ? i : dj->lfn_idx));	/* Goto the SFN or top of th
1233:Libraries/fat_sd/ff.c **** 	if (res == FR_OK) {
1234:Libraries/fat_sd/ff.c **** 		do {
1235:Libraries/fat_sd/ff.c **** 			res = move_window(dj->fs, dj->sect);
1236:Libraries/fat_sd/ff.c **** 			if (res != FR_OK) break;
1237:Libraries/fat_sd/ff.c **** 			*dj->dir = 0xE5;			/* Mark the entry "deleted" */
1238:Libraries/fat_sd/ff.c **** 			dj->fs->wflag = 1;
1239:Libraries/fat_sd/ff.c **** 			if (dj->index >= i) break;	/* When reached SFN, all entries of the object has been deleted. */
1240:Libraries/fat_sd/ff.c **** 			res = dir_next(dj, 0);		/* Next entry */
1241:Libraries/fat_sd/ff.c **** 		} while (res == FR_OK);
1242:Libraries/fat_sd/ff.c **** 		if (res == FR_NO_FILE) res = FR_INT_ERR;
1243:Libraries/fat_sd/ff.c **** 	}
1244:Libraries/fat_sd/ff.c **** 
1245:Libraries/fat_sd/ff.c **** #else			/* Non LFN configuration */
1246:Libraries/fat_sd/ff.c **** 	res = dir_sdi(dj, dj->index);
1247:Libraries/fat_sd/ff.c **** 	if (res == FR_OK) {
1248:Libraries/fat_sd/ff.c **** 		res = move_window(dj->fs, dj->sect);
1249:Libraries/fat_sd/ff.c **** 		if (res == FR_OK) {
1250:Libraries/fat_sd/ff.c **** 			*dj->dir = 0xE5;			/* Mark the entry "deleted" */
1251:Libraries/fat_sd/ff.c **** 			dj->fs->wflag = 1;
1252:Libraries/fat_sd/ff.c **** 		}
1253:Libraries/fat_sd/ff.c **** 	}
1254:Libraries/fat_sd/ff.c **** #endif
1255:Libraries/fat_sd/ff.c **** 
1256:Libraries/fat_sd/ff.c **** 	return res;
1257:Libraries/fat_sd/ff.c **** }
1258:Libraries/fat_sd/ff.c **** #endif /* !_FS_READONLY */
1259:Libraries/fat_sd/ff.c **** 
1260:Libraries/fat_sd/ff.c **** 
1261:Libraries/fat_sd/ff.c **** 
1262:Libraries/fat_sd/ff.c **** 
1263:Libraries/fat_sd/ff.c **** /*-----------------------------------------------------------------------*/
1264:Libraries/fat_sd/ff.c **** /* Pick a segment and create the object name in directory form           */
1265:Libraries/fat_sd/ff.c **** /*-----------------------------------------------------------------------*/
1266:Libraries/fat_sd/ff.c **** 
1267:Libraries/fat_sd/ff.c **** static
1268:Libraries/fat_sd/ff.c **** FRESULT create_name (
1269:Libraries/fat_sd/ff.c **** 	DIR *dj,			/* Pointer to the directory object */
1270:Libraries/fat_sd/ff.c **** 	const TCHAR **path	/* Pointer to pointer to the segment in the path string */
1271:Libraries/fat_sd/ff.c **** )
1272:Libraries/fat_sd/ff.c **** {
1273:Libraries/fat_sd/ff.c **** #ifdef _EXCVT
1274:Libraries/fat_sd/ff.c **** 	static const BYTE excvt[] = _EXCVT;	/* Upper conversion table for extended chars */
1275:Libraries/fat_sd/ff.c **** #endif
1276:Libraries/fat_sd/ff.c **** 
1277:Libraries/fat_sd/ff.c **** #if _USE_LFN	/* LFN configuration */
1278:Libraries/fat_sd/ff.c **** 	BYTE b, cf;
1279:Libraries/fat_sd/ff.c **** 	WCHAR w, *lfn;
1280:Libraries/fat_sd/ff.c **** 	int i, ni, si, di;
1281:Libraries/fat_sd/ff.c **** 	const TCHAR *p;
1282:Libraries/fat_sd/ff.c **** 
1283:Libraries/fat_sd/ff.c **** 	/* Create LFN in Unicode */
1284:Libraries/fat_sd/ff.c **** 	si = di = 0;
1285:Libraries/fat_sd/ff.c **** 	p = *path;
1286:Libraries/fat_sd/ff.c **** 	lfn = dj->lfn;
1287:Libraries/fat_sd/ff.c **** 	for (;;) {
1288:Libraries/fat_sd/ff.c **** 		w = p[si++];					/* Get a character */
1289:Libraries/fat_sd/ff.c **** 		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
1290:Libraries/fat_sd/ff.c **** 		if (di >= _MAX_LFN)				/* Reject too long name */
1291:Libraries/fat_sd/ff.c **** 			return FR_INVALID_NAME;
1292:Libraries/fat_sd/ff.c **** #if !_LFN_UNICODE
1293:Libraries/fat_sd/ff.c **** 		w &= 0xFF;
1294:Libraries/fat_sd/ff.c **** 		if (IsDBCS1(w)) {				/* If it is a DBC 1st byte */
1295:Libraries/fat_sd/ff.c **** 			b = p[si++];				/* Get 2nd byte */
1296:Libraries/fat_sd/ff.c **** 			if (!IsDBCS2(b))			/* Reject invalid code for DBC */
1297:Libraries/fat_sd/ff.c **** 				return FR_INVALID_NAME;
1298:Libraries/fat_sd/ff.c **** 			w = (w << 8) + b;
1299:Libraries/fat_sd/ff.c **** 		}
1300:Libraries/fat_sd/ff.c **** 		w = ff_convert(w, 1);			/* Convert OEM to Unicode */
1301:Libraries/fat_sd/ff.c **** 		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
1302:Libraries/fat_sd/ff.c **** #endif
1303:Libraries/fat_sd/ff.c **** 		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
1304:Libraries/fat_sd/ff.c **** 			return FR_INVALID_NAME;
1305:Libraries/fat_sd/ff.c **** 		lfn[di++] = w;					/* Store the Unicode char */
1306:Libraries/fat_sd/ff.c **** 	}
1307:Libraries/fat_sd/ff.c **** 	*path = &p[si];						/* Return pointer to the next segment */
1308:Libraries/fat_sd/ff.c **** 	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
1309:Libraries/fat_sd/ff.c **** #if _FS_RPATH
1310:Libraries/fat_sd/ff.c **** 	if ((di == 1 && lfn[di - 1] == '.') || /* Is this a dot entry? */
1311:Libraries/fat_sd/ff.c **** 		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {
1312:Libraries/fat_sd/ff.c **** 		lfn[di] = 0;
1313:Libraries/fat_sd/ff.c **** 		for (i = 0; i < 11; i++)
1314:Libraries/fat_sd/ff.c **** 			dj->fn[i] = (i < di) ? '.' : ' ';
1315:Libraries/fat_sd/ff.c **** 		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
1316:Libraries/fat_sd/ff.c **** 		return FR_OK;
1317:Libraries/fat_sd/ff.c **** 	}
1318:Libraries/fat_sd/ff.c **** #endif
1319:Libraries/fat_sd/ff.c **** 	while (di) {						/* Strip trailing spaces and dots */
1320:Libraries/fat_sd/ff.c **** 		w = lfn[di - 1];
1321:Libraries/fat_sd/ff.c **** 		if (w != ' ' && w != '.') break;
1322:Libraries/fat_sd/ff.c **** 		di--;
1323:Libraries/fat_sd/ff.c **** 	}
1324:Libraries/fat_sd/ff.c **** 	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
1325:Libraries/fat_sd/ff.c **** 
1326:Libraries/fat_sd/ff.c **** 	lfn[di] = 0;						/* LFN is created */
1327:Libraries/fat_sd/ff.c **** 
1328:Libraries/fat_sd/ff.c **** 	/* Create SFN in directory form */
1329:Libraries/fat_sd/ff.c **** 	mem_set(dj->fn, ' ', 11);
1330:Libraries/fat_sd/ff.c **** 	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
1331:Libraries/fat_sd/ff.c **** 	if (si) cf |= NS_LOSS | NS_LFN;
1332:Libraries/fat_sd/ff.c **** 	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
1333:Libraries/fat_sd/ff.c **** 
1334:Libraries/fat_sd/ff.c **** 	b = i = 0; ni = 8;
1335:Libraries/fat_sd/ff.c **** 	for (;;) {
1336:Libraries/fat_sd/ff.c **** 		w = lfn[si++];					/* Get an LFN char */
1337:Libraries/fat_sd/ff.c **** 		if (!w) break;					/* Break on end of the LFN */
1338:Libraries/fat_sd/ff.c **** 		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
1339:Libraries/fat_sd/ff.c **** 			cf |= NS_LOSS | NS_LFN; continue;
1340:Libraries/fat_sd/ff.c **** 		}
1341:Libraries/fat_sd/ff.c **** 
1342:Libraries/fat_sd/ff.c **** 		if (i >= ni || si == di) {		/* Extension or end of SFN */
1343:Libraries/fat_sd/ff.c **** 			if (ni == 11) {				/* Long extension */
1344:Libraries/fat_sd/ff.c **** 				cf |= NS_LOSS | NS_LFN; break;
1345:Libraries/fat_sd/ff.c **** 			}
1346:Libraries/fat_sd/ff.c **** 			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
1347:Libraries/fat_sd/ff.c **** 			if (si > di) break;			/* No extension */
1348:Libraries/fat_sd/ff.c **** 			si = di; i = 8; ni = 11;	/* Enter extension section */
1349:Libraries/fat_sd/ff.c **** 			b <<= 2; continue;
1350:Libraries/fat_sd/ff.c **** 		}
1351:Libraries/fat_sd/ff.c **** 
1352:Libraries/fat_sd/ff.c **** 		if (w >= 0x80) {				/* Non ASCII char */
1353:Libraries/fat_sd/ff.c **** #ifdef _EXCVT
1354:Libraries/fat_sd/ff.c **** 			w = ff_convert(w, 0);		/* Unicode -> OEM code */
1355:Libraries/fat_sd/ff.c **** 			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
1356:Libraries/fat_sd/ff.c **** #else
1357:Libraries/fat_sd/ff.c **** 			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
1358:Libraries/fat_sd/ff.c **** #endif
1359:Libraries/fat_sd/ff.c **** 			cf |= NS_LFN;				/* Force create LFN entry */
1360:Libraries/fat_sd/ff.c **** 		}
1361:Libraries/fat_sd/ff.c **** 
1362:Libraries/fat_sd/ff.c **** 		if (_DF1S && w >= 0x100) {		/* Double byte char */
1363:Libraries/fat_sd/ff.c **** 			if (i >= ni - 1) {
1364:Libraries/fat_sd/ff.c **** 				cf |= NS_LOSS | NS_LFN; i = ni; continue;
1365:Libraries/fat_sd/ff.c **** 			}
1366:Libraries/fat_sd/ff.c **** 			dj->fn[i++] = (BYTE)(w >> 8);
1367:Libraries/fat_sd/ff.c **** 		} else {						/* Single byte char */
1368:Libraries/fat_sd/ff.c **** 			if (!w || chk_chr("+,;=[]", w)) {		/* Replace illegal chars for SFN */
1369:Libraries/fat_sd/ff.c **** 				w = '_'; cf |= NS_LOSS | NS_LFN;	/* Lossy conversion */
1370:Libraries/fat_sd/ff.c **** 			} else {
1371:Libraries/fat_sd/ff.c **** 				if (IsUpper(w)) {		/* ASCII large capital */
1372:Libraries/fat_sd/ff.c **** 					b |= 2;
1373:Libraries/fat_sd/ff.c **** 				} else {
1374:Libraries/fat_sd/ff.c **** 					if (IsLower(w)) {	/* ASCII small capital */
1375:Libraries/fat_sd/ff.c **** 						b |= 1; w -= 0x20;
1376:Libraries/fat_sd/ff.c **** 					}
1377:Libraries/fat_sd/ff.c **** 				}
1378:Libraries/fat_sd/ff.c **** 			}
1379:Libraries/fat_sd/ff.c **** 		}
1380:Libraries/fat_sd/ff.c **** 		dj->fn[i++] = (BYTE)w;
1381:Libraries/fat_sd/ff.c **** 	}
1382:Libraries/fat_sd/ff.c **** 
1383:Libraries/fat_sd/ff.c **** 	if (dj->fn[0] == 0xE5) dj->fn[0] = 0x05;	/* If the first char collides with deleted mark, replace 
1384:Libraries/fat_sd/ff.c **** 
1385:Libraries/fat_sd/ff.c **** 	if (ni == 8) b <<= 2;
1386:Libraries/fat_sd/ff.c **** 	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capital
1387:Libraries/fat_sd/ff.c **** 		cf |= NS_LFN;
1388:Libraries/fat_sd/ff.c **** 	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are create
1389:Libraries/fat_sd/ff.c **** 		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
1390:Libraries/fat_sd/ff.c **** 		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
1391:Libraries/fat_sd/ff.c **** 	}
1392:Libraries/fat_sd/ff.c **** 
1393:Libraries/fat_sd/ff.c **** 	dj->fn[NS] = cf;	/* SFN is created */
1394:Libraries/fat_sd/ff.c **** 
1395:Libraries/fat_sd/ff.c **** 	return FR_OK;
1396:Libraries/fat_sd/ff.c **** 
1397:Libraries/fat_sd/ff.c **** 
1398:Libraries/fat_sd/ff.c **** #else	/* Non-LFN configuration */
1399:Libraries/fat_sd/ff.c **** 	BYTE b, c, d, *sfn;
1400:Libraries/fat_sd/ff.c **** 	int ni, si, i;
1401:Libraries/fat_sd/ff.c **** 	const char *p;
1402:Libraries/fat_sd/ff.c **** 
1403:Libraries/fat_sd/ff.c **** 	/* Create file name in directory form */
1404:Libraries/fat_sd/ff.c **** 	sfn = dj->fn;
1405:Libraries/fat_sd/ff.c **** 	mem_set(sfn, ' ', 11);
1406:Libraries/fat_sd/ff.c **** 	si = i = b = 0; ni = 8;
1407:Libraries/fat_sd/ff.c **** 	p = *path;
1408:Libraries/fat_sd/ff.c **** #if _FS_RPATH
1409:Libraries/fat_sd/ff.c **** 	if (p[si] == '.') { /* Is this a dot entry? */
1410:Libraries/fat_sd/ff.c **** 		for (;;) {
1411:Libraries/fat_sd/ff.c **** 			c = (BYTE)p[si++];
1412:Libraries/fat_sd/ff.c **** 			if (c != '.' || si >= 3) break;
1413:Libraries/fat_sd/ff.c **** 			sfn[i++] = c;
1414:Libraries/fat_sd/ff.c **** 		}
1415:Libraries/fat_sd/ff.c **** 		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
1416:Libraries/fat_sd/ff.c **** 		*path = &p[si];									/* Return pointer to the next segment */
1417:Libraries/fat_sd/ff.c **** 		sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
1418:Libraries/fat_sd/ff.c **** 		return FR_OK;
1419:Libraries/fat_sd/ff.c **** 	}
1420:Libraries/fat_sd/ff.c **** #endif
1421:Libraries/fat_sd/ff.c **** 	for (;;) {
1422:Libraries/fat_sd/ff.c **** 		c = (BYTE)p[si++];
1423:Libraries/fat_sd/ff.c **** 		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
1424:Libraries/fat_sd/ff.c **** 		if (c == '.' || i >= ni) {
1425:Libraries/fat_sd/ff.c **** 			if (ni != 8 || c != '.') return FR_INVALID_NAME;
1426:Libraries/fat_sd/ff.c **** 			i = 8; ni = 11;
1427:Libraries/fat_sd/ff.c **** 			b <<= 2; continue;
1428:Libraries/fat_sd/ff.c **** 		}
1429:Libraries/fat_sd/ff.c **** 		if (c >= 0x80) {				/* Extended char */
1430:Libraries/fat_sd/ff.c **** #ifdef _EXCVT
1431:Libraries/fat_sd/ff.c **** 			c = excvt[c - 0x80];		/* Convert extend char (SBCS) */
1432:Libraries/fat_sd/ff.c **** #else
1433:Libraries/fat_sd/ff.c **** 			b |= 3;						/* Eliminate NT flag if extended char is exist */
1434:Libraries/fat_sd/ff.c **** #if !_DF1S	/* ASCII only cfg */
1435:Libraries/fat_sd/ff.c **** 			return FR_INVALID_NAME;
1436:Libraries/fat_sd/ff.c **** #endif
1437:Libraries/fat_sd/ff.c **** #endif
1438:Libraries/fat_sd/ff.c **** 		}
1439:Libraries/fat_sd/ff.c **** 		if (IsDBCS1(c)) {				/* DBC 1st byte? */
1440:Libraries/fat_sd/ff.c **** 			d = (BYTE)p[si++];			/* Get 2nd byte */
1441:Libraries/fat_sd/ff.c **** 			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
1442:Libraries/fat_sd/ff.c **** 				return FR_INVALID_NAME;
1443:Libraries/fat_sd/ff.c **** 			sfn[i++] = c;
1444:Libraries/fat_sd/ff.c **** 			sfn[i++] = d;
1445:Libraries/fat_sd/ff.c **** 		} else {						/* Single byte code */
1446:Libraries/fat_sd/ff.c **** 			if (chk_chr("\"*+,:<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
1447:Libraries/fat_sd/ff.c **** 				return FR_INVALID_NAME;
1448:Libraries/fat_sd/ff.c **** 			if (IsUpper(c)) {			/* ASCII large capital? */
1449:Libraries/fat_sd/ff.c **** 				b |= 2;
1450:Libraries/fat_sd/ff.c **** 			} else {
1451:Libraries/fat_sd/ff.c **** 				if (IsLower(c)) {		/* ASCII small capital? */
1452:Libraries/fat_sd/ff.c **** 					b |= 1; c -= 0x20;
1453:Libraries/fat_sd/ff.c **** 				}
1454:Libraries/fat_sd/ff.c **** 			}
1455:Libraries/fat_sd/ff.c **** 			sfn[i++] = c;
1456:Libraries/fat_sd/ff.c **** 		}
1457:Libraries/fat_sd/ff.c **** 	}
1458:Libraries/fat_sd/ff.c **** 	*path = &p[si];						/* Return pointer to the next segment */
1459:Libraries/fat_sd/ff.c **** 	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
1460:Libraries/fat_sd/ff.c **** 
1461:Libraries/fat_sd/ff.c **** 	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
1462:Libraries/fat_sd/ff.c **** 	if (sfn[0] == 0xE5) sfn[0] = 0x05;	/* When first char collides with 0xE5, replace it with 0x05 */
1463:Libraries/fat_sd/ff.c **** 
1464:Libraries/fat_sd/ff.c **** 	if (ni == 8) b <<= 2;
1465:Libraries/fat_sd/ff.c **** 	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
1466:Libraries/fat_sd/ff.c **** 	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
1467:Libraries/fat_sd/ff.c **** 
1468:Libraries/fat_sd/ff.c **** 	sfn[NS] = c;		/* Store NT flag, File name is created */
1469:Libraries/fat_sd/ff.c **** 
1470:Libraries/fat_sd/ff.c **** 	return FR_OK;
1471:Libraries/fat_sd/ff.c **** #endif
1472:Libraries/fat_sd/ff.c **** }
1473:Libraries/fat_sd/ff.c **** 
1474:Libraries/fat_sd/ff.c **** 
1475:Libraries/fat_sd/ff.c **** 
1476:Libraries/fat_sd/ff.c **** 
1477:Libraries/fat_sd/ff.c **** /*-----------------------------------------------------------------------*/
1478:Libraries/fat_sd/ff.c **** /* Get file information from directory entry                             */
1479:Libraries/fat_sd/ff.c **** /*-----------------------------------------------------------------------*/
1480:Libraries/fat_sd/ff.c **** #if _FS_MINIMIZE <= 1
1481:Libraries/fat_sd/ff.c **** static
1482:Libraries/fat_sd/ff.c **** void get_fileinfo (		/* No return code */
1483:Libraries/fat_sd/ff.c **** 	DIR *dj,			/* Pointer to the directory object */
1484:Libraries/fat_sd/ff.c **** 	FILINFO *fno	 	/* Pointer to the file information to be filled */
1485:Libraries/fat_sd/ff.c **** )
1486:Libraries/fat_sd/ff.c **** {
1487:Libraries/fat_sd/ff.c **** 	int i;
1488:Libraries/fat_sd/ff.c **** 	BYTE nt, *dir;
1489:Libraries/fat_sd/ff.c **** 	TCHAR *p, c;
1490:Libraries/fat_sd/ff.c **** 
1491:Libraries/fat_sd/ff.c **** 
1492:Libraries/fat_sd/ff.c **** 	p = fno->fname;
1493:Libraries/fat_sd/ff.c **** 	if (dj->sect) {
1494:Libraries/fat_sd/ff.c **** 		dir = dj->dir;
1495:Libraries/fat_sd/ff.c **** 		nt = dir[DIR_NTres];		/* NT flag */
1496:Libraries/fat_sd/ff.c **** 		for (i = 0; i < 8; i++) {	/* Copy name body */
1497:Libraries/fat_sd/ff.c **** 			c = dir[i];
1498:Libraries/fat_sd/ff.c **** 			if (c == ' ') break;
1499:Libraries/fat_sd/ff.c **** 			if (c == 0x05) c = (TCHAR)0xE5;
1500:Libraries/fat_sd/ff.c **** 			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
1501:Libraries/fat_sd/ff.c **** #if _LFN_UNICODE
1502:Libraries/fat_sd/ff.c **** 			if (IsDBCS1(c) && i < 7 && IsDBCS2(dir[i + 1]))
1503:Libraries/fat_sd/ff.c **** 				c = (c << 8) | dir[++i];
1504:Libraries/fat_sd/ff.c **** 			c = ff_convert(c, 1);
1505:Libraries/fat_sd/ff.c **** 			if (!c) c = '?';
1506:Libraries/fat_sd/ff.c **** #endif
1507:Libraries/fat_sd/ff.c **** 			*p++ = c;
1508:Libraries/fat_sd/ff.c **** 		}
1509:Libraries/fat_sd/ff.c **** 		if (dir[8] != ' ') {		/* Copy name extension */
1510:Libraries/fat_sd/ff.c **** 			*p++ = '.';
1511:Libraries/fat_sd/ff.c **** 			for (i = 8; i < 11; i++) {
1512:Libraries/fat_sd/ff.c **** 				c = dir[i];
1513:Libraries/fat_sd/ff.c **** 				if (c == ' ') break;
1514:Libraries/fat_sd/ff.c **** 				if (_USE_LFN && (nt & NS_EXT) && IsUpper(c)) c += 0x20;
1515:Libraries/fat_sd/ff.c **** #if _LFN_UNICODE
1516:Libraries/fat_sd/ff.c **** 				if (IsDBCS1(c) && i < 10 && IsDBCS2(dir[i + 1]))
1517:Libraries/fat_sd/ff.c **** 					c = (c << 8) | dir[++i];
1518:Libraries/fat_sd/ff.c **** 				c = ff_convert(c, 1);
1519:Libraries/fat_sd/ff.c **** 				if (!c) c = '?';
1520:Libraries/fat_sd/ff.c **** #endif
1521:Libraries/fat_sd/ff.c **** 				*p++ = c;
1522:Libraries/fat_sd/ff.c **** 			}
1523:Libraries/fat_sd/ff.c **** 		}
1524:Libraries/fat_sd/ff.c **** 		fno->fattrib = dir[DIR_Attr];				/* Attribute */
1525:Libraries/fat_sd/ff.c **** 		fno->fsize = LD_DWORD(dir+DIR_FileSize);	/* Size */
1526:Libraries/fat_sd/ff.c **** 		fno->fdate = LD_WORD(dir+DIR_WrtDate);		/* Date */
1527:Libraries/fat_sd/ff.c **** 		fno->ftime = LD_WORD(dir+DIR_WrtTime);		/* Time */
1528:Libraries/fat_sd/ff.c **** 	}
1529:Libraries/fat_sd/ff.c **** 	*p = 0;
1530:Libraries/fat_sd/ff.c **** 
1531:Libraries/fat_sd/ff.c **** #if _USE_LFN
1532:Libraries/fat_sd/ff.c **** 	if (fno->lfname) {
1533:Libraries/fat_sd/ff.c **** 		TCHAR *tp = fno->lfname;
1534:Libraries/fat_sd/ff.c **** 		WCHAR w, *lfn;
1535:Libraries/fat_sd/ff.c **** 
1536:Libraries/fat_sd/ff.c **** 		i = 0;
1537:Libraries/fat_sd/ff.c **** 		if (dj->sect && dj->lfn_idx != 0xFFFF) {/* Get LFN if available */
1538:Libraries/fat_sd/ff.c **** 			lfn = dj->lfn;
1539:Libraries/fat_sd/ff.c **** 			while ((w = *lfn++) != 0) {			/* Get an LFN char */
1540:Libraries/fat_sd/ff.c **** #if !_LFN_UNICODE
1541:Libraries/fat_sd/ff.c **** 				w = ff_convert(w, 0);			/* Unicode -> OEM conversion */
1542:Libraries/fat_sd/ff.c **** 				if (!w) { i = 0; break; }		/* Could not convert, no LFN */
1543:Libraries/fat_sd/ff.c **** 				if (_DF1S && w >= 0x100)		/* Put 1st byte if it is a DBC */
1544:Libraries/fat_sd/ff.c **** 					tp[i++] = (TCHAR)(w >> 8);
1545:Libraries/fat_sd/ff.c **** #endif
1546:Libraries/fat_sd/ff.c **** 				if (i >= fno->lfsize - 1) { i = 0; break; }	/* Buffer overrun, no LFN */
1547:Libraries/fat_sd/ff.c **** 				tp[i++] = (TCHAR)w;
1548:Libraries/fat_sd/ff.c **** 			}
1549:Libraries/fat_sd/ff.c **** 		}
1550:Libraries/fat_sd/ff.c **** 		tp[i] = 0;	/* Terminator */
1551:Libraries/fat_sd/ff.c **** 	}
1552:Libraries/fat_sd/ff.c **** #endif
1553:Libraries/fat_sd/ff.c **** }
1554:Libraries/fat_sd/ff.c **** #endif /* _FS_MINIMIZE <= 1 */
1555:Libraries/fat_sd/ff.c **** 
1556:Libraries/fat_sd/ff.c **** 
1557:Libraries/fat_sd/ff.c **** 
1558:Libraries/fat_sd/ff.c **** 
1559:Libraries/fat_sd/ff.c **** /*-----------------------------------------------------------------------*/
1560:Libraries/fat_sd/ff.c **** /* Follow a file path                                                    */
1561:Libraries/fat_sd/ff.c **** /*-----------------------------------------------------------------------*/
1562:Libraries/fat_sd/ff.c **** 
1563:Libraries/fat_sd/ff.c **** static
1564:Libraries/fat_sd/ff.c **** FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
1565:Libraries/fat_sd/ff.c **** 	DIR *dj,			/* Directory object to return last directory and found object */
1566:Libraries/fat_sd/ff.c **** 	const TCHAR *path	/* Full-path string to find a file or directory */
1567:Libraries/fat_sd/ff.c **** )
1568:Libraries/fat_sd/ff.c **** {
1569:Libraries/fat_sd/ff.c **** 	FRESULT res;
1570:Libraries/fat_sd/ff.c **** 	BYTE *dir, ns;
1571:Libraries/fat_sd/ff.c **** 
1572:Libraries/fat_sd/ff.c **** 
1573:Libraries/fat_sd/ff.c **** #if _FS_RPATH
1574:Libraries/fat_sd/ff.c **** 	if (*path == '/' || *path == '\\') { /* There is a heading separator */
1575:Libraries/fat_sd/ff.c **** 		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
1576:Libraries/fat_sd/ff.c **** 	} else {							/* No heading separator */
1577:Libraries/fat_sd/ff.c **** 		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
1578:Libraries/fat_sd/ff.c **** 	}
1579:Libraries/fat_sd/ff.c **** #else
1580:Libraries/fat_sd/ff.c **** 	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
1581:Libraries/fat_sd/ff.c **** 		path++;
1582:Libraries/fat_sd/ff.c **** 	dj->sclust = 0;						/* Start from the root dir */
1583:Libraries/fat_sd/ff.c **** #endif
1584:Libraries/fat_sd/ff.c **** 
1585:Libraries/fat_sd/ff.c **** 	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
1586:Libraries/fat_sd/ff.c **** 		res = dir_sdi(dj, 0);
1587:Libraries/fat_sd/ff.c **** 		dj->dir = 0;
1588:Libraries/fat_sd/ff.c **** 
1589:Libraries/fat_sd/ff.c **** 	} else {							/* Follow path */
1590:Libraries/fat_sd/ff.c **** 		for (;;) {
1591:Libraries/fat_sd/ff.c **** 			res = create_name(dj, &path);	/* Get a segment */
1592:Libraries/fat_sd/ff.c **** 			if (res != FR_OK) break;
1593:Libraries/fat_sd/ff.c **** 			res = dir_find(dj);				/* Find it */
1594:Libraries/fat_sd/ff.c **** 			ns = *(dj->fn+NS);
1595:Libraries/fat_sd/ff.c **** 			if (res != FR_OK) {				/* Failed to find the object */
1596:Libraries/fat_sd/ff.c **** 				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
1597:Libraries/fat_sd/ff.c **** 				/* Object not found */
1598:Libraries/fat_sd/ff.c **** 				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
1599:Libraries/fat_sd/ff.c **** 					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
1600:Libraries/fat_sd/ff.c **** 					res = FR_OK;
1601:Libraries/fat_sd/ff.c **** 					if (!(ns & NS_LAST)) continue;
1602:Libraries/fat_sd/ff.c **** 				} else {							/* Could not find the object */
1603:Libraries/fat_sd/ff.c **** 					if (!(ns & NS_LAST)) res = FR_NO_PATH;
1604:Libraries/fat_sd/ff.c **** 				}
1605:Libraries/fat_sd/ff.c **** 				break;
1606:Libraries/fat_sd/ff.c **** 			}
1607:Libraries/fat_sd/ff.c **** 			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
1608:Libraries/fat_sd/ff.c **** 			dir = dj->dir;						/* There is next segment. Follow the sub directory */
1609:Libraries/fat_sd/ff.c **** 			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
1610:Libraries/fat_sd/ff.c **** 				res = FR_NO_PATH; break;
1611:Libraries/fat_sd/ff.c **** 			}
1612:Libraries/fat_sd/ff.c **** 			dj->sclust = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
1613:Libraries/fat_sd/ff.c **** 		}
1614:Libraries/fat_sd/ff.c **** 	}
1615:Libraries/fat_sd/ff.c **** 
1616:Libraries/fat_sd/ff.c **** 	return res;
1617:Libraries/fat_sd/ff.c **** }
1618:Libraries/fat_sd/ff.c **** 
1619:Libraries/fat_sd/ff.c **** 
1620:Libraries/fat_sd/ff.c **** 
1621:Libraries/fat_sd/ff.c **** 
1622:Libraries/fat_sd/ff.c **** /*-----------------------------------------------------------------------*/
1623:Libraries/fat_sd/ff.c **** /* Load boot record and check if it is an FAT boot record                */
1624:Libraries/fat_sd/ff.c **** /*-----------------------------------------------------------------------*/
1625:Libraries/fat_sd/ff.c **** 
1626:Libraries/fat_sd/ff.c **** static
1627:Libraries/fat_sd/ff.c **** BYTE check_fs (	/* 0:The FAT BR, 1:Valid BR but not an FAT, 2:Not a BR, 3:Disk error */
1628:Libraries/fat_sd/ff.c **** 	FATFS *fs,	/* File system object */
1629:Libraries/fat_sd/ff.c **** 	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
1630:Libraries/fat_sd/ff.c **** )
1631:Libraries/fat_sd/ff.c **** {
1632:Libraries/fat_sd/ff.c **** 	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
1633:Libraries/fat_sd/ff.c **** 		return 3;
1634:Libraries/fat_sd/ff.c **** 	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 
1635:Libraries/fat_sd/ff.c **** 		return 2;
1636:Libraries/fat_sd/ff.c **** 
1637:Libraries/fat_sd/ff.c **** 	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
1638:Libraries/fat_sd/ff.c **** 		return 0;
1639:Libraries/fat_sd/ff.c **** 	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
1640:Libraries/fat_sd/ff.c **** 		return 0;
1641:Libraries/fat_sd/ff.c **** 
1642:Libraries/fat_sd/ff.c **** 	return 1;
1643:Libraries/fat_sd/ff.c **** }
1644:Libraries/fat_sd/ff.c **** 
1645:Libraries/fat_sd/ff.c **** 
1646:Libraries/fat_sd/ff.c **** 
1647:Libraries/fat_sd/ff.c **** 
1648:Libraries/fat_sd/ff.c **** /*-----------------------------------------------------------------------*/
1649:Libraries/fat_sd/ff.c **** /* Make sure that the file system is valid                               */
1650:Libraries/fat_sd/ff.c **** /*-----------------------------------------------------------------------*/
1651:Libraries/fat_sd/ff.c **** 
1652:Libraries/fat_sd/ff.c **** static
1653:Libraries/fat_sd/ff.c **** FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occurred */
1654:Libraries/fat_sd/ff.c **** 	const TCHAR **path,	/* Pointer to pointer to the path name (drive number) */
1655:Libraries/fat_sd/ff.c **** 	FATFS **rfs,		/* Pointer to pointer to the found file system object */
1656:Libraries/fat_sd/ff.c **** 	BYTE chk_wp			/* !=0: Check media write protection for write access */
1657:Libraries/fat_sd/ff.c **** )
1658:Libraries/fat_sd/ff.c **** {
1659:Libraries/fat_sd/ff.c **** 	BYTE fmt, b, *tbl;
1660:Libraries/fat_sd/ff.c **** 	UINT vol;
1661:Libraries/fat_sd/ff.c **** 	DSTATUS stat;
1662:Libraries/fat_sd/ff.c **** 	DWORD bsect, fasize, tsect, sysect, nclst, szbfat;
1663:Libraries/fat_sd/ff.c **** 	WORD nrsv;
1664:Libraries/fat_sd/ff.c **** 	const TCHAR *p = *path;
1665:Libraries/fat_sd/ff.c **** 	FATFS *fs;
1666:Libraries/fat_sd/ff.c **** 
1667:Libraries/fat_sd/ff.c **** 	/* Get logical drive number from the path name */
1668:Libraries/fat_sd/ff.c **** 	vol = p[0] - '0';				/* Is there a drive number? */
1669:Libraries/fat_sd/ff.c **** 	if (vol <= 9 && p[1] == ':') {	/* Found a drive number, get and strip it */
1670:Libraries/fat_sd/ff.c **** 		p += 2; *path = p;			/* Return pointer to the path name */
1671:Libraries/fat_sd/ff.c **** 	} else {						/* No drive number is given */
1672:Libraries/fat_sd/ff.c **** #if _FS_RPATH
1673:Libraries/fat_sd/ff.c **** 		vol = Drive;				/* Use current drive */
1674:Libraries/fat_sd/ff.c **** #else
1675:Libraries/fat_sd/ff.c **** 		vol = 0;					/* Use drive 0 */
1676:Libraries/fat_sd/ff.c **** #endif
1677:Libraries/fat_sd/ff.c **** 	}
1678:Libraries/fat_sd/ff.c **** 
1679:Libraries/fat_sd/ff.c **** 	/* Check if the logical drive is valid or not */
1680:Libraries/fat_sd/ff.c **** 	if (vol >= _DRIVES) 			/* Is the drive number valid? */
1681:Libraries/fat_sd/ff.c **** 		return FR_INVALID_DRIVE;
1682:Libraries/fat_sd/ff.c **** 	*rfs = fs = FatFs[vol];			/* Return pointer to the corresponding file system object */
1683:Libraries/fat_sd/ff.c **** 	if (!fs) return FR_NOT_ENABLED;	/* Is the file system object available? */
1684:Libraries/fat_sd/ff.c **** 
1685:Libraries/fat_sd/ff.c **** 	ENTER_FF(fs);					/* Lock file system */
1686:Libraries/fat_sd/ff.c **** 
1687:Libraries/fat_sd/ff.c **** 	if (fs->fs_type) {				/* If the logical drive has been mounted */
1688:Libraries/fat_sd/ff.c **** 		stat = disk_status(fs->drv);
1689:Libraries/fat_sd/ff.c **** 		if (!(stat & STA_NOINIT)) {	/* and the physical drive is kept initialized (has not been changed),
1690:Libraries/fat_sd/ff.c **** #if !_FS_READONLY
1691:Libraries/fat_sd/ff.c **** 			if (chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
1692:Libraries/fat_sd/ff.c **** 				return FR_WRITE_PROTECTED;
1693:Libraries/fat_sd/ff.c **** #endif
1694:Libraries/fat_sd/ff.c **** 			return FR_OK;			/* The file system object is valid */
1695:Libraries/fat_sd/ff.c **** 		}
1696:Libraries/fat_sd/ff.c **** 	}
1697:Libraries/fat_sd/ff.c **** 
1698:Libraries/fat_sd/ff.c **** 	/* The logical drive must be mounted. Following code attempts to mount the volume (initialize the 
1699:Libraries/fat_sd/ff.c **** 
1700:Libraries/fat_sd/ff.c **** 	fs->fs_type = 0;					/* Clear the file system object */
1701:Libraries/fat_sd/ff.c **** 	fs->drv = (BYTE)LD2PD(vol);			/* Bind the logical drive and a physical drive */
1702:Libraries/fat_sd/ff.c **** 	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
1703:Libraries/fat_sd/ff.c **** 	if (stat & STA_NOINIT)				/* Check if the drive is ready */
1704:Libraries/fat_sd/ff.c **** 		return FR_NOT_READY;
1705:Libraries/fat_sd/ff.c **** #if _MAX_SS != 512						/* Get disk sector size if needed */
1706:Libraries/fat_sd/ff.c **** 	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK || SS(fs) > _MAX_SS)
1707:Libraries/fat_sd/ff.c **** 		return FR_NO_FILESYSTEM;
1708:Libraries/fat_sd/ff.c **** #endif
1709:Libraries/fat_sd/ff.c **** #if !_FS_READONLY
1710:Libraries/fat_sd/ff.c **** 	if (chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
1711:Libraries/fat_sd/ff.c **** 		return FR_WRITE_PROTECTED;
1712:Libraries/fat_sd/ff.c **** #endif
1713:Libraries/fat_sd/ff.c **** 	/* Search FAT partition on the drive (Supports only generic partitionings, FDISK and SFD) */
1714:Libraries/fat_sd/ff.c **** 	fmt = check_fs(fs, bsect = 0);		/* Check sector 0 if it is a VBR */
1715:Libraries/fat_sd/ff.c **** 	if (fmt == 1) {						/* Not an FAT-VBR, the disk may be partitioned */
1716:Libraries/fat_sd/ff.c **** 		/* Check the partition listed in top of the partition table */
1717:Libraries/fat_sd/ff.c **** 		tbl = &fs->win[MBR_Table + LD2PT(vol) * 16];	/* Partition table */
1718:Libraries/fat_sd/ff.c **** 		if (tbl[4]) {									/* Is the partition existing? */
1719:Libraries/fat_sd/ff.c **** 			bsect = LD_DWORD(&tbl[8]);					/* Partition offset in LBA */
1720:Libraries/fat_sd/ff.c **** 			fmt = check_fs(fs, bsect);					/* Check the partition */
1721:Libraries/fat_sd/ff.c **** 		}
1722:Libraries/fat_sd/ff.c **** 	}
1723:Libraries/fat_sd/ff.c **** 	if (fmt == 3) return FR_DISK_ERR;
1724:Libraries/fat_sd/ff.c **** 	if (fmt) return FR_NO_FILESYSTEM;					/* No FAT volume is found */
1725:Libraries/fat_sd/ff.c **** 
1726:Libraries/fat_sd/ff.c **** 	/* Following code initializes the file system object */
1727:Libraries/fat_sd/ff.c **** 
1728:Libraries/fat_sd/ff.c **** 	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical s
1729:Libraries/fat_sd/ff.c **** 		return FR_NO_FILESYSTEM;
1730:Libraries/fat_sd/ff.c **** 
1731:Libraries/fat_sd/ff.c **** 	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
1732:Libraries/fat_sd/ff.c **** 	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
1733:Libraries/fat_sd/ff.c **** 	fs->fsize = fasize;
1734:Libraries/fat_sd/ff.c **** 
1735:Libraries/fat_sd/ff.c **** 	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
1736:Libraries/fat_sd/ff.c **** 	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
1737:Libraries/fat_sd/ff.c **** 	fasize *= b;										/* Number of sectors for FAT area */
1738:Libraries/fat_sd/ff.c **** 
1739:Libraries/fat_sd/ff.c **** 	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
1740:Libraries/fat_sd/ff.c **** 	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be 1,2,4...128) */
1741:Libraries/fat_sd/ff.c **** 
1742:Libraries/fat_sd/ff.c **** 	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
1743:Libraries/fat_sd/ff.c **** 	if (fs->n_rootdir % (SS(fs) / 32)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector alig
1744:Libraries/fat_sd/ff.c **** 
1745:Libraries/fat_sd/ff.c **** 	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
1746:Libraries/fat_sd/ff.c **** 	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
1747:Libraries/fat_sd/ff.c **** 
1748:Libraries/fat_sd/ff.c **** 	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
1749:Libraries/fat_sd/ff.c **** 	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
1750:Libraries/fat_sd/ff.c **** 
1751:Libraries/fat_sd/ff.c **** 	/* Determine the FAT sub type */
1752:Libraries/fat_sd/ff.c **** 	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / 32);	/* RSV+FAT+DIR */
1753:Libraries/fat_sd/ff.c **** 	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
1754:Libraries/fat_sd/ff.c **** 	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
1755:Libraries/fat_sd/ff.c **** 	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
1756:Libraries/fat_sd/ff.c **** 	fmt = FS_FAT12;
1757:Libraries/fat_sd/ff.c **** 	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
1758:Libraries/fat_sd/ff.c **** 	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
1759:Libraries/fat_sd/ff.c **** 
1760:Libraries/fat_sd/ff.c **** 	/* Boundaries and Limits */
1761:Libraries/fat_sd/ff.c **** 	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
1762:Libraries/fat_sd/ff.c **** 	fs->database = bsect + sysect;						/* Data start sector */
1763:Libraries/fat_sd/ff.c **** 	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
1764:Libraries/fat_sd/ff.c **** 	if (fmt == FS_FAT32) {
1765:Libraries/fat_sd/ff.c **** 		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
1766:Libraries/fat_sd/ff.c **** 		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
1767:Libraries/fat_sd/ff.c **** 		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
1768:Libraries/fat_sd/ff.c **** 	} else {
1769:Libraries/fat_sd/ff.c **** 		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
1770:Libraries/fat_sd/ff.c **** 		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
1771:Libraries/fat_sd/ff.c **** 		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
1772:Libraries/fat_sd/ff.c **** 			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
1773:Libraries/fat_sd/ff.c **** 	}
1774:Libraries/fat_sd/ff.c **** 	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (FAT size must not be less than FAT sectors *
1775:Libraries/fat_sd/ff.c **** 		return FR_NO_FILESYSTEM;
1776:Libraries/fat_sd/ff.c **** 
1777:Libraries/fat_sd/ff.c **** #if !_FS_READONLY
1778:Libraries/fat_sd/ff.c **** 	/* Initialize cluster allocation information */
1779:Libraries/fat_sd/ff.c **** 	fs->free_clust = 0xFFFFFFFF;
1780:Libraries/fat_sd/ff.c **** 	fs->last_clust = 0;
1781:Libraries/fat_sd/ff.c **** 
1782:Libraries/fat_sd/ff.c **** 	/* Get fsinfo if available */
1783:Libraries/fat_sd/ff.c **** 	if (fmt == FS_FAT32) {
1784:Libraries/fat_sd/ff.c **** 	 	fs->fsi_flag = 0;
1785:Libraries/fat_sd/ff.c **** 		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
1786:Libraries/fat_sd/ff.c **** 		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
1787:Libraries/fat_sd/ff.c **** 			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
1788:Libraries/fat_sd/ff.c **** 			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
1789:Libraries/fat_sd/ff.c **** 			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
1790:Libraries/fat_sd/ff.c **** 				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
1791:Libraries/fat_sd/ff.c **** 				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
1792:Libraries/fat_sd/ff.c **** 		}
1793:Libraries/fat_sd/ff.c **** 	}
1794:Libraries/fat_sd/ff.c **** #endif
1795:Libraries/fat_sd/ff.c **** 	fs->fs_type = fmt;		/* FAT sub-type */
1796:Libraries/fat_sd/ff.c **** 	fs->id = ++Fsid;		/* File system mount ID */
1797:Libraries/fat_sd/ff.c **** 	fs->winsect = 0;		/* Invalidate sector cache */
1798:Libraries/fat_sd/ff.c **** 	fs->wflag = 0;
1799:Libraries/fat_sd/ff.c **** #if _FS_RPATH
1800:Libraries/fat_sd/ff.c **** 	fs->cdir = 0;			/* Current directory (root dir) */
1801:Libraries/fat_sd/ff.c **** #endif
1802:Libraries/fat_sd/ff.c **** #if _FS_SHARE				/* Clear file lock semaphores */
1803:Libraries/fat_sd/ff.c **** 	for (vol = 0; vol < _FS_SHARE; vol++)
1804:Libraries/fat_sd/ff.c **** 		fs->flsem[vol].ctr = 0;
1805:Libraries/fat_sd/ff.c **** #endif
1806:Libraries/fat_sd/ff.c **** 
1807:Libraries/fat_sd/ff.c **** 	return FR_OK;
1808:Libraries/fat_sd/ff.c **** }
1809:Libraries/fat_sd/ff.c **** 
1810:Libraries/fat_sd/ff.c **** 
1811:Libraries/fat_sd/ff.c **** 
1812:Libraries/fat_sd/ff.c **** 
1813:Libraries/fat_sd/ff.c **** /*-----------------------------------------------------------------------*/
1814:Libraries/fat_sd/ff.c **** /* Check if the file/dir object is valid or not                          */
1815:Libraries/fat_sd/ff.c **** /*-----------------------------------------------------------------------*/
1816:Libraries/fat_sd/ff.c **** 
1817:Libraries/fat_sd/ff.c **** static
1818:Libraries/fat_sd/ff.c **** FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
1819:Libraries/fat_sd/ff.c **** 	FATFS *fs,		/* Pointer to the file system object */
1820:Libraries/fat_sd/ff.c **** 	WORD id			/* Member id of the target object to be checked */
1821:Libraries/fat_sd/ff.c **** )
1822:Libraries/fat_sd/ff.c **** {
1823:Libraries/fat_sd/ff.c **** 	if (!fs || !fs->fs_type || fs->id != id)
1824:Libraries/fat_sd/ff.c **** 		return FR_INVALID_OBJECT;
1825:Libraries/fat_sd/ff.c **** 
1826:Libraries/fat_sd/ff.c **** 	ENTER_FF(fs);		/* Lock file system */
1827:Libraries/fat_sd/ff.c **** 
1828:Libraries/fat_sd/ff.c **** 	if (disk_status(fs->drv) & STA_NOINIT)
1829:Libraries/fat_sd/ff.c **** 		return FR_NOT_READY;
1830:Libraries/fat_sd/ff.c **** 
1831:Libraries/fat_sd/ff.c **** 	return FR_OK;
1832:Libraries/fat_sd/ff.c **** }
1833:Libraries/fat_sd/ff.c **** 
1834:Libraries/fat_sd/ff.c **** 
1835:Libraries/fat_sd/ff.c **** 
1836:Libraries/fat_sd/ff.c **** 
1837:Libraries/fat_sd/ff.c **** /*--------------------------------------------------------------------------
1838:Libraries/fat_sd/ff.c **** 
1839:Libraries/fat_sd/ff.c ****    Public Functions
1840:Libraries/fat_sd/ff.c **** 
1841:Libraries/fat_sd/ff.c **** --------------------------------------------------------------------------*/
1842:Libraries/fat_sd/ff.c **** 
1843:Libraries/fat_sd/ff.c **** 
1844:Libraries/fat_sd/ff.c **** 
1845:Libraries/fat_sd/ff.c **** /*-----------------------------------------------------------------------*/
1846:Libraries/fat_sd/ff.c **** /* Mount/Unmount a Logical Drive                                         */
1847:Libraries/fat_sd/ff.c **** /*-----------------------------------------------------------------------*/
1848:Libraries/fat_sd/ff.c **** 
1849:Libraries/fat_sd/ff.c **** FRESULT f_mount (
1850:Libraries/fat_sd/ff.c **** 	BYTE vol,		/* Logical drive number to be mounted/unmounted */
1851:Libraries/fat_sd/ff.c **** 	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
1852:Libraries/fat_sd/ff.c **** )
1853:Libraries/fat_sd/ff.c **** {
 302              	 0
 303              		bls	.L45
 304              		movs	r0, #11
 305              	.LVL27:
1854:Libraries/fat_sd/ff.c **** 	FATFS *rfs;
1855:Libraries/fat_sd/ff.c **** 
1856:Libraries/fat_sd/ff.c **** 
1857:Libraries/fat_sd/ff.c **** 	if (vol >= _DRIVES)				/* Check if the drive number is valid */
 306              	L47
 307 0000 0128     	.LVL28:
 308              	.L45:
 309 0002 10B5     		.loc 1 1859 0
 310              		ldr	r4, .L53
 311              		ldr	r2, [r4, r0, lsl #2]
 312 0004 01D9     	.LVL29:
 313 0006 0B20     		.loc 1 1861 0
 314              		cbz	r2, .L48
 315 0008 0BE0     		.loc 1 1865 0
 316              		movs	r3, #0
 317              		strb	r3, [r2, #0]
1858:Libraries/fat_sd/ff.c **** 		return FR_INVALID_DRIVE;
1859:Libraries/fat_sd/ff.c **** 	rfs = FatFs[vol];				/* Get current fs object */
 318              	1 1868 0
 319 000a 064C     		cbz	r1, .L50
 320 000c 54F82020 		.loc 1 1869 0
 321              		movs	r3, #0
1860:Libraries/fat_sd/ff.c **** 
1861:Libraries/fat_sd/ff.c **** 	if (rfs) {
 322              	b	r3, [r1, #0]
 323 0010 0AB1     	.L50:
1862:Libraries/fat_sd/ff.c **** #if _FS_REENTRANT					/* Discard sync object of the current volume */
1863:Libraries/fat_sd/ff.c **** 		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
1864:Libraries/fat_sd/ff.c **** #endif
1865:Libraries/fat_sd/ff.c **** 		rfs->fs_type = 0;			/* Clear old fs object */
 324              	loc 1 1874 0
 325 0012 0023     		str	r1, [r4, r0, lsl #2]
 326 0014 1370     		movs	r0, #0
 327              	.LVL30:
1866:Libraries/fat_sd/ff.c **** 	}
1867:Libraries/fat_sd/ff.c **** 
1868:Libraries/fat_sd/ff.c **** 	if (fs) {
 328              	:
 329 0016 09B1     		.loc 1 1877 0
1869:Libraries/fat_sd/ff.c **** 		fs->fs_type = 0;			/* Clear new fs object */
 330              	op	{r4, pc}
 331 0018 0023     	.L54:
 332 001a 0B70     		.align	2
 333              	.L53:
1870:Libraries/fat_sd/ff.c **** #if _FS_REENTRANT					/* Create sync object for the new volume */
1871:Libraries/fat_sd/ff.c **** 		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
1872:Libraries/fat_sd/ff.c **** #endif
1873:Libraries/fat_sd/ff.c **** 	}
1874:Libraries/fat_sd/ff.c **** 	FatFs[vol] = fs;				/* Register new fs object */
 334              	rd	.LANCHOR0
 335 001c 44F82010 	.LFE30:
 337              		.section	.text.f_chdrive,"ax",%progbits
 338              		.align	2
1875:Libraries/fat_sd/ff.c **** 
1876:Libraries/fat_sd/ff.c **** 	return FR_OK;
1877:Libraries/fat_sd/ff.c **** }
 339              	bal	f_chdrive
 340 0022 10BD     		.thumb
 341              		.thumb_func
 343              	f_chdrive:
 344 0024 00000000 	.LFB36:
 345              		.loc 1 2317 0
 346              		@ args = 0, pretend = 0, frame = 0
 347              		@ frame_needed = 0, uses_anonymous_args = 0
 348              		@ link register save eliminated.
 349              	.LVL31:
 350              		.loc 1 2318 0
 351              		cmp	r0, #1
 352              		.loc 1 2317 0
 353              		@ lr needed for prologue
 354              		.loc 1 2318 0
1878:Libraries/fat_sd/ff.c **** 
1879:Libraries/fat_sd/ff.c **** 
1880:Libraries/fat_sd/ff.c **** 
1881:Libraries/fat_sd/ff.c **** 
1882:Libraries/fat_sd/ff.c **** /*-----------------------------------------------------------------------*/
1883:Libraries/fat_sd/ff.c **** /* Open or Create a File                                                 */
1884:Libraries/fat_sd/ff.c **** /*-----------------------------------------------------------------------*/
1885:Libraries/fat_sd/ff.c **** 
1886:Libraries/fat_sd/ff.c **** FRESULT f_open (
1887:Libraries/fat_sd/ff.c **** 	FIL *fp,			/* Pointer to the blank file object */
1888:Libraries/fat_sd/ff.c **** 	const TCHAR *path,	/* Pointer to the file name */
1889:Libraries/fat_sd/ff.c **** 	BYTE mode			/* Access mode and file open mode flags */
1890:Libraries/fat_sd/ff.c **** )
1891:Libraries/fat_sd/ff.c **** {
1892:Libraries/fat_sd/ff.c **** 	FRESULT res;
1893:Libraries/fat_sd/ff.c **** 	DIR dj;
1894:Libraries/fat_sd/ff.c **** 	BYTE *dir;
1895:Libraries/fat_sd/ff.c **** 	DEF_NAMEBUF;
1896:Libraries/fat_sd/ff.c **** 
1897:Libraries/fat_sd/ff.c **** 
1898:Libraries/fat_sd/ff.c **** 	fp->fs = 0;			/* Clear file object */
1899:Libraries/fat_sd/ff.c **** 
1900:Libraries/fat_sd/ff.c **** #if !_FS_READONLY
1901:Libraries/fat_sd/ff.c **** 	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
1902:Libraries/fat_sd/ff.c **** 	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
1903:Libraries/fat_sd/ff.c **** #else
1904:Libraries/fat_sd/ff.c **** 	mode &= FA_READ;
1905:Libraries/fat_sd/ff.c **** 	res = chk_mounted(&path, &dj.fs, 0);
1906:Libraries/fat_sd/ff.c **** #endif
1907:Libraries/fat_sd/ff.c **** 	INIT_BUF(dj);
1908:Libraries/fat_sd/ff.c **** 	if (res == FR_OK)
1909:Libraries/fat_sd/ff.c **** 		res = follow_path(&dj, path);	/* Follow the file path */
1910:Libraries/fat_sd/ff.c **** 	dir = dj.dir;
1911:Libraries/fat_sd/ff.c **** 
1912:Libraries/fat_sd/ff.c **** #if !_FS_READONLY	/* R/W configuration */
1913:Libraries/fat_sd/ff.c **** 	if (res == FR_OK) {
1914:Libraries/fat_sd/ff.c **** 		if (!dir)	/* Current dir itself */
1915:Libraries/fat_sd/ff.c **** 			res = FR_INVALID_NAME;
1916:Libraries/fat_sd/ff.c **** #if _FS_SHARE
1917:Libraries/fat_sd/ff.c **** 		else
1918:Libraries/fat_sd/ff.c **** 			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
1919:Libraries/fat_sd/ff.c **** #endif
1920:Libraries/fat_sd/ff.c **** 	}
1921:Libraries/fat_sd/ff.c **** 	/* Create or Open a file */
1922:Libraries/fat_sd/ff.c **** 	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
1923:Libraries/fat_sd/ff.c **** 		DWORD dw, cl;
1924:Libraries/fat_sd/ff.c **** 
1925:Libraries/fat_sd/ff.c **** 		if (res != FR_OK) {				/* No file, create new */
1926:Libraries/fat_sd/ff.c **** 			if (res == FR_NO_FILE)		/* There is no file to open, create a new entry */
1927:Libraries/fat_sd/ff.c **** #if _FS_SHARE
1928:Libraries/fat_sd/ff.c **** 				res = enq_lock(dj.fs) ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
1929:Libraries/fat_sd/ff.c **** #else
1930:Libraries/fat_sd/ff.c **** 				res = dir_register(&dj);
1931:Libraries/fat_sd/ff.c **** #endif
1932:Libraries/fat_sd/ff.c **** 			mode |= FA_CREATE_ALWAYS;
1933:Libraries/fat_sd/ff.c **** 			dir = dj.dir;				/* New entry */
1934:Libraries/fat_sd/ff.c **** 		}
1935:Libraries/fat_sd/ff.c **** 		else {							/* Any object is already existing */
1936:Libraries/fat_sd/ff.c **** 			if (mode & FA_CREATE_NEW) {			/* Cannot create new */
1937:Libraries/fat_sd/ff.c **** 				res = FR_EXIST;
1938:Libraries/fat_sd/ff.c **** 			} else {
1939:Libraries/fat_sd/ff.c **** 				if (dir[DIR_Attr] & (AM_RDO | AM_DIR))	/* Cannot overwrite it (R/O or DIR) */
1940:Libraries/fat_sd/ff.c **** 					res = FR_DENIED;
1941:Libraries/fat_sd/ff.c **** 			}
1942:Libraries/fat_sd/ff.c **** 		}
1943:Libraries/fat_sd/ff.c **** 		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
1944:Libraries/fat_sd/ff.c **** 			dw = get_fattime();						/* Created time */
1945:Libraries/fat_sd/ff.c **** 			ST_DWORD(dir+DIR_CrtTime, dw);
1946:Libraries/fat_sd/ff.c **** 			dir[DIR_Attr] = 0;					/* Reset attribute */
1947:Libraries/fat_sd/ff.c **** 			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
1948:Libraries/fat_sd/ff.c **** 			cl = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);	/* Get start cluste
1949:Libraries/fat_sd/ff.c **** 			ST_WORD(dir+DIR_FstClusHI, 0);		/* cluster = 0 */
1950:Libraries/fat_sd/ff.c **** 			ST_WORD(dir+DIR_FstClusLO, 0);
1951:Libraries/fat_sd/ff.c **** 			dj.fs->wflag = 1;
1952:Libraries/fat_sd/ff.c **** 			if (cl) {							/* Remove the cluster chain if exist */
1953:Libraries/fat_sd/ff.c **** 				dw = dj.fs->winsect;
1954:Libraries/fat_sd/ff.c **** 				res = remove_chain(dj.fs, cl);
1955:Libraries/fat_sd/ff.c **** 				if (res == FR_OK) {
1956:Libraries/fat_sd/ff.c **** 					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
1957:Libraries/fat_sd/ff.c **** 					res = move_window(dj.fs, dw);
1958:Libraries/fat_sd/ff.c **** 				}
1959:Libraries/fat_sd/ff.c **** 			}
1960:Libraries/fat_sd/ff.c **** 		}
1961:Libraries/fat_sd/ff.c **** 	}
1962:Libraries/fat_sd/ff.c **** 	else {	/* Open an existing file */
1963:Libraries/fat_sd/ff.c **** 		if (res == FR_OK) {						/* Follow succeeded */
1964:Libraries/fat_sd/ff.c **** 			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
1965:Libraries/fat_sd/ff.c **** 				res = FR_NO_FILE;
1966:Libraries/fat_sd/ff.c **** 			} else {
1967:Libraries/fat_sd/ff.c **** 				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
1968:Libraries/fat_sd/ff.c **** 					res = FR_DENIED;
1969:Libraries/fat_sd/ff.c **** 			}
1970:Libraries/fat_sd/ff.c **** 		}
1971:Libraries/fat_sd/ff.c **** 	}
1972:Libraries/fat_sd/ff.c **** 	if (res == FR_OK) {
1973:Libraries/fat_sd/ff.c **** 		if (mode & (FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW))
1974:Libraries/fat_sd/ff.c **** 			mode |= FA__WRITTEN;				/* Set file changed flag */
1975:Libraries/fat_sd/ff.c **** 		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
1976:Libraries/fat_sd/ff.c **** 		fp->dir_ptr = dir;
1977:Libraries/fat_sd/ff.c **** #if _FS_SHARE
1978:Libraries/fat_sd/ff.c **** 		fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
1979:Libraries/fat_sd/ff.c **** 		if (!fp->lockid) res = FR_INT_ERR;
1980:Libraries/fat_sd/ff.c **** #endif
1981:Libraries/fat_sd/ff.c **** 	}
1982:Libraries/fat_sd/ff.c **** 
1983:Libraries/fat_sd/ff.c **** #else				/* R/O configuration */
1984:Libraries/fat_sd/ff.c **** 	if (res == FR_OK) {					/* Follow succeeded */
1985:Libraries/fat_sd/ff.c **** 		if (!dir) {						/* Current dir itself */
1986:Libraries/fat_sd/ff.c **** 			res = FR_INVALID_NAME;
1987:Libraries/fat_sd/ff.c **** 		} else {
1988:Libraries/fat_sd/ff.c **** 			if (dir[DIR_Attr] & AM_DIR)	/* It is a directory */
1989:Libraries/fat_sd/ff.c **** 				res = FR_NO_FILE;
1990:Libraries/fat_sd/ff.c **** 		}
1991:Libraries/fat_sd/ff.c **** 	}
1992:Libraries/fat_sd/ff.c **** #endif
1993:Libraries/fat_sd/ff.c **** 	FREE_BUF();
1994:Libraries/fat_sd/ff.c **** 
1995:Libraries/fat_sd/ff.c **** 	if (res == FR_OK) {
1996:Libraries/fat_sd/ff.c **** 		fp->flag = mode;					/* File access mode */
1997:Libraries/fat_sd/ff.c **** 		fp->org_clust =						/* File start cluster */
1998:Libraries/fat_sd/ff.c **** 			((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
1999:Libraries/fat_sd/ff.c **** 		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
2000:Libraries/fat_sd/ff.c **** 		fp->fptr = 0;						/* File pointer */
2001:Libraries/fat_sd/ff.c **** 		fp->dsect = 0;
2002:Libraries/fat_sd/ff.c **** #if _USE_FASTSEEK
2003:Libraries/fat_sd/ff.c **** 		fp->cltbl = 0;						/* No cluster link map table */
2004:Libraries/fat_sd/ff.c **** #endif
2005:Libraries/fat_sd/ff.c **** 		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
2006:Libraries/fat_sd/ff.c **** 	}
2007:Libraries/fat_sd/ff.c **** 
2008:Libraries/fat_sd/ff.c **** 	LEAVE_FF(dj.fs, res);
2009:Libraries/fat_sd/ff.c **** }
2010:Libraries/fat_sd/ff.c **** 
2011:Libraries/fat_sd/ff.c **** 
2012:Libraries/fat_sd/ff.c **** 
2013:Libraries/fat_sd/ff.c **** 
2014:Libraries/fat_sd/ff.c **** /*-----------------------------------------------------------------------*/
2015:Libraries/fat_sd/ff.c **** /* Read File                                                             */
2016:Libraries/fat_sd/ff.c **** /*-----------------------------------------------------------------------*/
2017:Libraries/fat_sd/ff.c **** 
2018:Libraries/fat_sd/ff.c **** FRESULT f_read (
2019:Libraries/fat_sd/ff.c **** 	FIL *fp, 		/* Pointer to the file object */
2020:Libraries/fat_sd/ff.c **** 	void *buff,		/* Pointer to data buffer */
2021:Libraries/fat_sd/ff.c **** 	UINT btr,		/* Number of bytes to read */
2022:Libraries/fat_sd/ff.c **** 	UINT *br		/* Pointer to number of bytes read */
2023:Libraries/fat_sd/ff.c **** )
2024:Libraries/fat_sd/ff.c **** {
2025:Libraries/fat_sd/ff.c **** 	FRESULT res;
2026:Libraries/fat_sd/ff.c **** 	DWORD clst, sect, remain;
2027:Libraries/fat_sd/ff.c **** 	UINT rcnt, cc;
2028:Libraries/fat_sd/ff.c **** 	BYTE csect, *rbuff = buff;
2029:Libraries/fat_sd/ff.c **** 
2030:Libraries/fat_sd/ff.c **** 
2031:Libraries/fat_sd/ff.c **** 	*br = 0;	/* Initialize byte counter */
2032:Libraries/fat_sd/ff.c **** 
2033:Libraries/fat_sd/ff.c **** 	res = validate(fp->fs, fp->id);					/* Check validity of the object */
2034:Libraries/fat_sd/ff.c **** 	if (res != FR_OK) LEAVE_FF(fp->fs, res);
2035:Libraries/fat_sd/ff.c **** 	if (fp->flag & FA__ERROR)						/* Check abort flag */
2036:Libraries/fat_sd/ff.c **** 		LEAVE_FF(fp->fs, FR_INT_ERR);
2037:Libraries/fat_sd/ff.c **** 	if (!(fp->flag & FA_READ)) 						/* Check access mode */
2038:Libraries/fat_sd/ff.c **** 		LEAVE_FF(fp->fs, FR_DENIED);
2039:Libraries/fat_sd/ff.c **** 	remain = fp->fsize - fp->fptr;
2040:Libraries/fat_sd/ff.c **** 	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */
2041:Libraries/fat_sd/ff.c **** 
2042:Libraries/fat_sd/ff.c **** 	for ( ;  btr;									/* Repeat until all data transferred */
2043:Libraries/fat_sd/ff.c **** 		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
2044:Libraries/fat_sd/ff.c **** 		if ((fp->fptr % SS(fp->fs)) == 0) {			/* On the sector boundary? */
2045:Libraries/fat_sd/ff.c **** 			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
2046:Libraries/fat_sd/ff.c **** 			if (!csect) {							/* On the cluster boundary? */
2047:Libraries/fat_sd/ff.c **** 				clst = (fp->fptr == 0) ?			/* On the top of the file? */
2048:Libraries/fat_sd/ff.c **** 					fp->org_clust : get_fat(fp->fs, fp->curr_clust);
2049:Libraries/fat_sd/ff.c **** 				if (clst <= 1) ABORT(fp->fs, FR_INT_ERR);
2050:Libraries/fat_sd/ff.c **** 				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
2051:Libraries/fat_sd/ff.c **** 				fp->curr_clust = clst;				/* Update current cluster */
2052:Libraries/fat_sd/ff.c **** 			}
2053:Libraries/fat_sd/ff.c **** 			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
2054:Libraries/fat_sd/ff.c **** 			if (!sect) ABORT(fp->fs, FR_INT_ERR);
2055:Libraries/fat_sd/ff.c **** 			sect += csect;
2056:Libraries/fat_sd/ff.c **** 			cc = btr / SS(fp->fs);					/* When remaining bytes >= sector size, */
2057:Libraries/fat_sd/ff.c **** 			if (cc) {								/* Read maximum contiguous sectors directly */
2058:Libraries/fat_sd/ff.c **** 				if (csect + cc > fp->fs->csize)		/* Clip at cluster boundary */
2059:Libraries/fat_sd/ff.c **** 					cc = fp->fs->csize - csect;
2060:Libraries/fat_sd/ff.c **** 				if (disk_read(fp->fs->drv, rbuff, sect, (BYTE)cc) != RES_OK)
2061:Libraries/fat_sd/ff.c **** 					ABORT(fp->fs, FR_DISK_ERR);
2062:Libraries/fat_sd/ff.c **** #if !_FS_READONLY && _FS_MINIMIZE <= 2				/* Replace one of the read sectors with cached data if it
2063:Libraries/fat_sd/ff.c **** #if _FS_TINY
2064:Libraries/fat_sd/ff.c **** 				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
2065:Libraries/fat_sd/ff.c **** 					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
2066:Libraries/fat_sd/ff.c **** #else
2067:Libraries/fat_sd/ff.c **** 				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
2068:Libraries/fat_sd/ff.c **** 					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
2069:Libraries/fat_sd/ff.c **** #endif
2070:Libraries/fat_sd/ff.c **** #endif
2071:Libraries/fat_sd/ff.c **** 				rcnt = SS(fp->fs) * cc;				/* Number of bytes transferred */
2072:Libraries/fat_sd/ff.c **** 				continue;
2073:Libraries/fat_sd/ff.c **** 			}
2074:Libraries/fat_sd/ff.c **** #if !_FS_TINY
2075:Libraries/fat_sd/ff.c **** #if !_FS_READONLY
2076:Libraries/fat_sd/ff.c **** 			if (fp->flag & FA__DIRTY) {			/* Write sector I/O buffer if needed */
2077:Libraries/fat_sd/ff.c **** 				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
2078:Libraries/fat_sd/ff.c **** 					ABORT(fp->fs, FR_DISK_ERR);
2079:Libraries/fat_sd/ff.c **** 				fp->flag &= ~FA__DIRTY;
2080:Libraries/fat_sd/ff.c **** 			}
2081:Libraries/fat_sd/ff.c **** #endif
2082:Libraries/fat_sd/ff.c **** 			if (fp->dsect != sect) {			/* Fill sector buffer with file data */
2083:Libraries/fat_sd/ff.c **** 				if (disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
2084:Libraries/fat_sd/ff.c **** 					ABORT(fp->fs, FR_DISK_ERR);
2085:Libraries/fat_sd/ff.c **** 			}
2086:Libraries/fat_sd/ff.c **** #endif
2087:Libraries/fat_sd/ff.c **** 			fp->dsect = sect;
2088:Libraries/fat_sd/ff.c **** 		}
2089:Libraries/fat_sd/ff.c **** 		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
2090:Libraries/fat_sd/ff.c **** 		if (rcnt > btr) rcnt = btr;
2091:Libraries/fat_sd/ff.c **** #if _FS_TINY
2092:Libraries/fat_sd/ff.c **** 		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
2093:Libraries/fat_sd/ff.c **** 			ABORT(fp->fs, FR_DISK_ERR);
2094:Libraries/fat_sd/ff.c **** 		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
2095:Libraries/fat_sd/ff.c **** #else
2096:Libraries/fat_sd/ff.c **** 		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
2097:Libraries/fat_sd/ff.c **** #endif
2098:Libraries/fat_sd/ff.c **** 	}
2099:Libraries/fat_sd/ff.c **** 
2100:Libraries/fat_sd/ff.c **** 	LEAVE_FF(fp->fs, FR_OK);
2101:Libraries/fat_sd/ff.c **** }
2102:Libraries/fat_sd/ff.c **** 
2103:Libraries/fat_sd/ff.c **** 
2104:Libraries/fat_sd/ff.c **** 
2105:Libraries/fat_sd/ff.c **** 
2106:Libraries/fat_sd/ff.c **** #if !_FS_READONLY
2107:Libraries/fat_sd/ff.c **** /*-----------------------------------------------------------------------*/
2108:Libraries/fat_sd/ff.c **** /* Write File                                                            */
2109:Libraries/fat_sd/ff.c **** /*-----------------------------------------------------------------------*/
2110:Libraries/fat_sd/ff.c **** 
2111:Libraries/fat_sd/ff.c **** FRESULT f_write (
2112:Libraries/fat_sd/ff.c **** 	FIL *fp,			/* Pointer to the file object */
2113:Libraries/fat_sd/ff.c **** 	const void *buff,	/* Pointer to the data to be written */
2114:Libraries/fat_sd/ff.c **** 	UINT btw,			/* Number of bytes to write */
2115:Libraries/fat_sd/ff.c **** 	UINT *bw			/* Pointer to number of bytes written */
2116:Libraries/fat_sd/ff.c **** )
2117:Libraries/fat_sd/ff.c **** {
2118:Libraries/fat_sd/ff.c **** 	FRESULT res;
2119:Libraries/fat_sd/ff.c **** 	DWORD clst, sect;
2120:Libraries/fat_sd/ff.c **** 	UINT wcnt, cc;
2121:Libraries/fat_sd/ff.c **** 	const BYTE *wbuff = buff;
2122:Libraries/fat_sd/ff.c **** 	BYTE csect;
2123:Libraries/fat_sd/ff.c **** 
2124:Libraries/fat_sd/ff.c **** 
2125:Libraries/fat_sd/ff.c **** 	*bw = 0;	/* Initialize byte counter */
2126:Libraries/fat_sd/ff.c **** 
2127:Libraries/fat_sd/ff.c **** 	res = validate(fp->fs, fp->id);					/* Check validity of the object */
2128:Libraries/fat_sd/ff.c **** 	if (res != FR_OK) LEAVE_FF(fp->fs, res);
2129:Libraries/fat_sd/ff.c **** 	if (fp->flag & FA__ERROR)						/* Check abort flag */
2130:Libraries/fat_sd/ff.c **** 		LEAVE_FF(fp->fs, FR_INT_ERR);
2131:Libraries/fat_sd/ff.c **** 	if (!(fp->flag & FA_WRITE))						/* Check access mode */
2132:Libraries/fat_sd/ff.c **** 		LEAVE_FF(fp->fs, FR_DENIED);
2133:Libraries/fat_sd/ff.c **** 	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */
2134:Libraries/fat_sd/ff.c **** 
2135:Libraries/fat_sd/ff.c **** 	for ( ;  btw;									/* Repeat until all data transferred */
2136:Libraries/fat_sd/ff.c **** 		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
2137:Libraries/fat_sd/ff.c **** 		if ((fp->fptr % SS(fp->fs)) == 0) {			/* On the sector boundary? */
2138:Libraries/fat_sd/ff.c **** 			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
2139:Libraries/fat_sd/ff.c **** 			if (!csect) {							/* On the cluster boundary? */
2140:Libraries/fat_sd/ff.c **** 				if (fp->fptr == 0) {				/* On the top of the file? */
2141:Libraries/fat_sd/ff.c **** 					clst = fp->org_clust;			/* Follow from the origin */
2142:Libraries/fat_sd/ff.c **** 					if (clst == 0)					/* When there is no cluster chain, */
2143:Libraries/fat_sd/ff.c **** 						fp->org_clust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
2144:Libraries/fat_sd/ff.c **** 				} else {							/* Middle or end of the file */
2145:Libraries/fat_sd/ff.c **** 					clst = create_chain(fp->fs, fp->curr_clust);			/* Follow or stretch cluster chain */
2146:Libraries/fat_sd/ff.c **** 				}
2147:Libraries/fat_sd/ff.c **** 				if (clst == 0) break;				/* Could not allocate a new cluster (disk full) */
2148:Libraries/fat_sd/ff.c **** 				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
2149:Libraries/fat_sd/ff.c **** 				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
2150:Libraries/fat_sd/ff.c **** 				fp->curr_clust = clst;				/* Update current cluster */
2151:Libraries/fat_sd/ff.c **** 			}
2152:Libraries/fat_sd/ff.c **** #if _FS_TINY
2153:Libraries/fat_sd/ff.c **** 			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write back data buffer prior to f
2154:Libraries/fat_sd/ff.c **** 				ABORT(fp->fs, FR_DISK_ERR);
2155:Libraries/fat_sd/ff.c **** #else
2156:Libraries/fat_sd/ff.c **** 			if (fp->flag & FA__DIRTY) {		/* Write back data buffer prior to following direct transfer */
2157:Libraries/fat_sd/ff.c **** 				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
2158:Libraries/fat_sd/ff.c **** 					ABORT(fp->fs, FR_DISK_ERR);
2159:Libraries/fat_sd/ff.c **** 				fp->flag &= ~FA__DIRTY;
2160:Libraries/fat_sd/ff.c **** 			}
2161:Libraries/fat_sd/ff.c **** #endif
2162:Libraries/fat_sd/ff.c **** 			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
2163:Libraries/fat_sd/ff.c **** 			if (!sect) ABORT(fp->fs, FR_INT_ERR);
2164:Libraries/fat_sd/ff.c **** 			sect += csect;
2165:Libraries/fat_sd/ff.c **** 			cc = btw / SS(fp->fs);					/* When remaining bytes >= sector size, */
2166:Libraries/fat_sd/ff.c **** 			if (cc) {								/* Write maximum contiguous sectors directly */
2167:Libraries/fat_sd/ff.c **** 				if (csect + cc > fp->fs->csize)		/* Clip at cluster boundary */
2168:Libraries/fat_sd/ff.c **** 					cc = fp->fs->csize - csect;
2169:Libraries/fat_sd/ff.c **** 				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
2170:Libraries/fat_sd/ff.c **** 					ABORT(fp->fs, FR_DISK_ERR);
2171:Libraries/fat_sd/ff.c **** #if _FS_TINY
2172:Libraries/fat_sd/ff.c **** 				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets dirty by the direct write 
2173:Libraries/fat_sd/ff.c **** 					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
2174:Libraries/fat_sd/ff.c **** 					fp->fs->wflag = 0;
2175:Libraries/fat_sd/ff.c **** 				}
2176:Libraries/fat_sd/ff.c **** #else
2177:Libraries/fat_sd/ff.c **** 				if (fp->dsect - sect < cc) {		/* Refill sector cache if it gets dirty by the direct write */
2178:Libraries/fat_sd/ff.c **** 					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
2179:Libraries/fat_sd/ff.c **** 					fp->flag &= ~FA__DIRTY;
2180:Libraries/fat_sd/ff.c **** 				}
2181:Libraries/fat_sd/ff.c **** #endif
2182:Libraries/fat_sd/ff.c **** 				wcnt = SS(fp->fs) * cc;				/* Number of bytes transferred */
2183:Libraries/fat_sd/ff.c **** 				continue;
2184:Libraries/fat_sd/ff.c **** 			}
2185:Libraries/fat_sd/ff.c **** #if _FS_TINY
2186:Libraries/fat_sd/ff.c **** 			if (fp->fptr >= fp->fsize) {			/* Avoid silly buffer filling at growing edge */
2187:Libraries/fat_sd/ff.c **** 				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
2188:Libraries/fat_sd/ff.c **** 				fp->fs->winsect = sect;
2189:Libraries/fat_sd/ff.c **** 			}
2190:Libraries/fat_sd/ff.c **** #else
2191:Libraries/fat_sd/ff.c **** 			if (fp->dsect != sect) {				/* Fill sector buffer with file data */
2192:Libraries/fat_sd/ff.c **** 				if (fp->fptr < fp->fsize &&
2193:Libraries/fat_sd/ff.c **** 					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
2194:Libraries/fat_sd/ff.c **** 						ABORT(fp->fs, FR_DISK_ERR);
2195:Libraries/fat_sd/ff.c **** 			}
2196:Libraries/fat_sd/ff.c **** #endif
2197:Libraries/fat_sd/ff.c **** 			fp->dsect = sect;
2198:Libraries/fat_sd/ff.c **** 		}
2199:Libraries/fat_sd/ff.c **** 		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Put partial sector into file I/O buffer */
2200:Libraries/fat_sd/ff.c **** 		if (wcnt > btw) wcnt = btw;
2201:Libraries/fat_sd/ff.c **** #if _FS_TINY
2202:Libraries/fat_sd/ff.c **** 		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
2203:Libraries/fat_sd/ff.c **** 			ABORT(fp->fs, FR_DISK_ERR);
2204:Libraries/fat_sd/ff.c **** 		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
2205:Libraries/fat_sd/ff.c **** 		fp->fs->wflag = 1;
2206:Libraries/fat_sd/ff.c **** #else
2207:Libraries/fat_sd/ff.c **** 		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
2208:Libraries/fat_sd/ff.c **** 		fp->flag |= FA__DIRTY;
2209:Libraries/fat_sd/ff.c **** #endif
2210:Libraries/fat_sd/ff.c **** 	}
2211:Libraries/fat_sd/ff.c **** 
2212:Libraries/fat_sd/ff.c **** 	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
2213:Libraries/fat_sd/ff.c **** 	fp->flag |= FA__WRITTEN;						/* Set file changed flag */
2214:Libraries/fat_sd/ff.c **** 
2215:Libraries/fat_sd/ff.c **** 	LEAVE_FF(fp->fs, FR_OK);
2216:Libraries/fat_sd/ff.c **** }
2217:Libraries/fat_sd/ff.c **** 
2218:Libraries/fat_sd/ff.c **** 
2219:Libraries/fat_sd/ff.c **** 
2220:Libraries/fat_sd/ff.c **** 
2221:Libraries/fat_sd/ff.c **** /*-----------------------------------------------------------------------*/
2222:Libraries/fat_sd/ff.c **** /* Synchronize the File Object                                           */
2223:Libraries/fat_sd/ff.c **** /*-----------------------------------------------------------------------*/
2224:Libraries/fat_sd/ff.c **** 
2225:Libraries/fat_sd/ff.c **** FRESULT f_sync (
2226:Libraries/fat_sd/ff.c **** 	FIL *fp		/* Pointer to the file object */
2227:Libraries/fat_sd/ff.c **** )
2228:Libraries/fat_sd/ff.c **** {
2229:Libraries/fat_sd/ff.c **** 	FRESULT res;
2230:Libraries/fat_sd/ff.c **** 	DWORD tim;
2231:Libraries/fat_sd/ff.c **** 	BYTE *dir;
2232:Libraries/fat_sd/ff.c **** 
2233:Libraries/fat_sd/ff.c **** 
2234:Libraries/fat_sd/ff.c **** 	res = validate(fp->fs, fp->id);		/* Check validity of the object */
2235:Libraries/fat_sd/ff.c **** 	if (res == FR_OK) {
2236:Libraries/fat_sd/ff.c **** 		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
2237:Libraries/fat_sd/ff.c **** #if !_FS_TINY	/* Write-back dirty buffer */
2238:Libraries/fat_sd/ff.c **** 			if (fp->flag & FA__DIRTY) {
2239:Libraries/fat_sd/ff.c **** 				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
2240:Libraries/fat_sd/ff.c **** 					LEAVE_FF(fp->fs, FR_DISK_ERR);
2241:Libraries/fat_sd/ff.c **** 				fp->flag &= ~FA__DIRTY;
2242:Libraries/fat_sd/ff.c **** 			}
2243:Libraries/fat_sd/ff.c **** #endif
2244:Libraries/fat_sd/ff.c **** 			/* Update the directory entry */
2245:Libraries/fat_sd/ff.c **** 			res = move_window(fp->fs, fp->dir_sect);
2246:Libraries/fat_sd/ff.c **** 			if (res == FR_OK) {
2247:Libraries/fat_sd/ff.c **** 				dir = fp->dir_ptr;
2248:Libraries/fat_sd/ff.c **** 				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
2249:Libraries/fat_sd/ff.c **** 				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
2250:Libraries/fat_sd/ff.c **** 				ST_WORD(dir+DIR_FstClusLO, fp->org_clust);	/* Update start cluster */
2251:Libraries/fat_sd/ff.c **** 				ST_WORD(dir+DIR_FstClusHI, fp->org_clust >> 16);
2252:Libraries/fat_sd/ff.c **** 				tim = get_fattime();						/* Update updated time */
2253:Libraries/fat_sd/ff.c **** 				ST_DWORD(dir+DIR_WrtTime, tim);
2254:Libraries/fat_sd/ff.c **** 				fp->flag &= ~FA__WRITTEN;
2255:Libraries/fat_sd/ff.c **** 				fp->fs->wflag = 1;
2256:Libraries/fat_sd/ff.c **** 				res = sync(fp->fs);
2257:Libraries/fat_sd/ff.c **** 			}
2258:Libraries/fat_sd/ff.c **** 		}
2259:Libraries/fat_sd/ff.c **** 	}
2260:Libraries/fat_sd/ff.c **** 
2261:Libraries/fat_sd/ff.c **** 	LEAVE_FF(fp->fs, res);
2262:Libraries/fat_sd/ff.c **** }
2263:Libraries/fat_sd/ff.c **** 
2264:Libraries/fat_sd/ff.c **** #endif /* !_FS_READONLY */
2265:Libraries/fat_sd/ff.c **** 
2266:Libraries/fat_sd/ff.c **** 
2267:Libraries/fat_sd/ff.c **** 
2268:Libraries/fat_sd/ff.c **** 
2269:Libraries/fat_sd/ff.c **** /*-----------------------------------------------------------------------*/
2270:Libraries/fat_sd/ff.c **** /* Close File                                                            */
2271:Libraries/fat_sd/ff.c **** /*-----------------------------------------------------------------------*/
2272:Libraries/fat_sd/ff.c **** 
2273:Libraries/fat_sd/ff.c **** FRESULT f_close (
2274:Libraries/fat_sd/ff.c **** 	FIL *fp		/* Pointer to the file object to be closed */
2275:Libraries/fat_sd/ff.c **** )
2276:Libraries/fat_sd/ff.c **** {
2277:Libraries/fat_sd/ff.c **** 	FRESULT res;
2278:Libraries/fat_sd/ff.c **** 
2279:Libraries/fat_sd/ff.c **** #if _FS_READONLY
2280:Libraries/fat_sd/ff.c **** 	FATFS *fs = fp->fs;
2281:Libraries/fat_sd/ff.c **** 	res = validate(fs, fp->id);
2282:Libraries/fat_sd/ff.c **** 	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
2283:Libraries/fat_sd/ff.c **** 	LEAVE_FF(fs, res);
2284:Libraries/fat_sd/ff.c **** 
2285:Libraries/fat_sd/ff.c **** #else
2286:Libraries/fat_sd/ff.c **** 	res = f_sync(fp);		/* Flush cached data */
2287:Libraries/fat_sd/ff.c **** #if _FS_SHARE
2288:Libraries/fat_sd/ff.c **** 	if (res == FR_OK) {		/* Decrement open counter */
2289:Libraries/fat_sd/ff.c **** #if _FS_REENTRANT
2290:Libraries/fat_sd/ff.c **** 		res = validate(fp->fs, fp->id);
2291:Libraries/fat_sd/ff.c **** 		if (res == FR_OK) {
2292:Libraries/fat_sd/ff.c **** 			res = dec_lock(fp->fs, fp->lockid);	
2293:Libraries/fat_sd/ff.c **** 			unlock_fs(fp->fs, FR_OK);
2294:Libraries/fat_sd/ff.c **** 		}
2295:Libraries/fat_sd/ff.c **** #else
2296:Libraries/fat_sd/ff.c **** 		res = dec_lock(fp->fs, fp->lockid);
2297:Libraries/fat_sd/ff.c **** #endif
2298:Libraries/fat_sd/ff.c **** 	}
2299:Libraries/fat_sd/ff.c **** #endif
2300:Libraries/fat_sd/ff.c **** 	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
2301:Libraries/fat_sd/ff.c **** 	return res;
2302:Libraries/fat_sd/ff.c **** #endif
2303:Libraries/fat_sd/ff.c **** }
2304:Libraries/fat_sd/ff.c **** 
2305:Libraries/fat_sd/ff.c **** 
2306:Libraries/fat_sd/ff.c **** 
2307:Libraries/fat_sd/ff.c **** 
2308:Libraries/fat_sd/ff.c **** /*-----------------------------------------------------------------------*/
2309:Libraries/fat_sd/ff.c **** /* Change Current Drive/Directory                                        */
2310:Libraries/fat_sd/ff.c **** /*-----------------------------------------------------------------------*/
2311:Libraries/fat_sd/ff.c **** 
2312:Libraries/fat_sd/ff.c **** #if _FS_RPATH
2313:Libraries/fat_sd/ff.c **** 
2314:Libraries/fat_sd/ff.c **** FRESULT f_chdrive (
2315:Libraries/fat_sd/ff.c **** 	BYTE drv		/* Drive number */
2316:Libraries/fat_sd/ff.c **** )
2317:Libraries/fat_sd/ff.c **** {
 355              	r0, #11
 356              	.LVL32:
 357              		b	.L58
 358              	.LVL33:
 359              	.L56:
2318:Libraries/fat_sd/ff.c **** 	if (drv >= _DRIVES) return FR_INVALID_DRIVE;
 360              	 1 2320 0
 361 0000 0128     		ldr	r3, .L60
 362              		strb	r0, [r3, #0]
 363              		movs	r0, #0
 364              	.LVL34:
 365 0002 01D9     	.L58:
 366 0004 0B20     		.loc 1 2323 0
 367              		bx	lr
 368 0006 02E0     	.L61:
 369              		.align	2
 370              	.L60:
2319:Libraries/fat_sd/ff.c **** 
2320:Libraries/fat_sd/ff.c **** 	Drive = drv;
 371              	CHOR1
 372 0008 014B     	.LFE36:
 374 000c 0020     		.section	.text.f_mkfs,"ax",%progbits
 375              		.align	2
 376              		.global	f_mkfs
2321:Libraries/fat_sd/ff.c **** 
2322:Libraries/fat_sd/ff.c **** 	return FR_OK;
2323:Libraries/fat_sd/ff.c **** }
 377              	b
 378 000e 7047     		.thumb_func
 380              	f_mkfs:
 381              	.LFB49:
 382 0010 00000000 		.loc 1 3138 0
 383              		@ args = 0, pretend = 0, frame = 32
 384              		@ frame_needed = 0, uses_anonymous_args = 0
 385              	.LVL35:
 386              		push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 387              	.LCFI4:
 388              		.loc 1 3151 0
 389              		cmp	r0, #1
 390              		.loc 1 3138 0
 391              		sub	sp, sp, #36
 392              	.LCFI5:
2324:Libraries/fat_sd/ff.c **** 
2325:Libraries/fat_sd/ff.c **** 
2326:Libraries/fat_sd/ff.c **** 
2327:Libraries/fat_sd/ff.c **** 
2328:Libraries/fat_sd/ff.c **** FRESULT f_chdir (
2329:Libraries/fat_sd/ff.c **** 	const TCHAR *path	/* Pointer to the directory path */
2330:Libraries/fat_sd/ff.c **** )
2331:Libraries/fat_sd/ff.c **** {
2332:Libraries/fat_sd/ff.c **** 	FRESULT res;
2333:Libraries/fat_sd/ff.c **** 	DIR dj;
2334:Libraries/fat_sd/ff.c **** 	BYTE *dir;
2335:Libraries/fat_sd/ff.c **** 	DEF_NAMEBUF;
2336:Libraries/fat_sd/ff.c **** 
2337:Libraries/fat_sd/ff.c **** 
2338:Libraries/fat_sd/ff.c **** 	res = chk_mounted(&path, &dj.fs, 0);
2339:Libraries/fat_sd/ff.c **** 	if (res == FR_OK) {
2340:Libraries/fat_sd/ff.c **** 		INIT_BUF(dj);
2341:Libraries/fat_sd/ff.c **** 		res = follow_path(&dj, path);		/* Follow the path */
2342:Libraries/fat_sd/ff.c **** 		FREE_BUF();
2343:Libraries/fat_sd/ff.c **** 		if (res == FR_OK) {					/* Follow completed */
2344:Libraries/fat_sd/ff.c **** 			dir = dj.dir;					/* Pointer to the entry */
2345:Libraries/fat_sd/ff.c **** 			if (!dir) {
2346:Libraries/fat_sd/ff.c **** 				dj.fs->cdir = dj.sclust;	/* Start directory itself */
2347:Libraries/fat_sd/ff.c **** 			} else {
2348:Libraries/fat_sd/ff.c **** 				if (dir[DIR_Attr] & AM_DIR)	/* Reached to the directory */
2349:Libraries/fat_sd/ff.c **** 					dj.fs->cdir = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
2350:Libraries/fat_sd/ff.c **** 				else
2351:Libraries/fat_sd/ff.c **** 					res = FR_NO_PATH;		/* Reached but a file */
2352:Libraries/fat_sd/ff.c **** 			}
2353:Libraries/fat_sd/ff.c **** 		}
2354:Libraries/fat_sd/ff.c **** 		if (res == FR_NO_FILE) res = FR_NO_PATH;
2355:Libraries/fat_sd/ff.c **** 	}
2356:Libraries/fat_sd/ff.c **** 
2357:Libraries/fat_sd/ff.c **** 	LEAVE_FF(dj.fs, res);
2358:Libraries/fat_sd/ff.c **** }
2359:Libraries/fat_sd/ff.c **** 
2360:Libraries/fat_sd/ff.c **** #endif
2361:Libraries/fat_sd/ff.c **** 
2362:Libraries/fat_sd/ff.c **** 
2363:Libraries/fat_sd/ff.c **** 
2364:Libraries/fat_sd/ff.c **** #if _FS_MINIMIZE <= 2
2365:Libraries/fat_sd/ff.c **** /*-----------------------------------------------------------------------*/
2366:Libraries/fat_sd/ff.c **** /* Seek File R/W Pointer                                                 */
2367:Libraries/fat_sd/ff.c **** /*-----------------------------------------------------------------------*/
2368:Libraries/fat_sd/ff.c **** 
2369:Libraries/fat_sd/ff.c **** FRESULT f_lseek (
2370:Libraries/fat_sd/ff.c **** 	FIL *fp,		/* Pointer to the file object */
2371:Libraries/fat_sd/ff.c **** 	DWORD ofs		/* File pointer from top of file */
2372:Libraries/fat_sd/ff.c **** )
2373:Libraries/fat_sd/ff.c **** {
2374:Libraries/fat_sd/ff.c **** 	FRESULT res;
2375:Libraries/fat_sd/ff.c **** 
2376:Libraries/fat_sd/ff.c **** 
2377:Libraries/fat_sd/ff.c **** 	res = validate(fp->fs, fp->id);		/* Check validity of the object */
2378:Libraries/fat_sd/ff.c **** 	if (res != FR_OK) LEAVE_FF(fp->fs, res);
2379:Libraries/fat_sd/ff.c **** 	if (fp->flag & FA__ERROR)			/* Check abort flag */
2380:Libraries/fat_sd/ff.c **** 		LEAVE_FF(fp->fs, FR_INT_ERR);
2381:Libraries/fat_sd/ff.c **** 
2382:Libraries/fat_sd/ff.c **** #if _USE_FASTSEEK
2383:Libraries/fat_sd/ff.c **** 	if (fp->cltbl) {	/* Fast seek */
2384:Libraries/fat_sd/ff.c **** 		DWORD cl, pcl, ncl, tcl, dsc, tlen, *tbl = fp->cltbl;
2385:Libraries/fat_sd/ff.c **** 		BYTE csc;
2386:Libraries/fat_sd/ff.c **** 
2387:Libraries/fat_sd/ff.c **** 		tlen = *tbl++;
2388:Libraries/fat_sd/ff.c **** 		if (ofs == CREATE_LINKMAP) {	/* Create link map table */
2389:Libraries/fat_sd/ff.c **** 			cl = fp->org_clust;
2390:Libraries/fat_sd/ff.c **** 			if (cl) {
2391:Libraries/fat_sd/ff.c **** 				do {
2392:Libraries/fat_sd/ff.c **** 					if (tlen < 4) {	/* Not enough table items */
2393:Libraries/fat_sd/ff.c **** 						res = FR_NOT_ENOUGH_CORE; break;
2394:Libraries/fat_sd/ff.c **** 					}
2395:Libraries/fat_sd/ff.c **** 					tcl = cl; ncl = 0;
2396:Libraries/fat_sd/ff.c **** 					do {		/* Get a fragment and store the top and length */
2397:Libraries/fat_sd/ff.c **** 						pcl = cl; ncl++;
2398:Libraries/fat_sd/ff.c **** 						cl = get_fat(fp->fs, cl);
2399:Libraries/fat_sd/ff.c **** 						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
2400:Libraries/fat_sd/ff.c **** 						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
2401:Libraries/fat_sd/ff.c **** 					} while (cl == pcl + 1);
2402:Libraries/fat_sd/ff.c **** 					*tbl++ = ncl; *tbl++ = tcl;
2403:Libraries/fat_sd/ff.c **** 					tlen -= 2;
2404:Libraries/fat_sd/ff.c **** 				} while (cl < fp->fs->n_fatent);
2405:Libraries/fat_sd/ff.c **** 			}
2406:Libraries/fat_sd/ff.c **** 			*tbl = 0;	/* Terminate table */
2407:Libraries/fat_sd/ff.c **** 
2408:Libraries/fat_sd/ff.c **** 		} else {						/* Fast seek */
2409:Libraries/fat_sd/ff.c **** 			if (ofs > fp->fsize)		/* Clip offset at the file size */
2410:Libraries/fat_sd/ff.c **** 				ofs = fp->fsize;
2411:Libraries/fat_sd/ff.c **** 			fp->fptr = ofs;				/* Set file pointer */
2412:Libraries/fat_sd/ff.c **** 			if (ofs) {
2413:Libraries/fat_sd/ff.c **** 				dsc = (ofs - 1) / SS(fp->fs);
2414:Libraries/fat_sd/ff.c **** 				cl = dsc / fp->fs->csize;
2415:Libraries/fat_sd/ff.c **** 				for (;;) {
2416:Libraries/fat_sd/ff.c **** 					ncl = *tbl++;
2417:Libraries/fat_sd/ff.c **** 					if (!ncl) ABORT(fp->fs, FR_INT_ERR);
2418:Libraries/fat_sd/ff.c **** 					if (cl < ncl) break;
2419:Libraries/fat_sd/ff.c **** 					cl -= ncl; tbl++;
2420:Libraries/fat_sd/ff.c **** 				}
2421:Libraries/fat_sd/ff.c **** 				fp->curr_clust = cl + *tbl;
2422:Libraries/fat_sd/ff.c **** 				csc = (BYTE)(dsc & (fp->fs->csize - 1));
2423:Libraries/fat_sd/ff.c **** 				dsc = clust2sect(fp->fs, fp->curr_clust);
2424:Libraries/fat_sd/ff.c **** 				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
2425:Libraries/fat_sd/ff.c **** 				dsc += csc;
2426:Libraries/fat_sd/ff.c **** 				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {
2427:Libraries/fat_sd/ff.c **** #if !_FS_TINY
2428:Libraries/fat_sd/ff.c **** #if !_FS_READONLY
2429:Libraries/fat_sd/ff.c **** 					if (fp->flag & FA__DIRTY) {		/* Flush dirty buffer if needed */
2430:Libraries/fat_sd/ff.c **** 						if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
2431:Libraries/fat_sd/ff.c **** 							ABORT(fp->fs, FR_DISK_ERR);
2432:Libraries/fat_sd/ff.c **** 						fp->flag &= ~FA__DIRTY;
2433:Libraries/fat_sd/ff.c **** 					}
2434:Libraries/fat_sd/ff.c **** #endif
2435:Libraries/fat_sd/ff.c **** 					if (disk_read(fp->fs->drv, fp->buf, dsc, 1) != RES_OK)
2436:Libraries/fat_sd/ff.c **** 						ABORT(fp->fs, FR_DISK_ERR);
2437:Libraries/fat_sd/ff.c **** #endif
2438:Libraries/fat_sd/ff.c **** 					fp->dsect = dsc;
2439:Libraries/fat_sd/ff.c **** 				}
2440:Libraries/fat_sd/ff.c **** 			}
2441:Libraries/fat_sd/ff.c **** 		}
2442:Libraries/fat_sd/ff.c **** 	} else
2443:Libraries/fat_sd/ff.c **** #endif
2444:Libraries/fat_sd/ff.c **** 
2445:Libraries/fat_sd/ff.c **** 	/* Normal Seek */
2446:Libraries/fat_sd/ff.c **** 	{
2447:Libraries/fat_sd/ff.c **** 		DWORD clst, bcs, nsect, ifptr;
2448:Libraries/fat_sd/ff.c **** 
2449:Libraries/fat_sd/ff.c **** 		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
2450:Libraries/fat_sd/ff.c **** #if !_FS_READONLY
2451:Libraries/fat_sd/ff.c **** 			 && !(fp->flag & FA_WRITE)
2452:Libraries/fat_sd/ff.c **** #endif
2453:Libraries/fat_sd/ff.c **** 			) ofs = fp->fsize;
2454:Libraries/fat_sd/ff.c **** 
2455:Libraries/fat_sd/ff.c **** 		ifptr = fp->fptr;
2456:Libraries/fat_sd/ff.c **** 		fp->fptr = nsect = 0;
2457:Libraries/fat_sd/ff.c **** 		if (ofs) {
2458:Libraries/fat_sd/ff.c **** 			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
2459:Libraries/fat_sd/ff.c **** 			if (ifptr > 0 &&
2460:Libraries/fat_sd/ff.c **** 				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
2461:Libraries/fat_sd/ff.c **** 				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
2462:Libraries/fat_sd/ff.c **** 				ofs -= fp->fptr;
2463:Libraries/fat_sd/ff.c **** 				clst = fp->curr_clust;
2464:Libraries/fat_sd/ff.c **** 			} else {									/* When seek to back cluster, */
2465:Libraries/fat_sd/ff.c **** 				clst = fp->org_clust;					/* start from the first cluster */
2466:Libraries/fat_sd/ff.c **** #if !_FS_READONLY
2467:Libraries/fat_sd/ff.c **** 				if (clst == 0) {						/* If no cluster chain, create a new chain */
2468:Libraries/fat_sd/ff.c **** 					clst = create_chain(fp->fs, 0);
2469:Libraries/fat_sd/ff.c **** 					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
2470:Libraries/fat_sd/ff.c **** 					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
2471:Libraries/fat_sd/ff.c **** 					fp->org_clust = clst;
2472:Libraries/fat_sd/ff.c **** 				}
2473:Libraries/fat_sd/ff.c **** #endif
2474:Libraries/fat_sd/ff.c **** 				fp->curr_clust = clst;
2475:Libraries/fat_sd/ff.c **** 			}
2476:Libraries/fat_sd/ff.c **** 			if (clst != 0) {
2477:Libraries/fat_sd/ff.c **** 				while (ofs > bcs) {						/* Cluster following loop */
2478:Libraries/fat_sd/ff.c **** #if !_FS_READONLY
2479:Libraries/fat_sd/ff.c **** 					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
2480:Libraries/fat_sd/ff.c **** 						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
2481:Libraries/fat_sd/ff.c **** 						if (clst == 0) {				/* When disk gets full, clip file size */
2482:Libraries/fat_sd/ff.c **** 							ofs = bcs; break;
2483:Libraries/fat_sd/ff.c **** 						}
2484:Libraries/fat_sd/ff.c **** 					} else
2485:Libraries/fat_sd/ff.c **** #endif
2486:Libraries/fat_sd/ff.c **** 						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
2487:Libraries/fat_sd/ff.c **** 					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
2488:Libraries/fat_sd/ff.c **** 					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
2489:Libraries/fat_sd/ff.c **** 					fp->curr_clust = clst;
2490:Libraries/fat_sd/ff.c **** 					fp->fptr += bcs;
2491:Libraries/fat_sd/ff.c **** 					ofs -= bcs;
2492:Libraries/fat_sd/ff.c **** 				}
2493:Libraries/fat_sd/ff.c **** 				fp->fptr += ofs;
2494:Libraries/fat_sd/ff.c **** 				if (ofs % SS(fp->fs)) {
2495:Libraries/fat_sd/ff.c **** 					nsect = clust2sect(fp->fs, clst);	/* Current sector */
2496:Libraries/fat_sd/ff.c **** 					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
2497:Libraries/fat_sd/ff.c **** 					nsect += ofs / SS(fp->fs);
2498:Libraries/fat_sd/ff.c **** 				}
2499:Libraries/fat_sd/ff.c **** 			}
2500:Libraries/fat_sd/ff.c **** 		}
2501:Libraries/fat_sd/ff.c **** 		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {
2502:Libraries/fat_sd/ff.c **** #if !_FS_TINY
2503:Libraries/fat_sd/ff.c **** #if !_FS_READONLY
2504:Libraries/fat_sd/ff.c **** 			if (fp->flag & FA__DIRTY) {			/* Flush dirty buffer if needed */
2505:Libraries/fat_sd/ff.c **** 				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
2506:Libraries/fat_sd/ff.c **** 					ABORT(fp->fs, FR_DISK_ERR);
2507:Libraries/fat_sd/ff.c **** 				fp->flag &= ~FA__DIRTY;
2508:Libraries/fat_sd/ff.c **** 			}
2509:Libraries/fat_sd/ff.c **** #endif
2510:Libraries/fat_sd/ff.c **** 			if (disk_read(fp->fs->drv, fp->buf, nsect, 1) != RES_OK)
2511:Libraries/fat_sd/ff.c **** 				ABORT(fp->fs, FR_DISK_ERR);
2512:Libraries/fat_sd/ff.c **** #endif
2513:Libraries/fat_sd/ff.c **** 			fp->dsect = nsect;
2514:Libraries/fat_sd/ff.c **** 		}
2515:Libraries/fat_sd/ff.c **** #if !_FS_READONLY
2516:Libraries/fat_sd/ff.c **** 		if (fp->fptr > fp->fsize) {			/* Set changed flag if the file size is extended */
2517:Libraries/fat_sd/ff.c **** 			fp->fsize = fp->fptr;
2518:Libraries/fat_sd/ff.c **** 			fp->flag |= FA__WRITTEN;
2519:Libraries/fat_sd/ff.c **** 		}
2520:Libraries/fat_sd/ff.c **** #endif
2521:Libraries/fat_sd/ff.c **** 	}
2522:Libraries/fat_sd/ff.c **** 
2523:Libraries/fat_sd/ff.c **** 	LEAVE_FF(fp->fs, res);
2524:Libraries/fat_sd/ff.c **** }
2525:Libraries/fat_sd/ff.c **** 
2526:Libraries/fat_sd/ff.c **** 
2527:Libraries/fat_sd/ff.c **** 
2528:Libraries/fat_sd/ff.c **** #if _FS_MINIMIZE <= 1
2529:Libraries/fat_sd/ff.c **** /*-----------------------------------------------------------------------*/
2530:Libraries/fat_sd/ff.c **** /* Create a Directroy Object                                             */
2531:Libraries/fat_sd/ff.c **** /*-----------------------------------------------------------------------*/
2532:Libraries/fat_sd/ff.c **** 
2533:Libraries/fat_sd/ff.c **** FRESULT f_opendir (
2534:Libraries/fat_sd/ff.c **** 	DIR *dj,			/* Pointer to directory object to create */
2535:Libraries/fat_sd/ff.c **** 	const TCHAR *path	/* Pointer to the directory path */
2536:Libraries/fat_sd/ff.c **** )
2537:Libraries/fat_sd/ff.c **** {
2538:Libraries/fat_sd/ff.c **** 	FRESULT res;
2539:Libraries/fat_sd/ff.c **** 	BYTE *dir;
2540:Libraries/fat_sd/ff.c **** 	DEF_NAMEBUF;
2541:Libraries/fat_sd/ff.c **** 
2542:Libraries/fat_sd/ff.c **** 
2543:Libraries/fat_sd/ff.c **** 	res = chk_mounted(&path, &dj->fs, 0);
2544:Libraries/fat_sd/ff.c **** 	if (res == FR_OK) {
2545:Libraries/fat_sd/ff.c **** 		INIT_BUF(*dj);
2546:Libraries/fat_sd/ff.c **** 		res = follow_path(dj, path);			/* Follow the path to the directory */
2547:Libraries/fat_sd/ff.c **** 		FREE_BUF();
2548:Libraries/fat_sd/ff.c **** 		if (res == FR_OK) {						/* Follow completed */
2549:Libraries/fat_sd/ff.c **** 			dir = dj->dir;
2550:Libraries/fat_sd/ff.c **** 			if (dir) {							/* It is not the current dir */
2551:Libraries/fat_sd/ff.c **** 				if (dir[DIR_Attr] & AM_DIR) {	/* The object is a directory */
2552:Libraries/fat_sd/ff.c **** 					dj->sclust = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
2553:Libraries/fat_sd/ff.c **** 				} else {						/* The object is not a directory */
2554:Libraries/fat_sd/ff.c **** 					res = FR_NO_PATH;
2555:Libraries/fat_sd/ff.c **** 				}
2556:Libraries/fat_sd/ff.c **** 			}
2557:Libraries/fat_sd/ff.c **** 			if (res == FR_OK) {
2558:Libraries/fat_sd/ff.c **** 				dj->id = dj->fs->id;
2559:Libraries/fat_sd/ff.c **** 				res = dir_sdi(dj, 0);			/* Rewind dir */
2560:Libraries/fat_sd/ff.c **** 			}
2561:Libraries/fat_sd/ff.c **** 		}
2562:Libraries/fat_sd/ff.c **** 		if (res == FR_NO_FILE) res = FR_NO_PATH;
2563:Libraries/fat_sd/ff.c **** 	}
2564:Libraries/fat_sd/ff.c **** 
2565:Libraries/fat_sd/ff.c **** 	LEAVE_FF(dj->fs, res);
2566:Libraries/fat_sd/ff.c **** }
2567:Libraries/fat_sd/ff.c **** 
2568:Libraries/fat_sd/ff.c **** 
2569:Libraries/fat_sd/ff.c **** 
2570:Libraries/fat_sd/ff.c **** 
2571:Libraries/fat_sd/ff.c **** /*-----------------------------------------------------------------------*/
2572:Libraries/fat_sd/ff.c **** /* Read Directory Entry in Sequense                                      */
2573:Libraries/fat_sd/ff.c **** /*-----------------------------------------------------------------------*/
2574:Libraries/fat_sd/ff.c **** 
2575:Libraries/fat_sd/ff.c **** FRESULT f_readdir (
2576:Libraries/fat_sd/ff.c **** 	DIR *dj,			/* Pointer to the open directory object */
2577:Libraries/fat_sd/ff.c **** 	FILINFO *fno		/* Pointer to file information to return */
2578:Libraries/fat_sd/ff.c **** )
2579:Libraries/fat_sd/ff.c **** {
2580:Libraries/fat_sd/ff.c **** 	FRESULT res;
2581:Libraries/fat_sd/ff.c **** 	DEF_NAMEBUF;
2582:Libraries/fat_sd/ff.c **** 
2583:Libraries/fat_sd/ff.c **** 
2584:Libraries/fat_sd/ff.c **** 	res = validate(dj->fs, dj->id);			/* Check validity of the object */
2585:Libraries/fat_sd/ff.c **** 	if (res == FR_OK) {
2586:Libraries/fat_sd/ff.c **** 		if (!fno) {
2587:Libraries/fat_sd/ff.c **** 			res = dir_sdi(dj, 0);
2588:Libraries/fat_sd/ff.c **** 		} else {
2589:Libraries/fat_sd/ff.c **** 			INIT_BUF(*dj);
2590:Libraries/fat_sd/ff.c **** 			res = dir_read(dj);
2591:Libraries/fat_sd/ff.c **** 			if (res == FR_NO_FILE) {
2592:Libraries/fat_sd/ff.c **** 				dj->sect = 0;
2593:Libraries/fat_sd/ff.c **** 				res = FR_OK;
2594:Libraries/fat_sd/ff.c **** 			}
2595:Libraries/fat_sd/ff.c **** 			if (res == FR_OK) {				/* A valid entry is found */
2596:Libraries/fat_sd/ff.c **** 				get_fileinfo(dj, fno);		/* Get the object information */
2597:Libraries/fat_sd/ff.c **** 				res = dir_next(dj, 0);		/* Increment index for next */
2598:Libraries/fat_sd/ff.c **** 				if (res == FR_NO_FILE) {
2599:Libraries/fat_sd/ff.c **** 					dj->sect = 0;
2600:Libraries/fat_sd/ff.c **** 					res = FR_OK;
2601:Libraries/fat_sd/ff.c **** 				}
2602:Libraries/fat_sd/ff.c **** 			}
2603:Libraries/fat_sd/ff.c **** 			FREE_BUF();
2604:Libraries/fat_sd/ff.c **** 		}
2605:Libraries/fat_sd/ff.c **** 	}
2606:Libraries/fat_sd/ff.c **** 
2607:Libraries/fat_sd/ff.c **** 	LEAVE_FF(dj->fs, res);
2608:Libraries/fat_sd/ff.c **** }
2609:Libraries/fat_sd/ff.c **** 
2610:Libraries/fat_sd/ff.c **** 
2611:Libraries/fat_sd/ff.c **** 
2612:Libraries/fat_sd/ff.c **** #if _FS_MINIMIZE == 0
2613:Libraries/fat_sd/ff.c **** /*-----------------------------------------------------------------------*/
2614:Libraries/fat_sd/ff.c **** /* Get File Status                                                       */
2615:Libraries/fat_sd/ff.c **** /*-----------------------------------------------------------------------*/
2616:Libraries/fat_sd/ff.c **** 
2617:Libraries/fat_sd/ff.c **** FRESULT f_stat (
2618:Libraries/fat_sd/ff.c **** 	const TCHAR *path,	/* Pointer to the file path */
2619:Libraries/fat_sd/ff.c **** 	FILINFO *fno		/* Pointer to file information to return */
2620:Libraries/fat_sd/ff.c **** )
2621:Libraries/fat_sd/ff.c **** {
2622:Libraries/fat_sd/ff.c **** 	FRESULT res;
2623:Libraries/fat_sd/ff.c **** 	DIR dj;
2624:Libraries/fat_sd/ff.c **** 	DEF_NAMEBUF;
2625:Libraries/fat_sd/ff.c **** 
2626:Libraries/fat_sd/ff.c **** 
2627:Libraries/fat_sd/ff.c **** 	res = chk_mounted(&path, &dj.fs, 0);
2628:Libraries/fat_sd/ff.c **** 	if (res == FR_OK) {
2629:Libraries/fat_sd/ff.c **** 		INIT_BUF(dj);
2630:Libraries/fat_sd/ff.c **** 		res = follow_path(&dj, path);	/* Follow the file path */
2631:Libraries/fat_sd/ff.c **** 		if (res == FR_OK) {				/* Follow completed */
2632:Libraries/fat_sd/ff.c **** 			if (dj.dir)		/* Found an object */
2633:Libraries/fat_sd/ff.c **** 				get_fileinfo(&dj, fno);
2634:Libraries/fat_sd/ff.c **** 			else			/* It is root dir */
2635:Libraries/fat_sd/ff.c **** 				res = FR_INVALID_NAME;
2636:Libraries/fat_sd/ff.c **** 		}
2637:Libraries/fat_sd/ff.c **** 		FREE_BUF();
2638:Libraries/fat_sd/ff.c **** 	}
2639:Libraries/fat_sd/ff.c **** 
2640:Libraries/fat_sd/ff.c **** 	LEAVE_FF(dj.fs, res);
2641:Libraries/fat_sd/ff.c **** }
2642:Libraries/fat_sd/ff.c **** 
2643:Libraries/fat_sd/ff.c **** 
2644:Libraries/fat_sd/ff.c **** 
2645:Libraries/fat_sd/ff.c **** #if !_FS_READONLY
2646:Libraries/fat_sd/ff.c **** /*-----------------------------------------------------------------------*/
2647:Libraries/fat_sd/ff.c **** /* Get Number of Free Clusters                                           */
2648:Libraries/fat_sd/ff.c **** /*-----------------------------------------------------------------------*/
2649:Libraries/fat_sd/ff.c **** 
2650:Libraries/fat_sd/ff.c **** FRESULT f_getfree (
2651:Libraries/fat_sd/ff.c **** 	const TCHAR *path,	/* Pointer to the logical drive number (root dir) */
2652:Libraries/fat_sd/ff.c **** 	DWORD *nclst,		/* Pointer to the variable to return number of free clusters */
2653:Libraries/fat_sd/ff.c **** 	FATFS **fatfs		/* Pointer to pointer to corresponding file system object to return */
2654:Libraries/fat_sd/ff.c **** )
2655:Libraries/fat_sd/ff.c **** {
2656:Libraries/fat_sd/ff.c **** 	FRESULT res;
2657:Libraries/fat_sd/ff.c **** 	DWORD n, clst, sect, stat;
2658:Libraries/fat_sd/ff.c **** 	UINT i;
2659:Libraries/fat_sd/ff.c **** 	BYTE fat, *p;
2660:Libraries/fat_sd/ff.c **** 
2661:Libraries/fat_sd/ff.c **** 
2662:Libraries/fat_sd/ff.c **** 	/* Get drive number */
2663:Libraries/fat_sd/ff.c **** 	res = chk_mounted(&path, fatfs, 0);
2664:Libraries/fat_sd/ff.c **** 	if (res == FR_OK) {
2665:Libraries/fat_sd/ff.c **** 		/* If free_clust is valid, return it without full cluster scan */
2666:Libraries/fat_sd/ff.c **** 		if ((*fatfs)->free_clust <= (*fatfs)->n_fatent - 2) {
2667:Libraries/fat_sd/ff.c **** 			*nclst = (*fatfs)->free_clust;
2668:Libraries/fat_sd/ff.c **** 		} else {
2669:Libraries/fat_sd/ff.c **** 			/* Get number of free clusters */
2670:Libraries/fat_sd/ff.c **** 			fat = (*fatfs)->fs_type;
2671:Libraries/fat_sd/ff.c **** 			n = 0;
2672:Libraries/fat_sd/ff.c **** 			if (fat == FS_FAT12) {
2673:Libraries/fat_sd/ff.c **** 				clst = 2;
2674:Libraries/fat_sd/ff.c **** 				do {
2675:Libraries/fat_sd/ff.c **** 					stat = get_fat(*fatfs, clst);
2676:Libraries/fat_sd/ff.c **** 					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
2677:Libraries/fat_sd/ff.c **** 					if (stat == 1) { res = FR_INT_ERR; break; }
2678:Libraries/fat_sd/ff.c **** 					if (stat == 0) n++;
2679:Libraries/fat_sd/ff.c **** 				} while (++clst < (*fatfs)->n_fatent);
2680:Libraries/fat_sd/ff.c **** 			} else {
2681:Libraries/fat_sd/ff.c **** 				clst = (*fatfs)->n_fatent;
2682:Libraries/fat_sd/ff.c **** 				sect = (*fatfs)->fatbase;
2683:Libraries/fat_sd/ff.c **** 				i = 0; p = 0;
2684:Libraries/fat_sd/ff.c **** 				do {
2685:Libraries/fat_sd/ff.c **** 					if (!i) {
2686:Libraries/fat_sd/ff.c **** 						res = move_window(*fatfs, sect++);
2687:Libraries/fat_sd/ff.c **** 						if (res != FR_OK) break;
2688:Libraries/fat_sd/ff.c **** 						p = (*fatfs)->win;
2689:Libraries/fat_sd/ff.c **** 						i = SS(*fatfs);
2690:Libraries/fat_sd/ff.c **** 					}
2691:Libraries/fat_sd/ff.c **** 					if (fat == FS_FAT16) {
2692:Libraries/fat_sd/ff.c **** 						if (LD_WORD(p) == 0) n++;
2693:Libraries/fat_sd/ff.c **** 						p += 2; i -= 2;
2694:Libraries/fat_sd/ff.c **** 					} else {
2695:Libraries/fat_sd/ff.c **** 						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
2696:Libraries/fat_sd/ff.c **** 						p += 4; i -= 4;
2697:Libraries/fat_sd/ff.c **** 					}
2698:Libraries/fat_sd/ff.c **** 				} while (--clst);
2699:Libraries/fat_sd/ff.c **** 			}
2700:Libraries/fat_sd/ff.c **** 			(*fatfs)->free_clust = n;
2701:Libraries/fat_sd/ff.c **** 			if (fat == FS_FAT32) (*fatfs)->fsi_flag = 1;
2702:Libraries/fat_sd/ff.c **** 			*nclst = n;
2703:Libraries/fat_sd/ff.c **** 		}
2704:Libraries/fat_sd/ff.c **** 	}
2705:Libraries/fat_sd/ff.c **** 	LEAVE_FF(*fatfs, res);
2706:Libraries/fat_sd/ff.c **** }
2707:Libraries/fat_sd/ff.c **** 
2708:Libraries/fat_sd/ff.c **** 
2709:Libraries/fat_sd/ff.c **** 
2710:Libraries/fat_sd/ff.c **** 
2711:Libraries/fat_sd/ff.c **** /*-----------------------------------------------------------------------*/
2712:Libraries/fat_sd/ff.c **** /* Truncate File                                                         */
2713:Libraries/fat_sd/ff.c **** /*-----------------------------------------------------------------------*/
2714:Libraries/fat_sd/ff.c **** 
2715:Libraries/fat_sd/ff.c **** FRESULT f_truncate (
2716:Libraries/fat_sd/ff.c **** 	FIL *fp		/* Pointer to the file object */
2717:Libraries/fat_sd/ff.c **** )
2718:Libraries/fat_sd/ff.c **** {
2719:Libraries/fat_sd/ff.c **** 	FRESULT res;
2720:Libraries/fat_sd/ff.c **** 	DWORD ncl;
2721:Libraries/fat_sd/ff.c **** 
2722:Libraries/fat_sd/ff.c **** 
2723:Libraries/fat_sd/ff.c **** 	res = validate(fp->fs, fp->id);		/* Check validity of the object */
2724:Libraries/fat_sd/ff.c **** 	if (res == FR_OK) {
2725:Libraries/fat_sd/ff.c **** 		if (fp->flag & FA__ERROR) {			/* Check abort flag */
2726:Libraries/fat_sd/ff.c **** 			res = FR_INT_ERR;
2727:Libraries/fat_sd/ff.c **** 		} else {
2728:Libraries/fat_sd/ff.c **** 			if (!(fp->flag & FA_WRITE))		/* Check access mode */
2729:Libraries/fat_sd/ff.c **** 				res = FR_DENIED;
2730:Libraries/fat_sd/ff.c **** 		}
2731:Libraries/fat_sd/ff.c **** 	}
2732:Libraries/fat_sd/ff.c **** 	if (res == FR_OK) {
2733:Libraries/fat_sd/ff.c **** 		if (fp->fsize > fp->fptr) {
2734:Libraries/fat_sd/ff.c **** 			fp->fsize = fp->fptr;	/* Set file size to current R/W point */
2735:Libraries/fat_sd/ff.c **** 			fp->flag |= FA__WRITTEN;
2736:Libraries/fat_sd/ff.c **** 			if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
2737:Libraries/fat_sd/ff.c **** 				res = remove_chain(fp->fs, fp->org_clust);
2738:Libraries/fat_sd/ff.c **** 				fp->org_clust = 0;
2739:Libraries/fat_sd/ff.c **** 			} else {				/* When truncate a part of the file, remove remaining clusters */
2740:Libraries/fat_sd/ff.c **** 				ncl = get_fat(fp->fs, fp->curr_clust);
2741:Libraries/fat_sd/ff.c **** 				res = FR_OK;
2742:Libraries/fat_sd/ff.c **** 				if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
2743:Libraries/fat_sd/ff.c **** 				if (ncl == 1) res = FR_INT_ERR;
2744:Libraries/fat_sd/ff.c **** 				if (res == FR_OK && ncl < fp->fs->n_fatent) {
2745:Libraries/fat_sd/ff.c **** 					res = put_fat(fp->fs, fp->curr_clust, 0x0FFFFFFF);
2746:Libraries/fat_sd/ff.c **** 					if (res == FR_OK) res = remove_chain(fp->fs, ncl);
2747:Libraries/fat_sd/ff.c **** 				}
2748:Libraries/fat_sd/ff.c **** 			}
2749:Libraries/fat_sd/ff.c **** 		}
2750:Libraries/fat_sd/ff.c **** 		if (res != FR_OK) fp->flag |= FA__ERROR;
2751:Libraries/fat_sd/ff.c **** 	}
2752:Libraries/fat_sd/ff.c **** 
2753:Libraries/fat_sd/ff.c **** 	LEAVE_FF(fp->fs, res);
2754:Libraries/fat_sd/ff.c **** }
2755:Libraries/fat_sd/ff.c **** 
2756:Libraries/fat_sd/ff.c **** 
2757:Libraries/fat_sd/ff.c **** 
2758:Libraries/fat_sd/ff.c **** 
2759:Libraries/fat_sd/ff.c **** /*-----------------------------------------------------------------------*/
2760:Libraries/fat_sd/ff.c **** /* Delete a File or Directory                                            */
2761:Libraries/fat_sd/ff.c **** /*-----------------------------------------------------------------------*/
2762:Libraries/fat_sd/ff.c **** 
2763:Libraries/fat_sd/ff.c **** FRESULT f_unlink (
2764:Libraries/fat_sd/ff.c **** 	const TCHAR *path		/* Pointer to the file or directory path */
2765:Libraries/fat_sd/ff.c **** )
2766:Libraries/fat_sd/ff.c **** {
2767:Libraries/fat_sd/ff.c **** 	FRESULT res;
2768:Libraries/fat_sd/ff.c **** 	DIR dj, sdj;
2769:Libraries/fat_sd/ff.c **** 	BYTE *dir;
2770:Libraries/fat_sd/ff.c **** 	DWORD dclst;
2771:Libraries/fat_sd/ff.c **** 	DEF_NAMEBUF;
2772:Libraries/fat_sd/ff.c **** 
2773:Libraries/fat_sd/ff.c **** 
2774:Libraries/fat_sd/ff.c **** 	res = chk_mounted(&path, &dj.fs, 1);
2775:Libraries/fat_sd/ff.c **** 	if (res == FR_OK) {
2776:Libraries/fat_sd/ff.c **** 		INIT_BUF(dj);
2777:Libraries/fat_sd/ff.c **** 		res = follow_path(&dj, path);		/* Follow the file path */
2778:Libraries/fat_sd/ff.c **** 		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
2779:Libraries/fat_sd/ff.c **** 			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
2780:Libraries/fat_sd/ff.c **** #if _FS_SHARE
2781:Libraries/fat_sd/ff.c **** 		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Cannot remove open file */
2782:Libraries/fat_sd/ff.c **** #endif
2783:Libraries/fat_sd/ff.c **** 		if (res == FR_OK) {					/* The object is accessible */
2784:Libraries/fat_sd/ff.c **** 			dir = dj.dir;
2785:Libraries/fat_sd/ff.c **** 			if (!dir) {
2786:Libraries/fat_sd/ff.c **** 				res = FR_INVALID_NAME;		/* Cannot remove the start directory */
2787:Libraries/fat_sd/ff.c **** 			} else {
2788:Libraries/fat_sd/ff.c **** 				if (dir[DIR_Attr] & AM_RDO)
2789:Libraries/fat_sd/ff.c **** 					res = FR_DENIED;		/* Cannot remove R/O object */
2790:Libraries/fat_sd/ff.c **** 			}
2791:Libraries/fat_sd/ff.c **** 			dclst = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
2792:Libraries/fat_sd/ff.c **** 			if (res == FR_OK && (dir[DIR_Attr] & AM_DIR)) {	/* Is it a sub-dir? */
2793:Libraries/fat_sd/ff.c **** 				if (dclst < 2) {
2794:Libraries/fat_sd/ff.c **** 					res = FR_INT_ERR;
2795:Libraries/fat_sd/ff.c **** 				} else {
2796:Libraries/fat_sd/ff.c **** 					mem_cpy(&sdj, &dj, sizeof(DIR));	/* Check if the sub-dir is empty or not */
2797:Libraries/fat_sd/ff.c **** 					sdj.sclust = dclst;
2798:Libraries/fat_sd/ff.c **** 					res = dir_sdi(&sdj, 2);		/* Exclude dot entries */
2799:Libraries/fat_sd/ff.c **** 					if (res == FR_OK) {
2800:Libraries/fat_sd/ff.c **** 						res = dir_read(&sdj);
2801:Libraries/fat_sd/ff.c **** 						if (res == FR_OK			/* Not empty dir */
2802:Libraries/fat_sd/ff.c **** #if _FS_RPATH
2803:Libraries/fat_sd/ff.c **** 						|| dclst == sdj.fs->cdir	/* Current dir */
2804:Libraries/fat_sd/ff.c **** #endif
2805:Libraries/fat_sd/ff.c **** 						) res = FR_DENIED;
2806:Libraries/fat_sd/ff.c **** 						if (res == FR_NO_FILE) res = FR_OK;	/* Empty */
2807:Libraries/fat_sd/ff.c **** 					}
2808:Libraries/fat_sd/ff.c **** 				}
2809:Libraries/fat_sd/ff.c **** 			}
2810:Libraries/fat_sd/ff.c **** 			if (res == FR_OK) {
2811:Libraries/fat_sd/ff.c **** 				res = dir_remove(&dj);		/* Remove the directory entry */
2812:Libraries/fat_sd/ff.c **** 				if (res == FR_OK) {
2813:Libraries/fat_sd/ff.c **** 					if (dclst)				/* Remove the cluster chain if exist */
2814:Libraries/fat_sd/ff.c **** 						res = remove_chain(dj.fs, dclst);
2815:Libraries/fat_sd/ff.c **** 					if (res == FR_OK) res = sync(dj.fs);
2816:Libraries/fat_sd/ff.c **** 				}
2817:Libraries/fat_sd/ff.c **** 			}
2818:Libraries/fat_sd/ff.c **** 		}
2819:Libraries/fat_sd/ff.c **** 		FREE_BUF();
2820:Libraries/fat_sd/ff.c **** 	}
2821:Libraries/fat_sd/ff.c **** 	LEAVE_FF(dj.fs, res);
2822:Libraries/fat_sd/ff.c **** }
2823:Libraries/fat_sd/ff.c **** 
2824:Libraries/fat_sd/ff.c **** 
2825:Libraries/fat_sd/ff.c **** 
2826:Libraries/fat_sd/ff.c **** 
2827:Libraries/fat_sd/ff.c **** /*-----------------------------------------------------------------------*/
2828:Libraries/fat_sd/ff.c **** /* Create a Directory                                                    */
2829:Libraries/fat_sd/ff.c **** /*-----------------------------------------------------------------------*/
2830:Libraries/fat_sd/ff.c **** 
2831:Libraries/fat_sd/ff.c **** FRESULT f_mkdir (
2832:Libraries/fat_sd/ff.c **** 	const TCHAR *path		/* Pointer to the directory path */
2833:Libraries/fat_sd/ff.c **** )
2834:Libraries/fat_sd/ff.c **** {
2835:Libraries/fat_sd/ff.c **** 	FRESULT res;
2836:Libraries/fat_sd/ff.c **** 	DIR dj;
2837:Libraries/fat_sd/ff.c **** 	BYTE *dir, n;
2838:Libraries/fat_sd/ff.c **** 	DWORD dsc, dcl, pcl, tim = get_fattime();
2839:Libraries/fat_sd/ff.c **** 	DEF_NAMEBUF;
2840:Libraries/fat_sd/ff.c **** 
2841:Libraries/fat_sd/ff.c **** 
2842:Libraries/fat_sd/ff.c **** 	res = chk_mounted(&path, &dj.fs, 1);
2843:Libraries/fat_sd/ff.c **** 	if (res == FR_OK) {
2844:Libraries/fat_sd/ff.c **** 		INIT_BUF(dj);
2845:Libraries/fat_sd/ff.c **** 		res = follow_path(&dj, path);			/* Follow the file path */
2846:Libraries/fat_sd/ff.c **** 		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
2847:Libraries/fat_sd/ff.c **** 		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NS] & NS_DOT))
2848:Libraries/fat_sd/ff.c **** 			res = FR_INVALID_NAME;
2849:Libraries/fat_sd/ff.c **** 		if (res == FR_NO_FILE) {				/* Can create a new directory */
2850:Libraries/fat_sd/ff.c **** 			dcl = create_chain(dj.fs, 0);		/* Allocate a cluster for the new directory table */
2851:Libraries/fat_sd/ff.c **** 			res = FR_OK;
2852:Libraries/fat_sd/ff.c **** 			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
2853:Libraries/fat_sd/ff.c **** 			if (dcl == 1) res = FR_INT_ERR;
2854:Libraries/fat_sd/ff.c **** 			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
2855:Libraries/fat_sd/ff.c **** 			if (res == FR_OK)					/* Flush FAT */
2856:Libraries/fat_sd/ff.c **** 				res = move_window(dj.fs, 0);
2857:Libraries/fat_sd/ff.c **** 			if (res == FR_OK) {					/* Initialize the new directory table */
2858:Libraries/fat_sd/ff.c **** 				dsc = clust2sect(dj.fs, dcl);
2859:Libraries/fat_sd/ff.c **** 				dir = dj.fs->win;
2860:Libraries/fat_sd/ff.c **** 				mem_set(dir, 0, SS(dj.fs));
2861:Libraries/fat_sd/ff.c **** 				mem_set(dir+DIR_Name, ' ', 8+3);	/* Create "." entry */
2862:Libraries/fat_sd/ff.c **** 				dir[DIR_Name] = '.';
2863:Libraries/fat_sd/ff.c **** 				dir[DIR_Attr] = AM_DIR;
2864:Libraries/fat_sd/ff.c **** 				ST_DWORD(dir+DIR_WrtTime, tim);
2865:Libraries/fat_sd/ff.c **** 				ST_WORD(dir+DIR_FstClusLO, dcl);
2866:Libraries/fat_sd/ff.c **** 				ST_WORD(dir+DIR_FstClusHI, dcl >> 16);
2867:Libraries/fat_sd/ff.c **** 				mem_cpy(dir+32, dir, 32); 			/* Create ".." entry */
2868:Libraries/fat_sd/ff.c **** 				dir[33] = '.'; pcl = dj.sclust;
2869:Libraries/fat_sd/ff.c **** 				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
2870:Libraries/fat_sd/ff.c **** 					pcl = 0;
2871:Libraries/fat_sd/ff.c **** 				ST_WORD(dir+32+DIR_FstClusLO, pcl);
2872:Libraries/fat_sd/ff.c **** 				ST_WORD(dir+32+DIR_FstClusHI, pcl >> 16);
2873:Libraries/fat_sd/ff.c **** 				for (n = dj.fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
2874:Libraries/fat_sd/ff.c **** 					dj.fs->winsect = dsc++;
2875:Libraries/fat_sd/ff.c **** 					dj.fs->wflag = 1;
2876:Libraries/fat_sd/ff.c **** 					res = move_window(dj.fs, 0);
2877:Libraries/fat_sd/ff.c **** 					if (res != FR_OK) break;
2878:Libraries/fat_sd/ff.c **** 					mem_set(dir, 0, SS(dj.fs));
2879:Libraries/fat_sd/ff.c **** 				}
2880:Libraries/fat_sd/ff.c **** 			}
2881:Libraries/fat_sd/ff.c **** 			if (res == FR_OK) res = dir_register(&dj);	/* Register the object to the directoy */
2882:Libraries/fat_sd/ff.c **** 			if (res != FR_OK) {
2883:Libraries/fat_sd/ff.c **** 				remove_chain(dj.fs, dcl);				/* Could not register, remove cluster chain */
2884:Libraries/fat_sd/ff.c **** 			} else {
2885:Libraries/fat_sd/ff.c **** 				dir = dj.dir;
2886:Libraries/fat_sd/ff.c **** 				dir[DIR_Attr] = AM_DIR;					/* Attribute */
2887:Libraries/fat_sd/ff.c **** 				ST_DWORD(dir+DIR_WrtTime, tim);			/* Created time */
2888:Libraries/fat_sd/ff.c **** 				ST_WORD(dir+DIR_FstClusLO, dcl);		/* Table start cluster */
2889:Libraries/fat_sd/ff.c **** 				ST_WORD(dir+DIR_FstClusHI, dcl >> 16);
2890:Libraries/fat_sd/ff.c **** 				dj.fs->wflag = 1;
2891:Libraries/fat_sd/ff.c **** 				res = sync(dj.fs);
2892:Libraries/fat_sd/ff.c **** 			}
2893:Libraries/fat_sd/ff.c **** 		}
2894:Libraries/fat_sd/ff.c **** 		FREE_BUF();
2895:Libraries/fat_sd/ff.c **** 	}
2896:Libraries/fat_sd/ff.c **** 
2897:Libraries/fat_sd/ff.c **** 	LEAVE_FF(dj.fs, res);
2898:Libraries/fat_sd/ff.c **** }
2899:Libraries/fat_sd/ff.c **** 
2900:Libraries/fat_sd/ff.c **** 
2901:Libraries/fat_sd/ff.c **** 
2902:Libraries/fat_sd/ff.c **** 
2903:Libraries/fat_sd/ff.c **** /*-----------------------------------------------------------------------*/
2904:Libraries/fat_sd/ff.c **** /* Change Attribute                                                      */
2905:Libraries/fat_sd/ff.c **** /*-----------------------------------------------------------------------*/
2906:Libraries/fat_sd/ff.c **** 
2907:Libraries/fat_sd/ff.c **** FRESULT f_chmod (
2908:Libraries/fat_sd/ff.c **** 	const TCHAR *path,	/* Pointer to the file path */
2909:Libraries/fat_sd/ff.c **** 	BYTE value,			/* Attribute bits */
2910:Libraries/fat_sd/ff.c **** 	BYTE mask			/* Attribute mask to change */
2911:Libraries/fat_sd/ff.c **** )
2912:Libraries/fat_sd/ff.c **** {
2913:Libraries/fat_sd/ff.c **** 	FRESULT res;
2914:Libraries/fat_sd/ff.c **** 	DIR dj;
2915:Libraries/fat_sd/ff.c **** 	BYTE *dir;
2916:Libraries/fat_sd/ff.c **** 	DEF_NAMEBUF;
2917:Libraries/fat_sd/ff.c **** 
2918:Libraries/fat_sd/ff.c **** 
2919:Libraries/fat_sd/ff.c **** 	res = chk_mounted(&path, &dj.fs, 1);
2920:Libraries/fat_sd/ff.c **** 	if (res == FR_OK) {
2921:Libraries/fat_sd/ff.c **** 		INIT_BUF(dj);
2922:Libraries/fat_sd/ff.c **** 		res = follow_path(&dj, path);		/* Follow the file path */
2923:Libraries/fat_sd/ff.c **** 		FREE_BUF();
2924:Libraries/fat_sd/ff.c **** 		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
2925:Libraries/fat_sd/ff.c **** 			res = FR_INVALID_NAME;
2926:Libraries/fat_sd/ff.c **** 		if (res == FR_OK) {
2927:Libraries/fat_sd/ff.c **** 			dir = dj.dir;
2928:Libraries/fat_sd/ff.c **** 			if (!dir) {						/* Is it a root directory? */
2929:Libraries/fat_sd/ff.c **** 				res = FR_INVALID_NAME;
2930:Libraries/fat_sd/ff.c **** 			} else {						/* File or sub directory */
2931:Libraries/fat_sd/ff.c **** 				mask &= AM_RDO|AM_HID|AM_SYS|AM_ARC;	/* Valid attribute mask */
2932:Libraries/fat_sd/ff.c **** 				dir[DIR_Attr] = (value & mask) | (dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
2933:Libraries/fat_sd/ff.c **** 				dj.fs->wflag = 1;
2934:Libraries/fat_sd/ff.c **** 				res = sync(dj.fs);
2935:Libraries/fat_sd/ff.c **** 			}
2936:Libraries/fat_sd/ff.c **** 		}
2937:Libraries/fat_sd/ff.c **** 	}
2938:Libraries/fat_sd/ff.c **** 
2939:Libraries/fat_sd/ff.c **** 	LEAVE_FF(dj.fs, res);
2940:Libraries/fat_sd/ff.c **** }
2941:Libraries/fat_sd/ff.c **** 
2942:Libraries/fat_sd/ff.c **** 
2943:Libraries/fat_sd/ff.c **** 
2944:Libraries/fat_sd/ff.c **** 
2945:Libraries/fat_sd/ff.c **** /*-----------------------------------------------------------------------*/
2946:Libraries/fat_sd/ff.c **** /* Change Timestamp                                                      */
2947:Libraries/fat_sd/ff.c **** /*-----------------------------------------------------------------------*/
2948:Libraries/fat_sd/ff.c **** 
2949:Libraries/fat_sd/ff.c **** FRESULT f_utime (
2950:Libraries/fat_sd/ff.c **** 	const TCHAR *path,	/* Pointer to the file/directory name */
2951:Libraries/fat_sd/ff.c **** 	const FILINFO *fno	/* Pointer to the time stamp to be set */
2952:Libraries/fat_sd/ff.c **** )
2953:Libraries/fat_sd/ff.c **** {
2954:Libraries/fat_sd/ff.c **** 	FRESULT res;
2955:Libraries/fat_sd/ff.c **** 	DIR dj;
2956:Libraries/fat_sd/ff.c **** 	BYTE *dir;
2957:Libraries/fat_sd/ff.c **** 	DEF_NAMEBUF;
2958:Libraries/fat_sd/ff.c **** 
2959:Libraries/fat_sd/ff.c **** 
2960:Libraries/fat_sd/ff.c **** 	res = chk_mounted(&path, &dj.fs, 1);
2961:Libraries/fat_sd/ff.c **** 	if (res == FR_OK) {
2962:Libraries/fat_sd/ff.c **** 		INIT_BUF(dj);
2963:Libraries/fat_sd/ff.c **** 		res = follow_path(&dj, path);	/* Follow the file path */
2964:Libraries/fat_sd/ff.c **** 		FREE_BUF();
2965:Libraries/fat_sd/ff.c **** 		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
2966:Libraries/fat_sd/ff.c **** 			res = FR_INVALID_NAME;
2967:Libraries/fat_sd/ff.c **** 		if (res == FR_OK) {
2968:Libraries/fat_sd/ff.c **** 			dir = dj.dir;
2969:Libraries/fat_sd/ff.c **** 			if (!dir) {					/* Root directory */
2970:Libraries/fat_sd/ff.c **** 				res = FR_INVALID_NAME;
2971:Libraries/fat_sd/ff.c **** 			} else {					/* File or sub-directory */
2972:Libraries/fat_sd/ff.c **** 				ST_WORD(dir+DIR_WrtTime, fno->ftime);
2973:Libraries/fat_sd/ff.c **** 				ST_WORD(dir+DIR_WrtDate, fno->fdate);
2974:Libraries/fat_sd/ff.c **** 				dj.fs->wflag = 1;
2975:Libraries/fat_sd/ff.c **** 				res = sync(dj.fs);
2976:Libraries/fat_sd/ff.c **** 			}
2977:Libraries/fat_sd/ff.c **** 		}
2978:Libraries/fat_sd/ff.c **** 	}
2979:Libraries/fat_sd/ff.c **** 
2980:Libraries/fat_sd/ff.c **** 	LEAVE_FF(dj.fs, res);
2981:Libraries/fat_sd/ff.c **** }
2982:Libraries/fat_sd/ff.c **** 
2983:Libraries/fat_sd/ff.c **** 
2984:Libraries/fat_sd/ff.c **** 
2985:Libraries/fat_sd/ff.c **** 
2986:Libraries/fat_sd/ff.c **** /*-----------------------------------------------------------------------*/
2987:Libraries/fat_sd/ff.c **** /* Rename File/Directory                                                 */
2988:Libraries/fat_sd/ff.c **** /*-----------------------------------------------------------------------*/
2989:Libraries/fat_sd/ff.c **** 
2990:Libraries/fat_sd/ff.c **** FRESULT f_rename (
2991:Libraries/fat_sd/ff.c **** 	const TCHAR *path_old,	/* Pointer to the old name */
2992:Libraries/fat_sd/ff.c **** 	const TCHAR *path_new	/* Pointer to the new name */
2993:Libraries/fat_sd/ff.c **** )
2994:Libraries/fat_sd/ff.c **** {
2995:Libraries/fat_sd/ff.c **** 	FRESULT res;
2996:Libraries/fat_sd/ff.c **** 	DIR djo, djn;
2997:Libraries/fat_sd/ff.c **** 	BYTE buf[21], *dir;
2998:Libraries/fat_sd/ff.c **** 	DWORD dw;
2999:Libraries/fat_sd/ff.c **** 	DEF_NAMEBUF;
3000:Libraries/fat_sd/ff.c **** 
3001:Libraries/fat_sd/ff.c **** 
3002:Libraries/fat_sd/ff.c **** 	res = chk_mounted(&path_old, &djo.fs, 1);
3003:Libraries/fat_sd/ff.c **** 	if (res == FR_OK) {
3004:Libraries/fat_sd/ff.c **** 		djn.fs = djo.fs;
3005:Libraries/fat_sd/ff.c **** 		INIT_BUF(djo);
3006:Libraries/fat_sd/ff.c **** 		res = follow_path(&djo, path_old);		/* Check old object */
3007:Libraries/fat_sd/ff.c **** 		if (_FS_RPATH && res == FR_OK && (djo.fn[NS] & NS_DOT))
3008:Libraries/fat_sd/ff.c **** 			res = FR_INVALID_NAME;
3009:Libraries/fat_sd/ff.c **** #if _FS_SHARE
3010:Libraries/fat_sd/ff.c **** 		if (res == FR_OK) res = chk_lock(&djo, 2);
3011:Libraries/fat_sd/ff.c **** #endif
3012:Libraries/fat_sd/ff.c **** 		if (res == FR_OK) {						/* Old object is found */
3013:Libraries/fat_sd/ff.c **** 			if (!djo.dir) {						/* Is root dir? */
3014:Libraries/fat_sd/ff.c **** 				res = FR_NO_FILE;
3015:Libraries/fat_sd/ff.c **** 			} else {
3016:Libraries/fat_sd/ff.c **** 				mem_cpy(buf, djo.dir+DIR_Attr, 21);		/* Save the object information except for name */
3017:Libraries/fat_sd/ff.c **** 				mem_cpy(&djn, &djo, sizeof(DIR));		/* Check new object */
3018:Libraries/fat_sd/ff.c **** 				res = follow_path(&djn, path_new);
3019:Libraries/fat_sd/ff.c **** 				if (res == FR_OK) res = FR_EXIST;			/* The new object name is already existing */
3020:Libraries/fat_sd/ff.c **** 				if (res == FR_NO_FILE) { 					/* Is it a valid path and no name collision? */
3021:Libraries/fat_sd/ff.c **** /* Start critical section that any interruption or error can cause cross-link */
3022:Libraries/fat_sd/ff.c **** 					res = dir_register(&djn);			/* Register the new entry */
3023:Libraries/fat_sd/ff.c **** 					if (res == FR_OK) {
3024:Libraries/fat_sd/ff.c **** 						dir = djn.dir;					/* Copy object information except for name */
3025:Libraries/fat_sd/ff.c **** 						mem_cpy(dir+13, buf+2, 19);
3026:Libraries/fat_sd/ff.c **** 						dir[DIR_Attr] = buf[0] | AM_ARC;
3027:Libraries/fat_sd/ff.c **** 						djo.fs->wflag = 1;
3028:Libraries/fat_sd/ff.c **** 						if (djo.sclust != djn.sclust && (dir[DIR_Attr] & AM_DIR)) {		/* Update .. entry in the direct
3029:Libraries/fat_sd/ff.c **** 							dw = clust2sect(djn.fs, (DWORD)LD_WORD(dir+DIR_FstClusHI) | LD_WORD(dir+DIR_FstClusLO));
3030:Libraries/fat_sd/ff.c **** 							if (!dw) {
3031:Libraries/fat_sd/ff.c **** 								res = FR_INT_ERR;
3032:Libraries/fat_sd/ff.c **** 							} else {
3033:Libraries/fat_sd/ff.c **** 								res = move_window(djn.fs, dw);
3034:Libraries/fat_sd/ff.c **** 								dir = djn.fs->win+32;	/* .. entry */
3035:Libraries/fat_sd/ff.c **** 								if (res == FR_OK && dir[1] == '.') {
3036:Libraries/fat_sd/ff.c **** 									dw = (djn.fs->fs_type == FS_FAT32 && djn.sclust == djn.fs->dirbase) ? 0 : djn.sclust;
3037:Libraries/fat_sd/ff.c **** 									ST_WORD(dir+DIR_FstClusLO, dw);
3038:Libraries/fat_sd/ff.c **** 									ST_WORD(dir+DIR_FstClusHI, dw >> 16);
3039:Libraries/fat_sd/ff.c **** 									djn.fs->wflag = 1;
3040:Libraries/fat_sd/ff.c **** 								}
3041:Libraries/fat_sd/ff.c **** 							}
3042:Libraries/fat_sd/ff.c **** 						}
3043:Libraries/fat_sd/ff.c **** 						if (res == FR_OK) {
3044:Libraries/fat_sd/ff.c **** 							res = dir_remove(&djo);		/* Remove old entry */
3045:Libraries/fat_sd/ff.c **** 							if (res == FR_OK)
3046:Libraries/fat_sd/ff.c **** 								res = sync(djo.fs);
3047:Libraries/fat_sd/ff.c **** 						}
3048:Libraries/fat_sd/ff.c **** 					}
3049:Libraries/fat_sd/ff.c **** /* End critical section */
3050:Libraries/fat_sd/ff.c **** 				}
3051:Libraries/fat_sd/ff.c **** 			}
3052:Libraries/fat_sd/ff.c **** 		}
3053:Libraries/fat_sd/ff.c **** 		FREE_BUF();
3054:Libraries/fat_sd/ff.c **** 	}
3055:Libraries/fat_sd/ff.c **** 	LEAVE_FF(djo.fs, res);
3056:Libraries/fat_sd/ff.c **** }
3057:Libraries/fat_sd/ff.c **** 
3058:Libraries/fat_sd/ff.c **** #endif /* !_FS_READONLY */
3059:Libraries/fat_sd/ff.c **** #endif /* _FS_MINIMIZE == 0 */
3060:Libraries/fat_sd/ff.c **** #endif /* _FS_MINIMIZE <= 1 */
3061:Libraries/fat_sd/ff.c **** #endif /* _FS_MINIMIZE <= 2 */
3062:Libraries/fat_sd/ff.c **** 
3063:Libraries/fat_sd/ff.c **** 
3064:Libraries/fat_sd/ff.c **** 
3065:Libraries/fat_sd/ff.c **** /*-----------------------------------------------------------------------*/
3066:Libraries/fat_sd/ff.c **** /* Forward data to the stream directly (available on only tiny cfg)      */
3067:Libraries/fat_sd/ff.c **** /*-----------------------------------------------------------------------*/
3068:Libraries/fat_sd/ff.c **** #if _USE_FORWARD && _FS_TINY
3069:Libraries/fat_sd/ff.c **** 
3070:Libraries/fat_sd/ff.c **** FRESULT f_forward (
3071:Libraries/fat_sd/ff.c **** 	FIL *fp, 						/* Pointer to the file object */
3072:Libraries/fat_sd/ff.c **** 	UINT (*func)(const BYTE*,UINT),	/* Pointer to the streaming function */
3073:Libraries/fat_sd/ff.c **** 	UINT btr,						/* Number of bytes to forward */
3074:Libraries/fat_sd/ff.c **** 	UINT *bf						/* Pointer to number of bytes forwarded */
3075:Libraries/fat_sd/ff.c **** )
3076:Libraries/fat_sd/ff.c **** {
3077:Libraries/fat_sd/ff.c **** 	FRESULT res;
3078:Libraries/fat_sd/ff.c **** 	DWORD remain, clst, sect;
3079:Libraries/fat_sd/ff.c **** 	UINT rcnt;
3080:Libraries/fat_sd/ff.c **** 	BYTE csect;
3081:Libraries/fat_sd/ff.c **** 
3082:Libraries/fat_sd/ff.c **** 
3083:Libraries/fat_sd/ff.c **** 	*bf = 0;	/* Initialize byte counter */
3084:Libraries/fat_sd/ff.c **** 
3085:Libraries/fat_sd/ff.c **** 	res = validate(fp->fs, fp->id);					/* Check validity of the object */
3086:Libraries/fat_sd/ff.c **** 	if (res != FR_OK) LEAVE_FF(fp->fs, res);
3087:Libraries/fat_sd/ff.c **** 	if (fp->flag & FA__ERROR)						/* Check error flag */
3088:Libraries/fat_sd/ff.c **** 		LEAVE_FF(fp->fs, FR_INT_ERR);
3089:Libraries/fat_sd/ff.c **** 	if (!(fp->flag & FA_READ))						/* Check access mode */
3090:Libraries/fat_sd/ff.c **** 		LEAVE_FF(fp->fs, FR_DENIED);
3091:Libraries/fat_sd/ff.c **** 
3092:Libraries/fat_sd/ff.c **** 	remain = fp->fsize - fp->fptr;
3093:Libraries/fat_sd/ff.c **** 	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */
3094:Libraries/fat_sd/ff.c **** 
3095:Libraries/fat_sd/ff.c **** 	for ( ;  btr && (*func)(0, 0);					/* Repeat until all data transferred or stream becomes busy */
3096:Libraries/fat_sd/ff.c **** 		fp->fptr += rcnt, *bf += rcnt, btr -= rcnt) {
3097:Libraries/fat_sd/ff.c **** 		csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
3098:Libraries/fat_sd/ff.c **** 		if ((fp->fptr % SS(fp->fs)) == 0) {			/* On the sector boundary? */
3099:Libraries/fat_sd/ff.c **** 			if (!csect) {							/* On the cluster boundary? */
3100:Libraries/fat_sd/ff.c **** 				clst = (fp->fptr == 0) ?			/* On the top of the file? */
3101:Libraries/fat_sd/ff.c **** 					fp->org_clust : get_fat(fp->fs, fp->curr_clust);
3102:Libraries/fat_sd/ff.c **** 				if (clst <= 1) ABORT(fp->fs, FR_INT_ERR);
3103:Libraries/fat_sd/ff.c **** 				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
3104:Libraries/fat_sd/ff.c **** 				fp->curr_clust = clst;				/* Update current cluster */
3105:Libraries/fat_sd/ff.c **** 			}
3106:Libraries/fat_sd/ff.c **** 		}
3107:Libraries/fat_sd/ff.c **** 		sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current data sector */
3108:Libraries/fat_sd/ff.c **** 		if (!sect) ABORT(fp->fs, FR_INT_ERR);
3109:Libraries/fat_sd/ff.c **** 		sect += csect;
3110:Libraries/fat_sd/ff.c **** 		if (move_window(fp->fs, sect))				/* Move sector window */
3111:Libraries/fat_sd/ff.c **** 			ABORT(fp->fs, FR_DISK_ERR);
3112:Libraries/fat_sd/ff.c **** 		fp->dsect = sect;
3113:Libraries/fat_sd/ff.c **** 		rcnt = SS(fp->fs) - (WORD)(fp->fptr % SS(fp->fs));	/* Forward data from sector window */
3114:Libraries/fat_sd/ff.c **** 		if (rcnt > btr) rcnt = btr;
3115:Libraries/fat_sd/ff.c **** 		rcnt = (*func)(&fp->fs->win[(WORD)fp->fptr % SS(fp->fs)], rcnt);
3116:Libraries/fat_sd/ff.c **** 		if (!rcnt) ABORT(fp->fs, FR_INT_ERR);
3117:Libraries/fat_sd/ff.c **** 	}
3118:Libraries/fat_sd/ff.c **** 
3119:Libraries/fat_sd/ff.c **** 	LEAVE_FF(fp->fs, FR_OK);
3120:Libraries/fat_sd/ff.c **** }
3121:Libraries/fat_sd/ff.c **** #endif /* _USE_FORWARD */
3122:Libraries/fat_sd/ff.c **** 
3123:Libraries/fat_sd/ff.c **** 
3124:Libraries/fat_sd/ff.c **** 
3125:Libraries/fat_sd/ff.c **** #if _USE_MKFS && !_FS_READONLY
3126:Libraries/fat_sd/ff.c **** /*-----------------------------------------------------------------------*/
3127:Libraries/fat_sd/ff.c **** /* Create File System on the Drive                                       */
3128:Libraries/fat_sd/ff.c **** /*-----------------------------------------------------------------------*/
3129:Libraries/fat_sd/ff.c **** #define N_ROOTDIR	512			/* Multiple of 32 */
3130:Libraries/fat_sd/ff.c **** #define N_FATS		1			/* 1 or 2 */
3131:Libraries/fat_sd/ff.c **** 
3132:Libraries/fat_sd/ff.c **** 
3133:Libraries/fat_sd/ff.c **** FRESULT f_mkfs (
3134:Libraries/fat_sd/ff.c **** 	BYTE drv,		/* Logical drive number */
3135:Libraries/fat_sd/ff.c **** 	BYTE sfd,		/* Partitioning rule 0:FDISK, 1:SFD */
3136:Libraries/fat_sd/ff.c **** 	UINT au			/* Allocation unit size [bytes] */
3137:Libraries/fat_sd/ff.c **** )
3138:Libraries/fat_sd/ff.c **** {
 393              	mov	r9, r0
 394              		mov	r7, r1
 395              		mov	r5, r2
 396              		.loc 1 3151 0
 397 0000 2DE9F04F 		bls	.L63
 398              	.LVL36:
3139:Libraries/fat_sd/ff.c **** 	static const WORD vst[] = { 1024,   512,  256,  128,   64,    32,   16,    8,    4,    2,   0};
3140:Libraries/fat_sd/ff.c **** 	static const WORD cst[] = {32768, 16384, 8192, 4096, 2048, 16384, 8192, 4096, 2048, 1024, 512};
3141:Libraries/fat_sd/ff.c **** 	BYTE fmt, md, *tbl;
3142:Libraries/fat_sd/ff.c **** 	DWORD n_clst, vs, n;
3143:Libraries/fat_sd/ff.c **** 	UINT as, i;
3144:Libraries/fat_sd/ff.c **** 	DWORD b_vol, b_fat, b_dir, b_data;		/* Area offset (LBA) */
3145:Libraries/fat_sd/ff.c **** 	DWORD n_vol, n_rsv, n_fat, n_dir;		/* Area size */
3146:Libraries/fat_sd/ff.c **** 	FATFS *fs;
3147:Libraries/fat_sd/ff.c **** 	DSTATUS stat;
3148:Libraries/fat_sd/ff.c **** 
3149:Libraries/fat_sd/ff.c **** 
3150:Libraries/fat_sd/ff.c **** 	/* Check mounted drive and clear work area */
3151:Libraries/fat_sd/ff.c **** 	if (drv >= _DRIVES) return FR_INVALID_DRIVE;
 399              	r0, #11
 400 0004 0128     		b	.L65
 401              	.LVL37:
 402 0006 89B0     	.L63:
 403              		.loc 1 3152 0
 404              		ldr	r3, .L156
 405 0008 8146     		ldr	r4, [r3, r0, lsl #2]
 406 000a 0F46     	.LVL38:
 407 000c 1546     		.loc 1 3153 0
 408              		cbnz	r4, .L66
 409 000e 01D9     	.LVL39:
 410              		movs	r0, #12
 411 0010 0B20     	.LVL40:
 412 0012 C1E2     		b	.L65
 413              	.LVL41:
 414              	.L66:
3152:Libraries/fat_sd/ff.c **** 	fs = FatFs[drv];
 415              	movs	r3, #0
 416 0014 A44B     		strb	r3, [r4, #0]
 417 0016 53F82040 		.loc 1 3158 0
 418              		bl	disk_initialize
3153:Libraries/fat_sd/ff.c **** 	if (!fs) return FR_NOT_ENABLED;
 419              	42:
 420 001a 0CB9     		.loc 1 3159 0
 421              		tst	r0, #1
 422 001c 0C20     	.LVL43:
 423              		beq	.L68
 424 001e BBE2     		movs	r0, #3
 425              	.LVL44:
 426              		b	.L65
3154:Libraries/fat_sd/ff.c **** 	fs->fs_type = 0;
 427              	.L68:
 428 0020 0023     		.loc 1 3160 0
 429 0022 2370     		tst	r0, #4
3155:Libraries/fat_sd/ff.c **** 	drv = LD2PD(drv);
3156:Libraries/fat_sd/ff.c **** 
3157:Libraries/fat_sd/ff.c **** 	/* Get disk statics */
3158:Libraries/fat_sd/ff.c **** 	stat = disk_initialize(drv);
 430              	q	.L70
 431 0024 FFF7FEFF 		movs	r0, #10
 432              	.LVL46:
3159:Libraries/fat_sd/ff.c **** 	if (stat & STA_NOINIT) return FR_NOT_READY;
 433              	.L65
 434 0028 10F0010F 	.LVL47:
 435              	.L70:
 436 002c 01D0     		.loc 1 3165 0
 437 002e 0320     		mov	r0, r9
 438              	.LVL48:
 439 0030 B2E2     		movs	r1, #1
 440              		add	r2, sp, #24
 441              		bl	disk_ioctl
3160:Libraries/fat_sd/ff.c **** 	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 442              	r0
 443 0032 10F0040F 		cmp	r0, #0
 444 0036 01D0     		bne	.L72
 445 0038 0A20     		ldr	r3, [sp, #24]
 446              	.LVL49:
 447 003a ADE2     		cmp	r3, #127
 448              		bls	.L72
 449              		.loc 1 3167 0
3161:Libraries/fat_sd/ff.c **** #if _MAX_SS != 512					/* Get disk sector size */
3162:Libraries/fat_sd/ff.c **** 	if (disk_ioctl(drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK || SS(fs) > _MAX_SS)
3163:Libraries/fat_sd/ff.c **** 		return FR_DISK_ERR;
3164:Libraries/fat_sd/ff.c **** #endif
3165:Libraries/fat_sd/ff.c **** 	if (disk_ioctl(drv, GET_SECTOR_COUNT, &n_vol) != RES_OK || n_vol < 128)
 450              	 #1
 451 003c 4846     		ite	ne
 452              		movne	fp, #63
 453 003e 0121     		moveq	fp, #0
 454 0040 06AA     	.LVL50:
 455 0042 FFF7FEFF 		.loc 1 3168 0
 456 0046 0646     		rsb	r1, fp, r3
 457 0048 0028     		.loc 1 3169 0
 458 004a 40F09982 		subs	r3, r5, #1
 459 004e 069B     		tst	r3, r5
 460              		.loc 1 3168 0
 461 0050 7F2B     		str	r1, [sp, #24]
 462 0052 40F29582 	.LVL51:
3166:Libraries/fat_sd/ff.c **** 		return FR_DISK_ERR;
3167:Libraries/fat_sd/ff.c **** 	b_vol = (sfd == 1) ? 0 : 63;	/* Volume start sector */
 463              	0
 464 0056 012F     		bne	.L78
 465 0058 14BF     		.loc 1 3170 0
 466 005a 4FF03F0B 		cbnz	r5, .L80
 467 005e 4FF0000B 	.L78:
 468              		.loc 1 3171 0
3168:Libraries/fat_sd/ff.c **** 	n_vol -= b_vol;
 469              	3, #2000
 470 0062 CBEB0301 		udiv	r2, r1, r3
3169:Libraries/fat_sd/ff.c **** 	if (au & (au - 1)) au = 0;		/* Check validity of the allocation unit size */
 471              	VL52:
 472 0066 6B1E     		mov	r0, r6
 473 0068 2B42     	.LVL53:
 474              		.loc 1 3172 0
 475 006a 0691     		b	.L81
 476              	.L82:
 477              		adds	r0, r0, #1
 478 006c 00D1     	.L81:
3170:Libraries/fat_sd/ff.c **** 	if (!au) {						/* AU auto selection */
 479              	 .L156+4
 480 006e 75B9     		ldrh	r3, [r3, r0, lsl #1]
 481              		cmp	r2, r3
3171:Libraries/fat_sd/ff.c **** 		vs = n_vol / (2000 / (SS(fs) / 512));
 482              	c	.L82
 483 0070 4FF4FA63 		.loc 1 3173 0
 484 0074 B1FBF3F2 		ldr	r3, .L156+8
 485              		ldrh	r5, [r3, r0, lsl #1]
 486 0078 3046     	.L80:
 487              		.loc 1 3177 0
3172:Libraries/fat_sd/ff.c **** 		for (i = 0; vs < vst[i]; i++) ;
 488              	r6, r5, #9
 489 007a 00E0     	.LVL54:
 490              		bne	.L84
 491 007c 0130     		movs	r6, #1
 492              		b	.L86
 493 007e 8B4B     	.L84:
 494 0080 33F81030 		.loc 1 3178 0
 495 0084 9A42     		cmp	r6, #128
 496 0086 F9D3     		it	cs
3173:Libraries/fat_sd/ff.c **** 		au = cst[i];
 497              	, #128
 498 0088 894B     	.L86:
 499 008a 33F81050 		.loc 1 3181 0
 500              		udiv	r2, r1, r6
3174:Libraries/fat_sd/ff.c **** 	}
3175:Libraries/fat_sd/ff.c **** 	if (_MAX_SS != 512 && au < SS(fs)) au = SS(fs);
3176:Libraries/fat_sd/ff.c **** 	au /= SS(fs);		/* Number of sectors per cluster */
3177:Libraries/fat_sd/ff.c **** 	if (au == 0) au = 1;
 501              	55:
 502 008e 6E0A     		.loc 1 3183 0
 503              		movw	r3, #4085
 504 0090 01D1     		cmp	r2, r3
 505 0092 0126     		bls	.L88
 506 0094 02E0     		.loc 1 3184 0
 507              		add	r3, r3, #61440
3178:Libraries/fat_sd/ff.c **** 	if (au > 128) au = 128;
 508              	, r3
 509 0096 802E     		bhi	.L90
 510 0098 28BF     		b	.L91
 511 009a 8026     	.L88:
 512              		.loc 1 3192 0
3179:Libraries/fat_sd/ff.c **** 
3180:Libraries/fat_sd/ff.c **** 	/* Pre-compute number of clusters and FAT syb-type */
3181:Libraries/fat_sd/ff.c **** 	n_clst = n_vol / au;
 513              		r3, #3
 514 009c B1FBF6F2 		mul	r3, r2, r3
 515              		adds	r3, r3, #1
3182:Libraries/fat_sd/ff.c **** 	fmt = FS_FAT12;
3183:Libraries/fat_sd/ff.c **** 	if (n_clst >= MIN_FAT16) fmt = FS_FAT16;
 516              	rs	r3, r3, #1
 517 00a0 40F6F573 		adds	r3, r3, #3
 518 00a4 9A42     	.LVL56:
 519 00a6 04D9     		movs	r2, #1
3184:Libraries/fat_sd/ff.c **** 	if (n_clst >= MIN_FAT32) fmt = FS_FAT32;
 520              	57:
 521 00a8 03F57043 		b	.L150
 522 00ac 9A42     	.LVL58:
 523 00ae 08D8     	.L90:
 524 00b0 6EE2     		.loc 1 3188 0
 525              		lsls	r3, r2, #2
3185:Libraries/fat_sd/ff.c **** 
3186:Libraries/fat_sd/ff.c **** 	/* Determine offset and size of FAT structure */
3187:Libraries/fat_sd/ff.c **** 	if (fmt == FS_FAT32) {
3188:Libraries/fat_sd/ff.c **** 		n_fat = ((n_clst * 4) + 8 + SS(fs) - 1) / SS(fs);
3189:Libraries/fat_sd/ff.c **** 		n_rsv = 32;
3190:Libraries/fat_sd/ff.c **** 		n_dir = 0;
3191:Libraries/fat_sd/ff.c **** 	} else {
3192:Libraries/fat_sd/ff.c **** 		n_fat = (fmt == FS_FAT12) ? (n_clst * 3 + 1) / 2 + 3 : (n_clst * 2) + 4;
 526              	3, r3, #512
 527 00b2 0323     		adds	r3, r3, #7
 528 00b4 02FB03F3 		lsr	r8, r3, #9
 529 00b8 0133     	.LVL59:
 530 00ba 5B08     		movs	r2, #3
 531 00bc 0333     	.LVL60:
 532              		movs	r3, #0
 533 00be 0122     		mov	sl, #32
 534              	.LVL61:
 535 00c0 0CE0     		str	r3, [sp, #16]
 536              	.LVL62:
 537              		str	r2, [sp, #4]
 538              	.LVL63:
 539 00c2 9300     		b	.L93
 540 00c4 03F50073 	.LVL64:
 541 00c8 0733     	.L150:
 542 00ca 4FEA5328 		.loc 1 3193 0
 543              		add	r3, r3, #508
 544 00ce 0322     	.LVL65:
 545              		adds	r3, r3, #3
 546 00d0 0023     		lsr	r8, r3, #9
 547 00d2 4FF0200A 	.LVL66:
 548              		movs	r3, #32
 549 00d6 0493     		.loc 1 3192 0
 550              		str	r2, [sp, #4]
 551 00d8 0192     	.LVL67:
 552              		.loc 1 3193 0
 553 00da 09E0     		mov	sl, #1
 554              	.LVL68:
 555              		str	r3, [sp, #16]
3193:Libraries/fat_sd/ff.c **** 		n_fat = (n_fat + SS(fs) - 1) / SS(fs);
 556              	add	r2, sl, fp
 557 00dc 03F5FE73 		str	r2, [sp, #12]
 558              	.LVL70:
 559 00e0 0333     		.loc 1 3199 0
 560 00e2 4FEA5328 		ldr	r2, [sp, #16]
 561              		add	r3, r2, r8
 562 00e6 2023     		ldr	r2, [sp, #12]
 563              		adds	r5, r3, r2
 564 00e8 0192     	.LVL71:
 565              		.loc 1 3200 0
 566              		adds	r3, r5, r6
 567 00ea 4FF0010A 		cmp	r1, r3
 568              		bcc	.L94
 569 00ee 0493     		.loc 1 3203 0
 570              		mov	r0, r9
 571              	.LVL72:
3194:Libraries/fat_sd/ff.c **** 		n_rsv = 1;
3195:Libraries/fat_sd/ff.c **** 		n_dir = N_ROOTDIR * 32UL / SS(fs);
3196:Libraries/fat_sd/ff.c **** 	}
3197:Libraries/fat_sd/ff.c **** 	b_fat = b_vol + n_rsv;				/* FAT area start sector */
 572              	d	r2, sp, #28
 573 00f0 0AEB0B02 		bl	disk_ioctl
 574 00f4 0392     		cmp	r0, #0
 575              		bne	.L72
3198:Libraries/fat_sd/ff.c **** 	b_dir = b_fat + n_fat * N_FATS;		/* Directory area start sector */
3199:Libraries/fat_sd/ff.c **** 	b_data = b_dir + n_dir;				/* Data area start sector */
 576              	c 1 3204 0
 577 00f6 049A     		ldr	r2, [sp, #28]
 578 00f8 02EB0803 	.LVL73:
 579 00fc 039A     		subs	r3, r2, #1
 580 00fe 9D18     		cmp	r3, #32768
 581              		bcs	.L94
3200:Libraries/fat_sd/ff.c **** 	if (n_vol < b_data + au) return FR_MKFS_ABORTED;	/* Too small volume */
 582              	1 3206 0
 583 0100 AB19     		negs	r2, r2
 584 0102 9942     		adds	r3, r3, r5
 585 0104 C0F03E82 		ands	r3, r3, r2
3201:Libraries/fat_sd/ff.c **** 
3202:Libraries/fat_sd/ff.c **** 	/* Align data start sector to erase block boundary (for flash memory media) */
3203:Libraries/fat_sd/ff.c **** 	if (disk_ioctl(drv, GET_BLOCK_SIZE, &n) != RES_OK) return FR_DISK_ERR;
 586              	s	r2, r3, r5
 587 0108 4846     		.loc 1 3207 0
 588              		ldr	r3, [sp, #4]
 589 010a 0321     		.loc 1 3206 0
 590 010c 07AA     		str	r2, [sp, #28]
 591 010e FFF7FEFF 	.LVL74:
 592 0112 0028     		.loc 1 3207 0
 593 0114 40F03482 		cmp	r3, #3
3204:Libraries/fat_sd/ff.c **** 	if (!n || n > 32768) return FR_MKFS_ABORTED;
 594              	8
 595 0118 079A     		.loc 1 3209 0
 596              		ldr	r1, [sp, #12]
 597 011a 531E     		.loc 1 3208 0
 598 011c B3F5004F 		add	sl, sl, r2
 599 0120 80F03082 		.loc 1 3209 0
3205:Libraries/fat_sd/ff.c **** 	n = (b_data + n - 1) & ~(n - 1);	/* Next nearest boundary from current data start */
3206:Libraries/fat_sd/ff.c **** 	n = (n - b_data) / N_FATS;
 600              	r1, r1, r2
 601 0124 5242     		str	r1, [sp, #12]
 602 0126 5B19     	.LVL75:
 603 0128 1340     		b	.L100
 604 012a 5A1B     	.L98:
3207:Libraries/fat_sd/ff.c **** 	if (fmt == FS_FAT32) {		/* FAT32: Move FAT start */
 605              	 1 3211 0
 606 012c 019B     		add	r8, r8, r2
 607              	.L100:
 608 012e 0792     		.loc 1 3216 0
 609              		ldr	r2, [sp, #24]
 610              		ldr	r1, [sp, #16]
 611 0130 032B     		rsb	r3, sl, r2
 612 0132 04D1     		rsb	r3, r8, r3
3208:Libraries/fat_sd/ff.c **** 		n_rsv += n;
3209:Libraries/fat_sd/ff.c **** 		b_fat += n;
 613              	, r3, r1
 614 0134 0399     		udiv	r3, r3, r6
 615              		str	r3, [sp, #20]
 616 0136 9244     	.LVL76:
 617              		.loc 1 3217 0
 618 0138 8918     		ldr	r3, [sp, #4]
 619 013a 0391     		cmp	r3, #2
 620              		bne	.L101
 621 013c 00E0     		movw	r3, #4085
 622              		b	.L152
3210:Libraries/fat_sd/ff.c **** 	} else {					/* FAT12/16: Expand FAT size */
3211:Libraries/fat_sd/ff.c **** 		n_fat += n;
 623              	r	r3, [sp, #4]
 624 013e 9044     		cmp	r3, #3
 625              		bne	.L103
3212:Libraries/fat_sd/ff.c **** 	}
3213:Libraries/fat_sd/ff.c **** 	/* b_dir and b_data are no longer used below */
3214:Libraries/fat_sd/ff.c **** 
3215:Libraries/fat_sd/ff.c **** 	/* Determine number of cluster and final check of validity of the FAT sub-type */
3216:Libraries/fat_sd/ff.c **** 	n_clst = (n_vol - n_rsv - n_fat * N_FATS - n_dir) / au;
 626              	vw	r3, #65525
 627 0140 069A     	.L152:
 628 0142 0499     		ldr	r1, [sp, #20]
 629 0144 CAEB0203 		cmp	r1, r3
 630 0148 C8EB0303 		bls	.L94
 631 014c 5B1A     	.L103:
 632 014e B3FBF6F3 		.loc 1 3222 0
 633 0152 0593     		cmp	r7, #1
 634              		bne	.L105
3217:Libraries/fat_sd/ff.c **** 	if (   (fmt == FS_FAT16 && n_clst < MIN_FAT16)
 635              	 #240
 636 0154 019B     		str	r2, [sp, #8]
 637 0156 022B     	.LVL77:
 638 0158 02D1     		b	.L107
 639 015a 40F6F573 	.LVL78:
 640 015e 04E0     	.L105:
 641              	.LBB2:
 642 0160 019B     		.loc 1 3227 0
 643 0162 032B     		add	r7, r4, #52
 644 0164 05D1     	.LVL79:
 645 0166 4FF6F573 		.loc 1 3225 0
 646              		add	r5, fp, r2
 647 016a 0599     	.LVL80:
 648 016c 9942     		.loc 1 3227 0
 649 016e 40F20982 		mov	r0, r7
 650              		movs	r1, #0
3218:Libraries/fat_sd/ff.c **** 		|| (fmt == FS_FAT32 && n_clst < MIN_FAT32))
3219:Libraries/fat_sd/ff.c **** 		return FR_MKFS_ABORTED;
3220:Libraries/fat_sd/ff.c **** 
3221:Libraries/fat_sd/ff.c **** 	/* Create partition table if required */
3222:Libraries/fat_sd/ff.c **** 	if (sfd == 1) {
 651              	l	mem_set
 652 0172 012F     		.loc 1 3229 0
 653 0174 02D1     		mvn	r3, #127
 654 0176 F022     		strb	r3, [r4, #498]
 655 0178 0292     		.loc 1 3228 0
 656              		add	r0, r4, #498
 657 017a 58E0     	.LVL81:
 658              		.loc 1 3229 0
 659              		adds	r3, r3, #129
 660              		strb	r3, [r4, #499]
3223:Libraries/fat_sd/ff.c **** 		md = 0xF0;
3224:Libraries/fat_sd/ff.c **** 	} else {
3225:Libraries/fat_sd/ff.c **** 		DWORD n_disk = b_vol + n_vol;
3226:Libraries/fat_sd/ff.c **** 
3227:Libraries/fat_sd/ff.c **** 		mem_set(fs->win, 0, SS(fs));
 661              	[r0, #2]
 662 017c 04F13407 		subs	r3, r3, #1
 663              		strb	r3, [r4, #501]
 664              		.loc 1 3230 0
 665 0180 0BEB0205 		ldr	r3, .L156+12
 666              		cmp	r5, r3
 667              		bhi	.L108
 668 0184 3846     		.loc 1 3231 0
 669 0186 0021     		movw	r3, #16065
 670 0188 4FF40072 		udiv	r3, r5, r3
 671 018c FFF7FEFF 	.LVL82:
3228:Libraries/fat_sd/ff.c **** 		tbl = fs->win+MBR_Table;
3229:Libraries/fat_sd/ff.c **** 		ST_DWORD(tbl, 0x00010180);		/* Partition start in CHS */
 672              	2 0
 673 0190 6FF07F03 		strb	r3, [r4, #505]
 674 0194 84F8F231 		.loc 1 3233 0
 675              		lsrs	r3, r3, #2
 676 0198 04F5F970 	.LVL83:
 677              		orr	r3, r3, #63
 678              		strb	r3, [r0, #6]
 679 019c 8133     		b	.L110
 680 019e 84F8F331 	.LVL84:
 681 01a2 8370     	.L108:
 682 01a4 013B     		.loc 1 3235 0
 683 01a6 84F8F531 		mov	r3, #-1
3230:Libraries/fat_sd/ff.c **** 		if (n_disk < 63UL * 255 * 1024) {	/* Partition end in CHS */
 684              	0, #6]
 685 01aa 424B     		strb	r3, [r4, #505]
 686 01ac 9D42     	.L110:
 687 01ae 0AD8     		.loc 1 3237 0
3231:Libraries/fat_sd/ff.c **** 			n_disk = n_disk / 63 / 255;
 688              		r3, #1
 689 01b0 43F6C163 		strb	r3, [r0, #5]
 690 01b4 B5FBF3F3 		.loc 1 3238 0
 691              		ldr	r3, [sp, #4]
3232:Libraries/fat_sd/ff.c **** 			tbl[7] = (BYTE)n_disk;
 692              		r3, #3
 693 01b8 84F8F931 		beq	.L111
3233:Libraries/fat_sd/ff.c **** 			tbl[6] = (BYTE)((n_disk >> 2) | 63);
 694              	loc 1 3239 0
 695 01bc 9B08     		ldr	r3, [sp, #24]
 696              		cmp	r3, #65536
 697 01be 43F03F03 		ite	cs
 698 01c2 8371     		movcs	r3, #6
 699 01c4 04E0     		movcc	r3, #4
 700              		b	.L153
 701              	.L111:
3234:Libraries/fat_sd/ff.c **** 		} else {
3235:Libraries/fat_sd/ff.c **** 			ST_WORD(&tbl[6], 0xFFFF);
 702              	3241 0
 703 01c6 4FF0FF33 		movs	r3, #12
 704 01ca 8371     	.L153:
 705 01cc 84F8F931 		strb	r3, [r0, #4]
 706              		.loc 1 3242 0
3236:Libraries/fat_sd/ff.c **** 		}
3237:Libraries/fat_sd/ff.c **** 		tbl[5] = 254;
 707              		r2, #0
 708 01d0 6FF00103 		movs	r3, #63
 709 01d4 4371     		strb	r3, [r0, #8]
3238:Libraries/fat_sd/ff.c **** 		if (fmt != FS_FAT32)			/* System ID */
 710              	rb	r2, [r0, #9]
 711 01d6 019B     		strb	r2, [r0, #10]
 712 01d8 032B     		strb	r2, [r0, #11]
 713 01da 06D0     		.loc 1 3243 0
3239:Libraries/fat_sd/ff.c **** 			tbl[4] = (n_vol < 0x10000) ? 0x04 : 0x06;
 714              		r3, [sp, #24]
 715 01dc 069B     		ubfx	r1, r3, #8, #8
 716 01de B3F5803F 		strb	r3, [r0, #12]
 717 01e2 2CBF     		strb	r1, [r0, #13]
 718 01e4 0623     		lsrs	r1, r3, #16
 719 01e6 0423     		lsrs	r3, r3, #24
 720 01e8 00E0     		strb	r3, [r0, #15]
 721              		.loc 1 3244 0
3240:Libraries/fat_sd/ff.c **** 		else
3241:Libraries/fat_sd/ff.c **** 			tbl[4] = 0x0c;
 722              	, #85
 723 01ea 0C23     		strb	r3, [r0, #64]
 724              		mvn	r3, #85
 725 01ec 0371     		.loc 1 3243 0
3242:Libraries/fat_sd/ff.c **** 		ST_DWORD(tbl+8, 63);			/* Partition start in LBA */
 726              	b	r1, [r0, #14]
 727 01ee 0022     		.loc 1 3244 0
 728 01f0 3F23     		strb	r3, [r0, #65]
 729 01f2 0372     		.loc 1 3245 0
 730 01f4 4272     		mov	r1, r7
 731 01f6 8272     		mov	r0, r9
 732 01f8 C272     	.LVL85:
3243:Libraries/fat_sd/ff.c **** 		ST_DWORD(tbl+12, n_vol);		/* Partition size in LBA */
 733              	3, r3, #87
 734 01fa 069B     		bl	disk_write
 735 01fc C3F30721 		cmp	r0, #0
 736 0200 0373     		bne	.L72
 737 0202 4173     		movs	r1, #248
 738 0204 190C     		str	r1, [sp, #8]
 739 0206 1B0E     	.LVL86:
 740 0208 C373     	.L107:
3244:Libraries/fat_sd/ff.c **** 		ST_WORD(tbl+64, 0xAA55);		/* Signature */
 741              	.loc 1 3251 0
 742 020a 5523     		add	r7, r4, #52
 743 020c 80F84030 	.LVL87:
 744 0210 6FF05503 		.loc 1 3252 0
 745              		movs	r1, #0
 746 0214 8173     		mov	r2, #512
 747              		mov	r0, r7
 748 0216 80F84130 		bl	mem_set
3245:Libraries/fat_sd/ff.c **** 		if (disk_write(drv, fs->win, 0, 1) != RES_OK)
 749              	3253 0
 750 021a 3946     		mvn	r3, #20
 751 021c 4846     		strb	r3, [r4, #52]
 752              		adds	r3, r3, #19
 753 021e 5733     		strb	r3, [r4, #53]
 754 0220 FFF7FEFF 		mvn	r3, #111
 755 0224 0028     		strb	r3, [r4, #54]
 756 0226 40F0AB81 		adds	r3, r3, #112
 757 022a F821     		strb	r3, [r4, #55]
 758 022c 0291     		.loc 1 3255 0
 759              		strb	r3, [r4, #63]
 760              		adds	r3, r3, #2
 761              		strb	r3, [r4, #64]
3246:Libraries/fat_sd/ff.c **** 			return FR_DISK_ERR;
3247:Libraries/fat_sd/ff.c **** 		md = 0xF8;
3248:Libraries/fat_sd/ff.c **** 	}
3249:Libraries/fat_sd/ff.c **** 
3250:Libraries/fat_sd/ff.c **** 	/* Create VBR */
3251:Libraries/fat_sd/ff.c **** 	tbl = fs->win;								/* Clear buffer */
 762              	0
 763 022e 04F13407 		ubfx	r3, sl, #8, #8
 764              		strb	r3, [r4, #67]
3252:Libraries/fat_sd/ff.c **** 	mem_set(tbl, 0, SS(fs));
 765              	oc 1 3258 0
 766 0232 0021     		movs	r3, #1
 767 0234 4FF40072 		.loc 1 3256 0
 768 0238 3846     		strb	r6, [r4, #65]
 769 023a FFF7FEFF 		.loc 1 3258 0
3253:Libraries/fat_sd/ff.c **** 	ST_DWORD(tbl+BS_jmpBoot, 0x90FEEB);			/* Boot code (jmp $, nop) */
 770              		r3, [r4, #68]
 771 023e 6FF01403 		.loc 1 3257 0
 772 0242 84F83430 		strb	sl, [r4, #66]
 773 0246 1333     		.loc 1 3259 0
 774 0248 84F83530 		ldr	r2, [sp, #4]
 775 024c 6FF06F03 		cmp	r2, #3
 776 0250 84F83630 		ite	ne
 777 0254 7033     		movne	r6, #512
 778 0256 84F83730 		moveq	r6, #0
3254:Libraries/fat_sd/ff.c **** 	as = SS(fs);								/* Sector size */
3255:Libraries/fat_sd/ff.c **** 	ST_WORD(tbl+BPB_BytsPerSec, as);
 779              	.loc 1 3260 0
 780 025a 84F83F30 		lsrs	r3, r6, #8
 781 025e 0233     		strb	r3, [r4, #70]
 782 0260 84F84030 		strb	r6, [r4, #69]
3256:Libraries/fat_sd/ff.c **** 	tbl[BPB_SecPerClus] = (BYTE)au;				/* Sectors per cluster */
3257:Libraries/fat_sd/ff.c **** 	ST_WORD(tbl+BPB_RsvdSecCnt, n_rsv);			/* Reserved sectors */
 783              	c 1 3261 0
 784 0264 CAF30723 		ldr	r2, [sp, #24]
 785 0268 84F84330 		cmp	r2, #65536
3258:Libraries/fat_sd/ff.c **** 	tbl[BPB_NumFATs] = N_FATS;					/* Number of FATs */
 786              	th	r3, r2
 787 026c 0123     		bcs	.L121
 788              		.loc 1 3262 0
 789 026e 84F84160 		lsrs	r3, r3, #8
 790              		strb	r2, [r4, #71]
 791 0272 84F84430 		strb	r3, [r4, #72]
 792              		b	.L123
 793 0276 84F842A0 	.L157:
3259:Libraries/fat_sd/ff.c **** 	as = (fmt == FS_FAT32) ? 0 : N_ROOTDIR;		/* Number of rootdir entries */
 794              	2
 795 027a 019A     	.L156:
 796 027c 032A     		.word	.LANCHOR0
 797 027e 14BF     		.word	.LANCHOR2
 798 0280 4FF40076 		.word	.LANCHOR3
 799 0284 0026     		.word	16450559
 800              	.L121:
3260:Libraries/fat_sd/ff.c **** 	ST_WORD(tbl+BPB_RootEntCnt, as);
 801              	 3264 0
 802 0286 330A     		lsrs	r3, r3, #8
 803 0288 84F84630 		strb	r3, [r4, #85]
 804 028c 84F84560 		lsrs	r3, r2, #16
3261:Libraries/fat_sd/ff.c **** 	if (n_vol < 0x10000) {						/* Number of total sectors */
 805              	b	r3, [r4, #86]
 806 0290 069A     		lsrs	r3, r2, #24
 807 0292 B2F5803F 		strb	r2, [r4, #84]
 808 0296 93B2     		strb	r3, [r4, #87]
 809 0298 0ED2     	.L123:
3262:Libraries/fat_sd/ff.c **** 		ST_WORD(tbl+BPB_TotSec16, n_vol);
 810              	 1 3266 0
 811 029a 1B0A     		ldr	r3, [sp, #8]
 812 029c 84F84720 		.loc 1 3267 0
 813 02a0 84F84830 		movs	r5, #0
 814 02a4 13E0     	.LVL89:
 815              		.loc 1 3266 0
 816 02a6 C046     		strb	r3, [r4, #73]
 817              		.loc 1 3267 0
 818 02a8 00000000 		movs	r3, #63
 819 02ac 00000000 		strb	r3, [r4, #76]
 820 02b0 00000000 		.loc 1 3268 0
 821 02b4 FF03FB00 		mov	r3, #-1
 822              		strb	r3, [r4, #78]
3263:Libraries/fat_sd/ff.c **** 	} else {
3264:Libraries/fat_sd/ff.c **** 		ST_DWORD(tbl+BPB_TotSec32, n_vol);
 823              	0
 824 02b8 1B0A     		lsr	r3, fp, #16
 825 02ba 84F85530 		strb	r3, [r4, #82]
 826 02be 130C     		lsr	r3, fp, #24
 827 02c0 84F85630 		strb	r3, [r4, #83]
 828 02c4 130E     		.loc 1 3267 0
 829 02c6 84F85420 		strb	r5, [r4, #77]
 830 02ca 84F85730 		.loc 1 3268 0
 831              		strb	r5, [r4, #79]
3265:Libraries/fat_sd/ff.c **** 	}
3266:Libraries/fat_sd/ff.c **** 	tbl[BPB_Media] = md;						/* Media descriptor */
 832              	269 0
 833 02ce 029B     		strb	fp, [r4, #80]
3267:Libraries/fat_sd/ff.c **** 	ST_WORD(tbl+BPB_SecPerTrk, 63);				/* Number of sectors per track */
 834              	trb	r5, [r4, #81]
 835 02d0 0025     		.loc 1 3270 0
 836              		bl	get_fattime
 837              		.loc 1 3271 0
 838 02d2 84F84930 		ldr	r1, [sp, #4]
 839              		.loc 1 3270 0
 840 02d6 3F23     		str	r0, [sp, #28]
 841 02d8 84F84C30 	.LVL90:
3268:Libraries/fat_sd/ff.c **** 	ST_WORD(tbl+BPB_NumHeads, 255);				/* Number of heads */
 842              	3271 0
 843 02dc 4FF0FF33 		cmp	r1, #3
 844 02e0 84F84E30 		uxth	r3, r0
3269:Libraries/fat_sd/ff.c **** 	ST_DWORD(tbl+BPB_HiddSec, b_vol);			/* Hidden sectors */
 845              	r	r2, r0, #16
 846 02e4 4FEA1B43 		lsr	r1, r0, #24
 847 02e8 84F85230 		uxth	lr, r8
 848 02ec 4FEA1B63 	.LVL91:
 849 02f0 84F85330 		bne	.L124
 850              		.loc 1 3272 0
 851 02f4 84F84D50 		lsrs	r3, r3, #8
 852              		strb	r3, [r4, #120]
 853 02f8 84F84F50 		.loc 1 3273 0
 854              		lsr	r3, lr, #8
 855 02fc 84F850B0 		strb	r3, [r4, #89]
 856 0300 84F85150 		lsr	r3, r8, #16
3270:Libraries/fat_sd/ff.c **** 	n = get_fattime();							/* Use current time as VSN */
 857              	4, #90]
 858 0304 FFF7FEFF 		lsr	r3, r8, #24
3271:Libraries/fat_sd/ff.c **** 	if (fmt == FS_FAT32) {
 859              	trb	r3, [r4, #91]
 860 0308 0199     		.loc 1 3274 0
 861              		movs	r3, #2
 862 030a 0790     		strb	r3, [r4, #96]
 863              		.loc 1 3275 0
 864              		subs	r3, r3, #1
 865 030c 0329     		strb	r3, [r4, #100]
 866 030e 83B2     		.loc 1 3276 0
 867 0310 4FEA1042 		adds	r3, r3, #5
 868 0314 4FEA1061 		strb	r3, [r4, #102]
 869 0318 1FFA88FE 		.loc 1 3277 0
 870              		mvn	r3, #127
 871 031c 34D1     		strb	r3, [r4, #116]
3272:Libraries/fat_sd/ff.c **** 		ST_DWORD(tbl+BS_VolID32, n);			/* VSN */
 872              	0
 873 031e 1B0A     		adds	r3, r3, #169
 874 0320 84F87830 		.loc 1 3272 0
3273:Libraries/fat_sd/ff.c **** 		ST_DWORD(tbl+BPB_FATSz32, n_fat);		/* Number of sectors per FAT */
 875              	rb	r0, [r4, #119]
 876 0324 4FEA1E23 		strb	r1, [r4, #122]
 877 0328 84F85930 		strb	r2, [r4, #121]
 878 032c 4FEA1843 		.loc 1 3273 0
 879 0330 84F85A30 		strb	r8, [r4, #88]
 880 0334 4FEA1863 		.loc 1 3274 0
 881 0338 84F85B30 		strb	r5, [r4, #97]
3274:Libraries/fat_sd/ff.c **** 		ST_DWORD(tbl+BPB_RootClus, 2);			/* Root directory start cluster (2) */
 882              	5, [r4, #98]
 883 033c 0223     		strb	r5, [r4, #99]
 884 033e 84F86030 		.loc 1 3275 0
3275:Libraries/fat_sd/ff.c **** 		ST_WORD(tbl+BPB_FSInfo, 1);				/* FSInfo record offset (VBR+1) */
 885              	rb	r5, [r4, #101]
 886 0342 013B     		.loc 1 3276 0
 887 0344 84F86430 		strb	r5, [r4, #103]
3276:Libraries/fat_sd/ff.c **** 		ST_WORD(tbl+BPB_BkBootSec, 6);			/* Backup boot record offset (VBR+6) */
 888              	oc 1 3278 0
 889 0348 0533     		strb	r3, [r4, #118]
 890 034a 84F86630 		.loc 1 3279 0
3277:Libraries/fat_sd/ff.c **** 		tbl[BS_DrvNum32] = 0x80;				/* Drive number */
 891              	d	r0, r4, #123
 892 034e 6FF07F03 		ldr	r1, .L158
 893 0352 84F87430 		b	.L154
3278:Libraries/fat_sd/ff.c **** 		tbl[BS_BootSig32] = 0x29;				/* Extended boot signature */
 894              	L92:
 895 0356 A933     	.L124:
 896              		.loc 1 3281 0
 897 0358 84F87700 		lsrs	r3, r3, #8
 898 035c 84F87A10 		strb	r3, [r4, #92]
 899 0360 84F87920 		.loc 1 3282 0
 900              		lsr	r3, lr, #8
 901 0364 84F85880 		strb	r3, [r4, #75]
 902              		.loc 1 3283 0
 903 0368 84F86150 		mvn	r3, #127
 904 036c 84F86250 		.loc 1 3281 0
 905 0370 84F86350 		strb	r1, [r4, #94]
 906              		.loc 1 3283 0
 907 0374 84F86550 		strb	r3, [r4, #88]
 908              		.loc 1 3285 0
 909 0378 84F86750 		ldr	r1, .L158+4
 910              		.loc 1 3284 0
 911 037c 84F87630 		adds	r3, r3, #169
3279:Libraries/fat_sd/ff.c **** 		mem_cpy(tbl+BS_VolLab32, "NO NAME    FAT32   ", 19);	/* Volume label, FAT signature */
 912              	rb	r0, [r4, #91]
 913 0380 04F17B00 		strb	r2, [r4, #93]
 914 0384 8649     		.loc 1 3282 0
 915 0386 18E0     		strb	r8, [r4, #74]
 916              		.loc 1 3284 0
 917              		strb	r3, [r4, #90]
3280:Libraries/fat_sd/ff.c **** 	} else {
3281:Libraries/fat_sd/ff.c **** 		ST_DWORD(tbl+BS_VolID, n);				/* VSN */
 918              	1 3285 0
 919 0388 1B0A     		add	r0, r4, #95
 920 038a 84F85C30 	.LVL93:
3282:Libraries/fat_sd/ff.c **** 		ST_WORD(tbl+BPB_FATSz16, n_fat);		/* Number of sectors per FAT */
 921              	54:
 922 038e 4FEA1E23 		movs	r2, #19
 923 0392 84F84B30 		bl	mem_cpy
3283:Libraries/fat_sd/ff.c **** 		tbl[BS_DrvNum] = 0x80;					/* Drive number */
 924              	oc 1 3287 0
 925 0396 6FF07F03 		movs	r3, #85
 926              		strb	r3, [r4, #562]
 927 039a 84F85E10 		mvn	r3, #85
 928              		strb	r3, [r4, #563]
 929 039e 84F85830 		.loc 1 3288 0
3284:Libraries/fat_sd/ff.c **** 		tbl[BS_BootSig] = 0x29;					/* Extended boot signature */
3285:Libraries/fat_sd/ff.c **** 		mem_cpy(tbl+BS_VolLab, "NO NAME    FAT     ", 19);	/* Volume label, FAT signature */
 930              	0, r9
 931 03a2 8049     		mov	r1, r7
 932              		mov	r2, fp
 933 03a4 A933     		adds	r3, r3, #87
 934              		bl	disk_write
 935 03a6 84F85B00 		cmp	r0, #0
 936 03aa 84F85D20 		bne	.L72
 937              		.loc 1 3290 0
 938 03ae 84F84A80 		ldr	r2, [sp, #4]
 939              		cmp	r2, #3
 940 03b2 84F85A30 		beq	.L128
 941              	.L129:
 942 03b6 04F15F00 		.loc 1 3295 0
 943              		movs	r1, #0
 944              		mov	r0, r7
 945 03ba 1322     		mov	r2, #512
 946 03bc FFF7FEFF 		bl	mem_set
3286:Libraries/fat_sd/ff.c **** 	}
3287:Libraries/fat_sd/ff.c **** 	ST_WORD(tbl+BS_55AA, 0xAA55);				/* Signature (Offset is fixed here regardless of sector size) */
 947              	dr	r3, [sp, #4]
 948 03c0 5523     		cmp	r3, #3
 949 03c2 84F83232 		bne	.L130
 950 03c6 6FF05503 		b	.L131
 951 03ca 84F83332 	.L128:
3288:Libraries/fat_sd/ff.c **** 	if (disk_write(drv, tbl, b_vol, 1) != RES_OK)	/* Original (VBR) */
 952              	 1 3291 0
 953 03ce 4846     		mov	r0, r9
 954 03d0 3946     		mov	r1, r7
 955 03d2 5A46     		add	r2, fp, #6
 956 03d4 5733     		movs	r3, #1
 957 03d6 FFF7FEFF 		bl	disk_write
 958 03da 0028     		b	.L129
 959 03dc 40F0D080 	.L130:
3289:Libraries/fat_sd/ff.c **** 		return FR_DISK_ERR;
3290:Libraries/fat_sd/ff.c **** 	if (fmt == FS_FAT32)						/* Backup (VBR+6) */
 960              	3298 0
 961 03e0 019A     		ldr	r1, [sp, #4]
 962 03e2 032A     		ldr	r3, .L158+8
 963 03e4 09D0     		ldr	r2, [sp, #8]
 964              		cmp	r1, #1
3291:Libraries/fat_sd/ff.c **** 		disk_write(drv, tbl, b_vol + 6, 1);
3292:Libraries/fat_sd/ff.c **** 
3293:Libraries/fat_sd/ff.c **** 	/* Initialize FAT area */
3294:Libraries/fat_sd/ff.c **** 	for (i = 0; i < N_FATS; i++) {
3295:Libraries/fat_sd/ff.c **** 		mem_set(tbl, 0, SS(fs));			/* 1st sector of the FAT  */
 965              	e
 966 03e6 0021     		mvnne	r3, #255
 967 03e8 3846     		orrs	r3, r3, r2
 968 03ea 4FF40072 		.loc 1 3299 0
 969 03ee FFF7FEFF 		ubfx	r2, r3, #8, #8
3296:Libraries/fat_sd/ff.c **** 		n = md;								/* Media descriptor byte */
3297:Libraries/fat_sd/ff.c **** 		if (fmt != FS_FAT32) {
 970              	 1 3298 0
 971 03f2 019B     		str	r3, [sp, #28]
 972 03f4 032B     	.LVL94:
 973 03f6 08D1     		.loc 1 3299 0
 974 03f8 1DE0     		strb	r3, [r4, #52]
 975              		strb	r2, [r4, #53]
 976              		lsrs	r2, r3, #16
 977 03fa 4846     		lsrs	r3, r3, #24
 978 03fc 3946     		strb	r2, [r4, #54]
 979 03fe 0BF10602 		strb	r3, [r4, #55]
 980 0402 0123     		b	.L135
 981 0404 FFF7FEFF 	.L131:
 982 0408 EDE7     		.loc 1 3301 0
 983              		ldr	r1, [sp, #8]
3298:Libraries/fat_sd/ff.c **** 			n |= (fmt == FS_FAT12) ? 0x00FFFF00 : 0xFFFFFF00;
 984              	+12
 985 040a 0199     		orr	r3, r1, r3
 986 040c 664B     		.loc 1 3302 0
 987 040e 029A     		ubfx	r2, r3, #8, #8
 988 0410 0129     		.loc 1 3301 0
 989 0412 18BF     		str	r3, [sp, #28]
 990 0414 6FF0FF03 	.LVL95:
 991 0418 1343     		.loc 1 3302 0
3299:Libraries/fat_sd/ff.c **** 			ST_DWORD(tbl+0, n);				/* Reserve cluster #0-1 (FAT12/16) */
 992              	, [r4, #52]
 993 041a C3F30722 		strb	r2, [r4, #53]
 994              		lsrs	r2, r3, #16
 995 041e 0793     		lsrs	r3, r3, #24
 996              		strb	r2, [r4, #54]
 997              		strb	r3, [r4, #55]
 998 0420 84F83430 		.loc 1 3303 0
 999 0424 84F83520 		movs	r2, #15
 1000 0428 1A0C     		mov	r3, #-1
 1001 042a 1B0E     		strb	r3, [r4, #56]
 1002 042c 84F83620 		strb	r3, [r4, #57]
 1003 0430 84F83730 		strb	r3, [r4, #58]
 1004 0434 23E0     		strb	r2, [r4, #59]
 1005              		.loc 1 3304 0
3300:Libraries/fat_sd/ff.c **** 		} else {
3301:Libraries/fat_sd/ff.c **** 			n |= 0x0FFFFF00;
 1006              	 #60]
 1007 0436 0299     		strb	r3, [r4, #61]
 1008 0438 5C4B     		strb	r3, [r4, #62]
 1009 043a 41EA0303 		strb	r2, [r4, #63]
3302:Libraries/fat_sd/ff.c **** 			ST_DWORD(tbl+0, n);				/* Reserve cluster #0-1 (FAT32) */
 1010              	5:
 1011 043e C3F30722 		.loc 1 3306 0
 1012              		mov	r1, r7
 1013 0442 0793     		mov	r0, r9
 1014              		ldr	r2, [sp, #12]
 1015              		movs	r3, #1
 1016 0444 84F83430 		bl	disk_write
 1017 0448 84F83520 		mov	r1, r0
 1018 044c 1A0C     		cmp	r0, #0
 1019 044e 1B0E     		bne	.L72
 1020 0450 84F83620 		ldr	r2, [sp, #12]
 1021 0454 84F83730 		.loc 1 3308 0
3303:Libraries/fat_sd/ff.c **** 			ST_DWORD(tbl+4, 0x0FFFFFFF);
 1022              		.loc 1 3306 0
 1023 0458 0F22     		adds	r5, r2, #1
 1024 045a 4FF0FF33 	.LVL96:
 1025 045e 84F83830 		.loc 1 3308 0
 1026 0462 84F83930 		mov	r2, #512
 1027 0466 84F83A30 		bl	mem_set
 1028 046a 84F83B20 		.loc 1 3309 0
3304:Libraries/fat_sd/ff.c **** 			ST_DWORD(tbl+8, 0x0FFFFFFF);	/* Reserve cluster #2 for root dir */
 1029              	3, #1
 1030 046e 84F83C30 		b	.L155
 1031 0472 84F83D30 	.LVL97:
 1032 0476 84F83E30 	.L138:
 1033 047a 84F83F20 		.loc 1 3310 0
 1034              		mov	r0, r9
3305:Libraries/fat_sd/ff.c **** 		}
3306:Libraries/fat_sd/ff.c **** 		if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
 1035              	1, r7
 1036 047e 3946     		mov	r2, r5
 1037 0480 4846     		movs	r3, #1
 1038 0482 039A     	.LVL98:
 1039 0484 0123     		bl	disk_write
 1040 0486 FFF7FEFF 		cmp	r0, #0
 1041 048a 0146     		bne	.L72
 1042 048c 0028     		.loc 1 3309 0
 1043 048e 77D1     		ldr	r3, [sp, #28]
 1044 0490 039A     		.loc 1 3310 0
3307:Libraries/fat_sd/ff.c **** 			return FR_DISK_ERR;
3308:Libraries/fat_sd/ff.c **** 		mem_set(tbl, 0, SS(fs));		/* Fill following FAT entries with zero */
 1045              	r5, #1
 1046 0492 3846     		.loc 1 3309 0
 1047              		adds	r3, r3, #1
 1048 0494 551C     	.L155:
 1049              		str	r3, [sp, #28]
 1050              	.LVL99:
 1051 0496 4FF40072 		ldr	r3, [sp, #28]
 1052 049a FFF7FEFF 		cmp	r3, r8
3309:Libraries/fat_sd/ff.c **** 		for (n = 1; n < n_fat; n++) {	/* This loop may take a time on FAT32 volume due to many single sec
 1053              	38
 1054 049e 0123     	.LVL100:
 1055 04a0 0AE0     		b	.L140
 1056              	.LVL101:
 1057              	.L141:
3310:Libraries/fat_sd/ff.c **** 			if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
 1058              	r6, [sp, #16]
 1059 04a2 4846     	.LVL102:
 1060 04a4 3946     	.L142:
 1061 04a6 2A46     		.loc 1 3316 0
 1062 04a8 0123     		ldr	r3, [sp, #16]
 1063              		str	r3, [sp, #28]
 1064 04aa FFF7FEFF 	.LVL103:
 1065 04ae 0028     		.loc 1 3317 0
 1066 04b0 66D1     		b	.L143
 1067              	.LVL104:
 1068 04b2 079B     	.L144:
 1069              		.loc 1 3318 0
 1070 04b4 0135     		mov	r0, r9
 1071              		mov	r1, r7
 1072 04b6 0133     		mov	r2, r5
 1073              		movs	r3, #1
 1074 04b8 0793     		bl	disk_write
 1075              		cmp	r0, #0
 1076 04ba 079B     		bne	.L72
 1077 04bc 4345     		adds	r5, r5, #1
 1078 04be F0D3     	.LVL105:
 1079              	.L143:
 1080 04c0 62E0     		.loc 1 3317 0
 1081              		ldr	r6, [sp, #28]
 1082              	.LVL106:
 1083 04c2 0496     		subs	r3, r6, #1
 1084              		str	r3, [sp, #28]
 1085              	.LVL107:
3311:Libraries/fat_sd/ff.c **** 				return FR_DISK_ERR;
3312:Libraries/fat_sd/ff.c **** 		}
3313:Libraries/fat_sd/ff.c **** 	}
3314:Libraries/fat_sd/ff.c **** 
3315:Libraries/fat_sd/ff.c **** 	/* Initialize root directory */
3316:Libraries/fat_sd/ff.c **** 	n = (fmt == FS_FAT32) ? as : n_dir;
 1086              	 1 3323 0
 1087 04c4 049B     		ldr	r1, [sp, #4]
 1088 04c6 0793     		cmp	r1, #3
 1089              		bne	.L147
3317:Libraries/fat_sd/ff.c **** 	while (n--) {
 1090              	c 1 3324 0
 1091 04c8 08E0     		movs	r3, #85
 1092              		strb	r3, [r4, #562]
 1093              		mvn	r3, #85
3318:Libraries/fat_sd/ff.c **** 		if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
 1094              	b	r3, [r4, #563]
 1095 04ca 4846     		.loc 1 3325 0
 1096 04cc 3946     		adds	r3, r3, #168
 1097 04ce 2A46     		strb	r3, [r4, #52]
 1098 04d0 0123     		strb	r3, [r4, #53]
 1099 04d2 FFF7FEFF 		adds	r1, r1, #94
 1100 04d6 0028     		movs	r2, #65
 1101 04d8 52D1     		.loc 1 3326 0
 1102 04da 0135     		adds	r3, r3, #32
 1103              		.loc 1 3325 0
 1104              		strb	r1, [r4, #54]
 1105              		.loc 1 3326 0
 1106 04dc 079E     		strb	r3, [r4, #536]
 1107              		strb	r3, [r4, #537]
 1108 04de 731E     		strb	r1, [r4, #539]
 1109 04e0 0793     		.loc 1 3325 0
 1110              		strb	r2, [r4, #55]
 1111 04e2 002E     		.loc 1 3326 0
 1112 04e4 F1D1     		strb	r2, [r4, #538]
3319:Libraries/fat_sd/ff.c **** 			return FR_DISK_ERR;
3320:Libraries/fat_sd/ff.c **** 	}
3321:Libraries/fat_sd/ff.c **** 
3322:Libraries/fat_sd/ff.c **** 	/* Create FSInfo record if needed */
3323:Libraries/fat_sd/ff.c **** 	if (fmt == FS_FAT32) {
 1113              		r2, [sp, #20]
 1114 04e6 0199     		.loc 1 3329 0
 1115 04e8 0329     		mov	r1, r7
 1116 04ea 40D1     		.loc 1 3327 0
3324:Libraries/fat_sd/ff.c **** 		ST_WORD(tbl+BS_55AA, 0xAA55);
 1117              	s	r3, r2, #1
 1118 04ec 5523     		ubfx	r2, r3, #8, #8
 1119 04ee 84F83232 		strb	r3, [r4, #540]
 1120 04f2 6FF05503 		strb	r2, [r4, #541]
 1121 04f6 84F83332 		lsrs	r2, r3, #16
3325:Libraries/fat_sd/ff.c **** 		ST_DWORD(tbl+FSI_LeadSig, 0x41615252);
 1122              		r3, r3, #24
 1123 04fa A833     		strb	r3, [r4, #543]
 1124 04fc 84F83430 		.loc 1 3328 0
 1125 0500 84F83530 		mov	r3, #-1
 1126 0504 5E31     		.loc 1 3327 0
 1127 0506 4122     		strb	r2, [r4, #542]
3326:Libraries/fat_sd/ff.c **** 		ST_DWORD(tbl+FSI_StrucSig, 0x61417272);
 1128              	1 3328 0
 1129 0508 2033     		strb	r3, [r4, #544]
 1130              		strb	r3, [r4, #545]
 1131 050a 84F83610 		strb	r3, [r4, #546]
 1132              		strb	r3, [r4, #547]
 1133 050e 84F81832 		.loc 1 3329 0
 1134 0512 84F81932 		add	r2, fp, #1
 1135 0516 84F81B12 		adds	r3, r3, #2
 1136              		mov	r0, r9
 1137 051a 84F83720 		bl	disk_write
 1138              		.loc 1 3330 0
 1139 051e 84F81A22 		mov	r0, r9
3327:Libraries/fat_sd/ff.c **** 		ST_DWORD(tbl+FSI_Free_Count, n_clst - 1);
 1140              		add	r2, fp, #7
 1141 0522 059A     		movs	r3, #1
3328:Libraries/fat_sd/ff.c **** 		ST_DWORD(tbl+FSI_Nxt_Free, 0xFFFFFFFF);
3329:Libraries/fat_sd/ff.c **** 		disk_write(drv, tbl, b_vol + 1, 1);	/* Original (VBR+1) */
 1142              	l	disk_write
 1143 0524 3946     	.L147:
 1144              		.loc 1 3333 0
 1145 0526 531E     		mov	r0, r9
 1146 0528 C3F30722 		mov	r1, r6
 1147 052c 84F81C32 		mov	r2, r6
 1148 0530 84F81D22 		bl	disk_ioctl
 1149 0534 1A0C     		subs	r0, r0, #0
 1150 0536 1B0E     		it	ne
 1151 0538 84F81F32 		movne	r0, #1
 1152              		b	.L65
 1153 053c 4FF0FF33 	.LVL108:
 1154              	.L72:
 1155 0540 84F81E22 		movs	r0, #1
 1156              		b	.L65
 1157 0544 84F82032 	.LVL109:
 1158 0548 84F82132 	.L94:
 1159 054c 84F82232 		movs	r0, #14
 1160 0550 84F82332 	.LVL110:
 1161              		b	.L65
 1162 0554 0BF10102 	.LVL111:
 1163 0558 0233     	.L140:
 1164 055a 4846     		.loc 1 3316 0
 1165 055c FFF7FEFF 		ldr	r3, [sp, #4]
3330:Libraries/fat_sd/ff.c **** 		disk_write(drv, tbl, b_vol + 7, 1);	/* Backup  (VBR+7) */
 1166              	q	.L141
 1167 0560 4846     		b	.L142
 1168 0562 3946     	.LVL113:
 1169 0564 0BF10702 	.L91:
 1170 0568 0123     		.loc 1 3192 0
 1171 056a FFF7FEFF 		lsls	r3, r2, #1
 1172              		adds	r3, r3, #4
3331:Libraries/fat_sd/ff.c **** 	}
3332:Libraries/fat_sd/ff.c **** 
3333:Libraries/fat_sd/ff.c **** 	return (disk_ioctl(drv, CTRL_SYNC, (void*)0) == RES_OK) ? FR_OK : FR_DISK_ERR;
 1173              	:
 1174 056e 4846     		movs	r2, #2
 1175 0570 3146     	.LVL115:
 1176 0572 3246     		b	.L150
 1177 0574 FFF7FEFF 	.LVL116:
 1178 0578 0038     	.L65:
 1179 057a 18BF     		.loc 1 3334 0
 1180 057c 0120     		add	sp, sp, #36
 1181 057e 0BE0     		pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 1182              	.L159:
 1183              		.align	2
 1184 0580 0120     	.L158:
 1185 0582 09E0     		.word	.LC0
 1186              		.word	.LC1
 1187              		.word	16776960
 1188 0584 0E20     		.word	268435200
 1189              	.LFE49:
 1191              		.section	.text.validate,"ax",%progbits
 1192              		.align	2
 1193              		.thumb
 1194 0588 019B     		.thumb_func
 1196 058a 032B     	validate:
 1197 058c 99D0     	.LFB29:
 1198 058e 99E7     		.loc 1 1822 0
 1199              		@ args = 0, pretend = 0, frame = 0
 1200              		@ frame_needed = 0, uses_anonymous_args = 0
 1201              	.LVL117:
 1202 0590 5300     		push	{r4, lr}
 1203 0592 0433     	.LCFI6:
 1204              		.loc 1 1823 0
 1205 0594 0222     		cbz	r0, .L161
 1206              		ldrb	r3, [r0, #0]	@ zero_extendqisi2
 1207 0596 A1E5     		cbz	r3, .L161
 1208              		ldrh	r3, [r0, #6]
 1209              		cmp	r3, r1
3334:Libraries/fat_sd/ff.c **** }
 1210              	r0, #1]	@ zero_extendqisi2
 1211 0598 09B0     	.LVL118:
 1212 059a BDE8F08F 		bl	disk_status
 1213              	.LVL119:
 1214 059e C046     		ands	r0, r0, #1
 1215              		it	ne
 1216 05a0 00000000 		movne	r0, #3
 1217 05a4 14000000 		b	.L167
 1218 05a8 00FFFF00 	.LVL120:
 1219 05ac 00FFFF0F 	.L161:
 1220              		movs	r0, #9
 1221              	.LVL121:
 1222              	.L167:
 1223              		.loc 1 1832 0
 1224              		pop	{r4, pc}
 1225              	.LFE29:
 1227              		.section	.text.check_fs,"ax",%progbits
 1228              		.align	2
 1229              		.thumb
 1230              		.thumb_func
 1232              	check_fs:
 1233 0000 10B5     	.LFB27:
 1234              		.loc 1 1631 0
 1235              		@ args = 0, pretend = 0, frame = 0
 1236 0002 60B1     		@ frame_needed = 0, uses_anonymous_args = 0
 1237 0004 0378     	.LVL122:
 1238 0006 53B1     		push	{r4, lr}
 1239 0008 C388     	.LCFI7:
 1240 000a 8B42     		.loc 1 1631 0
 1241 000c 07D1     		mov	r4, r0
 1242              		mov	r2, r1
 1243 000e 4078     		.loc 1 1632 0
 1244              		ldrb	r0, [r0, #1]	@ zero_extendqisi2
 1245 0010 FFF7FEFF 	.LVL123:
 1246              		add	r1, r4, #52
 1247 0014 10F00100 	.LVL124:
 1248 0018 18BF     		movs	r3, #1
 1249 001a 0320     		bl	disk_read
 1250 001c 00E0     	.LVL125:
 1251              		mov	r1, r0
 1252              		cbz	r0, .L170
 1253 001e 0920     		movs	r0, #3
 1254              		b	.L172
 1255              	.L170:
 1256              		.loc 1 1634 0
 1257 0020 10BD     		ldrb	r3, [r4, #563]	@ zero_extendqisi2
 1258              		ldrb	r2, [r4, #562]	@ zero_extendqisi2
 1259              		orr	r2, r2, r3, lsl #8
 1260 0022 C046     		movw	r3, #43605
 1261              		cmp	r2, r3
 1262              		beq	.L173
 1263              		movs	r0, #2
 1264              		b	.L172
 1265              	.L173:
 1266              		.loc 1 1637 0
 1267              		ldrb	r3, [r4, #108]	@ zero_extendqisi2
 1268              		ldrb	r2, [r4, #109]	@ zero_extendqisi2
 1269              		lsls	r3, r3, #16
 1270              		orr	r3, r3, r2, lsl #24
 1271 0000 10B5     		ldrb	r2, [r4, #106]	@ zero_extendqisi2
 1272              		ldr	r0, .L178
 1273              		orrs	r3, r3, r2
 1274 0002 0446     		ldrb	r2, [r4, #107]	@ zero_extendqisi2
 1275 0004 0A46     		orr	r3, r3, r2, lsl #8
 1276              		bic	r3, r3, #-16777216
 1277 0006 4078     		cmp	r3, r0
 1278              		bne	.L175
 1279 0008 04F13401 		mov	r0, r1
 1280              		b	.L172
 1281 000c 0123     	.L175:
 1282 000e FFF7FEFF 		ldrb	r3, [r4, #136]	@ zero_extendqisi2
 1283              		ldrb	r2, [r4, #137]	@ zero_extendqisi2
 1284 0012 0146     		lsls	r3, r3, #16
 1285 0014 08B1     		orr	r3, r3, r2, lsl #24
 1286 0016 0320     		ldrb	r2, [r4, #134]	@ zero_extendqisi2
 1287 0018 33E0     		orrs	r3, r3, r2
 1288              		ldrb	r2, [r4, #135]	@ zero_extendqisi2
 1289              		orr	r3, r3, r2, lsl #8
 1290 001a 94F83332 		bic	r3, r3, #-16777216
 1291 001e 94F83222 		subs	r0, r3, r0
 1292 0022 42EA0322 		it	ne
 1293 0026 4AF65523 		movne	r0, #1
 1294 002a 9A42     	.L172:
 1295 002c 01D0     		.loc 1 1643 0
 1296 002e 0220     		pop	{r4, pc}
 1297 0030 27E0     	.L179:
 1298              		.align	2
 1299              	.L178:
 1300 0032 94F86C30 		.word	5521734
 1301 0036 94F86D20 	.LFE27:
 1303 003c 43EA0263 		.section	.text.chk_mounted,"ax",%progbits
 1304 0040 94F86A20 		.align	2
 1305 0044 0F48     		.thumb
 1306 0046 1343     		.thumb_func
 1308 004c 43EA0223 	chk_mounted:
 1309 0050 23F07F43 	.LFB28:
 1310 0054 8342     		.loc 1 1658 0
 1311 0056 01D1     		@ args = 0, pretend = 0, frame = 0
 1312 0058 0846     		@ frame_needed = 0, uses_anonymous_args = 0
 1313 005a 12E0     	.LVL126:
 1314              		push	{r4, r5, r6, r7, r8, lr}
 1315 005c 94F88830 	.LCFI8:
 1316 0060 94F88920 		.loc 1 1658 0
 1317 0064 1B04     		mov	r6, r2
 1318 0066 43EA0263 		.loc 1 1664 0
 1319 006a 94F88620 		ldr	r2, [r0, #0]
 1320 006e 1343     	.LVL127:
 1321 0070 94F88720 		.loc 1 1668 0
 1322 0074 43EA0223 		ldrb	r3, [r2, #0]	@ zero_extendqisi2
 1323 0078 23F07F43 		sub	r5, r3, #48
 1324 007c 181A     	.LVL128:
 1325 007e 18BF     		.loc 1 1669 0
 1326 0080 0120     		cmp	r5, #9
 1327              		bhi	.L181
 1328              		ldrb	r3, [r2, #1]	@ zero_extendqisi2
 1329 0082 10BD     		cmp	r3, #58
 1330              		bne	.L181
 1331              		.loc 1 1670 0
 1332              		adds	r3, r2, #2
 1333 0084 46415400 		str	r3, [r0, #0]
 1334              		.loc 1 1669 0
 1335              		b	.L184
 1336              	.L181:
 1337              		.loc 1 1673 0
 1338              		ldr	r3, .L242
 1339              		ldrb	r5, [r3, #0]	@ zero_extendqisi2
 1340              	.L184:
 1341              		.loc 1 1680 0
 1342              		cmp	r5, #1
 1343              		bls	.L185
 1344              		movs	r0, #11
 1345              	.LVL129:
 1346              		b	.L187
 1347 0000 2DE9F041 	.LVL130:
 1348              	.L185:
 1349              		.loc 1 1682 0
 1350 0004 1646     		ldr	r3, .L242+4
 1351              		ldr	r4, [r3, r5, lsl #2]
 1352 0006 0268     	.LVL131:
 1353              		str	r4, [r1, #0]
 1354              		.loc 1 1683 0
 1355 0008 1378     		cbnz	r4, .L188
 1356 000a A3F13005 		movs	r0, #12
 1357              	.LVL132:
 1358              		b	.L187
 1359 000e 092D     	.LVL133:
 1360 0010 05D8     	.L188:
 1361 0012 5378     		.loc 1 1687 0
 1362 0014 3A2B     		ldrb	r3, [r4, #0]	@ zero_extendqisi2
 1363 0016 02D1     		cbz	r3, .L190
 1364              		.loc 1 1688 0
 1365 0018 931C     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 1366 001a 0360     	.LVL134:
 1367              		bl	disk_status
 1368 001c 01E0     	.LVL135:
 1369              		.loc 1 1689 0
 1370              		tst	r0, #1
 1371 001e BA4B     	.LVL136:
 1372 0020 1D78     		bne	.L190
 1373              		.loc 1 1691 0
 1374              		cmp	r6, #0
 1375 0022 012D     		beq	.L193
 1376 0024 01D9     		tst	r0, #4
 1377 0026 0B20     		bne	.L195
 1378              		b	.L193
 1379 0028 79E1     	.LVL137:
 1380              	.L190:
 1381              		.loc 1 1700 0
 1382              		movs	r3, #0
 1383 002a B84B     		.loc 1 1701 0
 1384 002c 53F82540 		uxtb	r0, r5
 1385              	.LVL138:
 1386 0030 0C60     		.loc 1 1700 0
 1387              		strb	r3, [r4, #0]
 1388 0032 0CB9     		.loc 1 1701 0
 1389 0034 0C20     		strb	r0, [r4, #1]
 1390              		.loc 1 1702 0
 1391 0036 72E1     		bl	disk_initialize
 1392              	.LVL139:
 1393              		.loc 1 1703 0
 1394              		ands	r5, r0, #1
 1395 0038 2378     	.LVL140:
 1396 003a 6BB1     		beq	.L196
 1397              		movs	r0, #3
 1398 003c 6078     	.LVL141:
 1399              		b	.L187
 1400 003e FFF7FEFF 	.LVL142:
 1401              	.L196:
 1402              		.loc 1 1710 0
 1403 0042 10F0010F 		cbz	r6, .L198
 1404              		tst	r0, #4
 1405 0046 07D1     		bne	.L195
 1406              	.L198:
 1407 0048 002E     		.loc 1 1714 0
 1408 004a 00F05B81 		mov	r0, r4
 1409 004e 10F0040F 	.LVL143:
 1410 0052 40F05581 		mov	r1, r5
 1411 0056 55E1     		bl	check_fs
 1412              		.loc 1 1715 0
 1413              		cmp	r0, #1
 1414              	.LVL144:
 1415 0058 0023     		beq	.L200
 1416              		mov	r8, r5
 1417 005a E8B2     	.LVL145:
 1418              		b	.L202
 1419              	.LVL146:
 1420 005c 2370     	.L200:
 1421              		.loc 1 1717 0
 1422 005e 6070     		add	r1, r4, #498
 1423              	.LVL147:
 1424 0060 FFF7FEFF 		.loc 1 1718 0
 1425              		ldrb	r3, [r1, #4]	@ zero_extendqisi2
 1426              		cmp	r3, #0
 1427 0064 10F00105 		beq	.L203
 1428              		.loc 1 1719 0
 1429 0068 01D0     		ldrb	r3, [r1, #10]	@ zero_extendqisi2
 1430 006a 0320     		ldrb	r2, [r4, #509]	@ zero_extendqisi2
 1431              		lsls	r3, r3, #16
 1432 006c 57E1     		orr	r3, r3, r2, lsl #24
 1433              		ldrb	r2, [r1, #8]	@ zero_extendqisi2
 1434              		.loc 1 1720 0
 1435              		mov	r0, r4
 1436 006e 1EB1     	.LVL148:
 1437 0070 10F0040F 		.loc 1 1719 0
 1438 0074 40F04481 		orrs	r3, r3, r2
 1439              		ldrb	r2, [r4, #507]	@ zero_extendqisi2
 1440              		orr	r8, r3, r2, lsl #8
 1441 0078 2046     	.LVL149:
 1442              		.loc 1 1720 0
 1443 007a 2946     		mov	r1, r8
 1444 007c FFF7FEFF 	.LVL150:
 1445              		bl	check_fs
 1446 0080 0128     	.LVL151:
 1447              	.L202:
 1448 0082 01D0     		.loc 1 1723 0
 1449 0084 A846     		cmp	r0, #3
 1450              		bne	.L205
 1451 0086 15E0     		movs	r0, #1
 1452              	.LVL152:
 1453              		b	.L187
 1454              	.LVL153:
 1455 0088 04F5F971 	.L205:
 1456              		.loc 1 1724 0
 1457              		cmp	r0, #0
 1458 008c 0B79     		bne	.L203
 1459 008e 002B     		.loc 1 1728 0
 1460 0090 00F04481 		ldrb	r2, [r4, #64]	@ zero_extendqisi2
 1461              		ldrb	r3, [r4, #63]	@ zero_extendqisi2
 1462 0094 8B7A     		orr	r3, r3, r2, lsl #8
 1463 0096 94F8FD21 		cmp	r3, #512
 1464 009a 1B04     		bne	.L203
 1465 009c 43EA0263 		.loc 1 1731 0
 1466 00a0 0A7A     		ldrb	r2, [r4, #75]	@ zero_extendqisi2
 1467              		ldrb	r3, [r4, #74]	@ zero_extendqisi2
 1468 00a2 2046     		.loc 1 1732 0
 1469              		orrs	r3, r3, r2, lsl #8
 1470              		beq	.L209
 1471 00a4 1343     		.loc 1 1731 0
 1472 00a6 94F8FB21 		uxth	r6, r3
 1473 00aa 43EA0228 	.LVL154:
 1474              		b	.L211
 1475              	.LVL155:
 1476 00ae 4146     	.L209:
 1477              		.loc 1 1732 0
 1478 00b0 FFF7FEFF 		ldrb	r3, [r4, #90]	@ zero_extendqisi2
 1479              		ldrb	r2, [r4, #91]	@ zero_extendqisi2
 1480              		lsls	r3, r3, #16
 1481              		orr	r3, r3, r2, lsl #24
 1482 00b4 0328     		ldrb	r2, [r4, #88]	@ zero_extendqisi2
 1483 00b6 01D1     		orrs	r3, r3, r2
 1484 00b8 0120     		ldrb	r2, [r4, #89]	@ zero_extendqisi2
 1485              		orr	r6, r3, r2, lsl #8
 1486 00ba 30E1     	.LVL156:
 1487              	.L211:
 1488              		.loc 1 1735 0
 1489              		ldrb	r5, [r4, #68]	@ zero_extendqisi2
 1490 00bc 0028     	.LVL157:
 1491 00be 40F02D81 		.loc 1 1733 0
 1492              		str	r6, [r4, #32]
 1493 00c2 94F84020 		.loc 1 1736 0
 1494 00c6 94F83F30 		subs	r3, r5, #1
 1495 00ca 43EA0223 		uxtb	r3, r3
 1496 00ce B3F5007F 		cmp	r3, #1
 1497 00d2 40F02381 		.loc 1 1735 0
 1498              		strb	r5, [r4, #3]
 1499 00d6 94F84B20 		.loc 1 1736 0
 1500 00da 94F84A30 		bhi	.L203
 1501              		.loc 1 1739 0
 1502 00de 53EA0223 		ldrb	r2, [r4, #65]	@ zero_extendqisi2
 1503 00e2 01D0     	.LVL158:
 1504              		strb	r2, [r4, #2]
 1505 00e4 9EB2     		.loc 1 1740 0
 1506              		cmp	r2, #0
 1507 00e6 0DE0     		beq	.L203
 1508              		subs	r3, r2, #1
 1509              		tst	r3, r2
 1510              		bne	.L203
 1511 00e8 94F85A30 		.loc 1 1742 0
 1512 00ec 94F85B20 		ldrb	r2, [r4, #70]	@ zero_extendqisi2
 1513 00f0 1B04     	.LVL159:
 1514 00f2 43EA0263 		ldrb	r3, [r4, #69]	@ zero_extendqisi2
 1515 00f6 94F85820 		orr	r0, r3, r2, lsl #8
 1516 00fa 1343     	.LVL160:
 1517 00fc 94F85920 		.loc 1 1743 0
 1518 0100 43EA0226 		tst	r0, #15
 1519              		.loc 1 1742 0
 1520              		strh	r0, [r4, #8]	@ movhi
 1521              		.loc 1 1743 0
 1522 0104 94F84450 		bne	.L203
 1523              		.loc 1 1745 0
 1524              		ldrb	r2, [r4, #72]	@ zero_extendqisi2
 1525 0108 2662     		ldrb	r3, [r4, #71]	@ zero_extendqisi2
 1526              		.loc 1 1746 0
 1527 010a 6B1E     		orrs	r2, r3, r2, lsl #8
 1528 010c DBB2     		beq	.L216
 1529 010e 012B     		.loc 1 1745 0
 1530              		uxth	r1, r2
 1531 0110 E570     	.LVL161:
 1532              		b	.L218
 1533 0112 00F20381 	.LVL162:
 1534              	.L216:
 1535 0116 94F84120 		.loc 1 1746 0
 1536              		ldrb	r3, [r4, #86]	@ zero_extendqisi2
 1537 011a A270     		ldrb	r2, [r4, #87]	@ zero_extendqisi2
 1538              		lsls	r3, r3, #16
 1539 011c 002A     		orr	r3, r3, r2, lsl #24
 1540 011e 00F0FD80 		ldrb	r2, [r4, #84]	@ zero_extendqisi2
 1541 0122 531E     		orrs	r3, r3, r2
 1542 0124 1342     		ldrb	r2, [r4, #85]	@ zero_extendqisi2
 1543 0126 40F0F980 		orr	r1, r3, r2, lsl #8
 1544              	.LVL163:
 1545 012a 94F84620 	.L218:
 1546              		.loc 1 1748 0
 1547 012e 94F84530 		ldrb	r2, [r4, #67]	@ zero_extendqisi2
 1548 0132 43EA0220 		ldrb	r3, [r4, #66]	@ zero_extendqisi2
 1549              		.loc 1 1749 0
 1550              		orrs	r3, r3, r2, lsl #8
 1551 0136 10F00F0F 		beq	.L203
 1552              		.loc 1 1737 0
 1553 013a 2081     		mul	r6, r5, r6
 1554              	.LVL164:
 1555 013c 40F0EE80 		.loc 1 1752 0
 1556              		uxth	r5, r3
 1557 0140 94F84820 	.LVL165:
 1558 0144 94F84730 		add	r3, r5, r0, lsr #4
 1559              		adds	r0, r3, r6
 1560 0148 53EA0222 	.LVL166:
 1561 014c 01D0     		.loc 1 1753 0
 1562              		cmp	r1, r0
 1563 014e 91B2     		bcc	.L203
 1564              		.loc 1 1754 0
 1565 0150 0DE0     		ldrb	r3, [r4, #2]	@ zero_extendqisi2
 1566              		subs	r2, r1, r0
 1567              		udiv	r2, r2, r3
 1568              	.LVL167:
 1569 0152 94F85630 		.loc 1 1755 0
 1570 0156 94F85720 		cmp	r2, #0
 1571 015a 1B04     		beq	.L203
 1572 015c 43EA0263 		.loc 1 1757 0
 1573 0160 94F85420 		movw	r3, #4085
 1574 0164 1343     		cmp	r2, r3
 1575 0166 94F85520 		bhi	.L222
 1576 016a 43EA0221 		movs	r7, #1
 1577              	.LVL168:
 1578              		b	.L224
 1579              	.LVL169:
 1580 016e 94F84320 	.L222:
 1581 0172 94F84230 		.loc 1 1758 0
 1582              		movw	r3, #65525
 1583 0176 53EA0223 		cmp	r2, r3
 1584 017a 00F0CF80 		ite	ls
 1585              		movls	r7, #2
 1586 017e 05FB06F6 		movhi	r7, #3
 1587              	.LVL170:
 1588              	.L224:
 1589 0182 9DB2     		.loc 1 1762 0
 1590              		add	r3, r0, r8
 1591 0184 05EB1013 		.loc 1 1761 0
 1592 0188 9819     		adds	r1, r2, #2
 1593              	.LVL171:
 1594              		.loc 1 1762 0
 1595 018a 8142     		str	r3, [r4, #44]
 1596 018c C0F0C680 		.loc 1 1764 0
 1597              		cmp	r7, #3
 1598 0190 A378     		.loc 1 1763 0
 1599 0192 0A1A     		add	r3, r8, r5
 1600 0194 B2FBF3F2 		.loc 1 1761 0
 1601              		str	r1, [r4, #28]
 1602              		.loc 1 1763 0
 1603 0198 002A     		str	r3, [r4, #36]
 1604 019a 00F0BF80 		ldrh	r2, [r4, #8]
 1605              	.LVL172:
 1606 019e 40F6F573 		.loc 1 1764 0
 1607 01a2 9A42     		bne	.L227
 1608 01a4 01D8     		.loc 1 1765 0
 1609 01a6 0127     		cmp	r2, #0
 1610              		bne	.L203
 1611 01a8 05E0     		.loc 1 1766 0
 1612              		ldrb	r3, [r4, #98]	@ zero_extendqisi2
 1613              		ldrb	r2, [r4, #99]	@ zero_extendqisi2
 1614              		lsls	r3, r3, #16
 1615 01aa 4FF6F573 		orr	r3, r3, r2, lsl #24
 1616 01ae 9A42     		ldrb	r2, [r4, #96]	@ zero_extendqisi2
 1617 01b0 94BF     		orrs	r3, r3, r2
 1618 01b2 0227     		ldrb	r2, [r4, #97]	@ zero_extendqisi2
 1619 01b4 0327     		orr	r3, r3, r2, lsl #8
 1620              		str	r3, [r4, #40]
 1621              		.loc 1 1767 0
 1622              		lsls	r2, r1, #2
 1623 01b6 00EB0803 	.LVL173:
 1624              		b	.L230
 1625 01ba 911C     	.LVL174:
 1626              	.L227:
 1627              		.loc 1 1769 0
 1628 01bc E362     		cmp	r2, #0
 1629              		beq	.L203
 1630 01be 032F     		.loc 1 1770 0
 1631              		adds	r3, r6, r3
 1632 01c0 08EB0503 		.loc 1 1771 0
 1633              		cmp	r7, #2
 1634 01c4 E161     		.loc 1 1770 0
 1635              		str	r3, [r4, #40]
 1636 01c6 6362     		.loc 1 1771 0
 1637 01c8 2289     		bne	.L232
 1638              		lsls	r2, r1, #1
 1639              	.LVL175:
 1640 01ca 13D1     		b	.L230
 1641              	.LVL176:
 1642 01cc 002A     	.L232:
 1643 01ce 40F0A580 		movs	r3, #3
 1644              		mul	r3, r1, r3
 1645 01d2 94F86230 		and	r2, r1, #1
 1646 01d6 94F86320 		add	r2, r2, r3, lsr #1
 1647 01da 1B04     	.LVL177:
 1648 01dc 43EA0263 	.L230:
 1649 01e0 94F86020 		.loc 1 1774 0
 1650 01e4 1343     		add	r3, r2, #508
 1651 01e6 94F86120 		ldr	r2, [r4, #32]
 1652 01ea 43EA0223 	.LVL178:
 1653 01ee A362     		adds	r3, r3, #3
 1654              		cmp	r2, r3, lsr #9
 1655 01f0 8A00     		bcc	.L203
 1656              		.loc 1 1779 0
 1657 01f2 0FE0     		mov	r3, #-1
 1658              		str	r3, [r4, #16]
 1659              		.loc 1 1780 0
 1660              		adds	r3, r3, #1
 1661 01f4 002A     		.loc 1 1783 0
 1662 01f6 00F09180 		cmp	r7, #3
 1663              		.loc 1 1780 0
 1664 01fa F318     		str	r3, [r4, #12]
 1665              		.loc 1 1783 0
 1666 01fc 022F     		bne	.L235
 1667              		.loc 1 1784 0
 1668 01fe A362     		strb	r3, [r4, #5]
 1669              		.loc 1 1785 0
 1670 0200 01D1     		ldrb	r2, [r4, #100]	@ zero_extendqisi2
 1671 0202 4A00     		ldrb	r3, [r4, #101]	@ zero_extendqisi2
 1672              		.loc 1 1786 0
 1673 0204 06E0     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 1674              	.LVL179:
 1675              		.loc 1 1785 0
 1676 0206 0323     		orr	r2, r2, r3, lsl #8
 1677 0208 01FB03F3 		add	r2, r8, r2
 1678 020c 01F00102 		str	r2, [r4, #20]
 1679 0210 02EB5302 		.loc 1 1786 0
 1680              		add	r1, r4, #52
 1681              		movs	r3, #1
 1682              		bl	disk_read
 1683 0214 02F5FE73 		cmp	r0, #0
 1684 0218 226A     		bne	.L235
 1685              		ldrb	r3, [r4, #563]	@ zero_extendqisi2
 1686 021a 0333     		ldrb	r2, [r4, #562]	@ zero_extendqisi2
 1687 021c B2EB532F 		orr	r2, r2, r3, lsl #8
 1688 0220 7CD3     		movw	r3, #43605
 1689              		cmp	r2, r3
 1690 0222 4FF0FF33 		bne	.L235
 1691 0226 2361     		ldrb	r3, [r4, #54]	@ zero_extendqisi2
 1692              		ldrb	r2, [r4, #55]	@ zero_extendqisi2
 1693 0228 0133     		lsls	r3, r3, #16
 1694              		orr	r3, r3, r2, lsl #24
 1695 022a 032F     		ldrb	r2, [r4, #52]	@ zero_extendqisi2
 1696              		orrs	r3, r3, r2
 1697 022c E360     		ldrb	r2, [r4, #53]	@ zero_extendqisi2
 1698              		orr	r3, r3, r2, lsl #8
 1699 022e 5AD1     		ldr	r2, .L242+8
 1700              		cmp	r3, r2
 1701 0230 6371     		bne	.L235
 1702              		ldrb	r3, [r4, #538]	@ zero_extendqisi2
 1703 0232 94F86420 		ldrb	r2, [r4, #539]	@ zero_extendqisi2
 1704 0236 94F86530 		lsls	r3, r3, #16
 1705              		orr	r3, r3, r2, lsl #24
 1706 023a 6078     		ldrb	r2, [r4, #536]	@ zero_extendqisi2
 1707              		orrs	r3, r3, r2
 1708              		ldrb	r2, [r4, #537]	@ zero_extendqisi2
 1709 023c 42EA0322 		orr	r3, r3, r2, lsl #8
 1710 0240 4244     		ldr	r2, .L242+12
 1711 0242 6261     		cmp	r3, r2
 1712              		bne	.L235
 1713 0244 04F13401 		.loc 1 1790 0
 1714 0248 0123     		ldrb	r3, [r4, #546]	@ zero_extendqisi2
 1715 024a FFF7FEFF 		ldrb	r2, [r4, #547]	@ zero_extendqisi2
 1716 024e 0028     		lsls	r3, r3, #16
 1717 0250 49D1     		orr	r3, r3, r2, lsl #24
 1718 0252 94F83332 		ldrb	r2, [r4, #544]	@ zero_extendqisi2
 1719 0256 94F83222 		orrs	r3, r3, r2
 1720 025a 42EA0322 		ldrb	r2, [r4, #545]	@ zero_extendqisi2
 1721 025e 4AF65523 		orr	r3, r3, r2, lsl #8
 1722 0262 9A42     		str	r3, [r4, #12]
 1723 0264 3FD1     		.loc 1 1791 0
 1724 0266 94F83630 		ldrb	r3, [r4, #542]	@ zero_extendqisi2
 1725 026a 94F83720 		ldrb	r2, [r4, #543]	@ zero_extendqisi2
 1726 026e 1B04     		lsls	r3, r3, #16
 1727 0270 43EA0263 		orr	r3, r3, r2, lsl #24
 1728 0274 94F83420 		ldrb	r2, [r4, #540]	@ zero_extendqisi2
 1729 0278 1343     		orrs	r3, r3, r2
 1730 027a 94F83520 		ldrb	r2, [r4, #541]	@ zero_extendqisi2
 1731 027e 43EA0223 		orr	r3, r3, r2, lsl #8
 1732 0282 234A     		str	r3, [r4, #16]
 1733 0284 9342     	.LVL180:
 1734 0286 2ED1     	.L235:
 1735 0288 94F81A32 		.loc 1 1796 0
 1736 028c 94F81B22 		ldr	r3, .L242+16
 1737 0290 1B04     		.loc 1 1795 0
 1738 0292 43EA0263 		strb	r7, [r4, #0]
 1739 0296 94F81822 		.loc 1 1796 0
 1740 029a 1343     		ldrh	r2, [r3, #0]
 1741 029c 94F81922 		adds	r2, r2, #1
 1742 02a0 43EA0223 		uxth	r2, r2
 1743 02a4 1B4A     		strh	r2, [r3, #0]	@ movhi
 1744 02a6 9342     		.loc 1 1797 0
 1745 02a8 1DD1     		movs	r3, #0
 1746              		.loc 1 1796 0
 1747 02aa 94F82232 		strh	r2, [r4, #6]	@ movhi
 1748 02ae 94F82322 		.loc 1 1797 0
 1749 02b2 1B04     		str	r3, [r4, #48]
 1750 02b4 43EA0263 		.loc 1 1798 0
 1751 02b8 94F82022 		strb	r3, [r4, #4]
 1752 02bc 1343     		.loc 1 1800 0
 1753 02be 94F82122 		str	r3, [r4, #24]
 1754 02c2 43EA0223 		mov	r0, r3
 1755 02c6 E360     	.LVL181:
 1756              		.loc 1 1807 0
 1757 02c8 94F81E32 		b	.L187
 1758 02cc 94F81F22 	.LVL182:
 1759 02d0 1B04     	.L195:
 1760 02d2 43EA0263 		movs	r0, #10
 1761 02d6 94F81C22 	.LVL183:
 1762 02da 1343     		b	.L187
 1763 02dc 94F81D22 	.LVL184:
 1764 02e0 43EA0223 	.L193:
 1765 02e4 2361     		movs	r0, #0
 1766              	.LVL185:
 1767              		b	.L187
 1768              	.L243:
 1769 02e6 0C4B     		.align	2
 1770              	.L242:
 1771 02e8 2770     		.word	.LANCHOR1
 1772              		.word	.LANCHOR0
 1773 02ea 1A88     		.word	1096897106
 1774 02ec 0132     		.word	1631679090
 1775 02ee 92B2     		.word	.LANCHOR4
 1776 02f0 1A80     	.LVL186:
 1777              	.L203:
 1778 02f2 0023     		movs	r0, #13
 1779              	.LVL187:
 1780 02f4 E280     	.L187:
 1781              		.loc 1 1808 0
 1782 02f6 2363     		pop	{r4, r5, r6, r7, r8, pc}
 1783              	.LFE28:
 1785              		.section	.text.move_window,"ax",%progbits
 1786 02fa A361     		.align	2
 1787 02fc 1846     		.thumb
 1788              		.thumb_func
 1790 02fe 0EE0     	move_window:
 1791              	.LFB6:
 1792              		.loc 1 413 0
 1793 0300 0A20     		@ args = 0, pretend = 0, frame = 0
 1794              		@ frame_needed = 0, uses_anonymous_args = 0
 1795 0302 0CE0     	.LVL188:
 1796              		push	{r4, r5, r6, r7, r8, lr}
 1797              	.LCFI9:
 1798 0304 0020     		.loc 1 417 0
 1799              		ldr	r6, [r0, #48]
 1800 0306 0AE0     	.LVL189:
 1801              		.loc 1 413 0
 1802              		mov	r4, r0
 1803              		.loc 1 418 0
 1804 0308 00000000 		cmp	r6, r1
 1805 030c 00000000 		.loc 1 413 0
 1806 0310 52526141 		mov	r7, r1
 1807 0314 72724161 		.loc 1 418 0
 1808 0318 00000000 		beq	.L245
 1809              	.LVL190:
 1810              		.loc 1 420 0
 1811 031c 0D20     		ldrb	r3, [r0, #4]	@ zero_extendqisi2
 1812              		cbz	r3, .L247
 1813              	.LVL191:
 1814              		.loc 1 421 0
 1815 031e BDE8F081 		add	r8, r0, #52
 1816              		mov	r1, r8
 1817              		ldrb	r0, [r0, #1]	@ zero_extendqisi2
 1818 0322 C046     	.LVL192:
 1819              		mov	r2, r6
 1820              		movs	r3, #1
 1821              		bl	disk_write
 1822              		cbnz	r0, .L249
 1823              		.loc 1 424 0
 1824              		ldr	r3, [r4, #32]
 1825              		ldr	r2, [r4, #36]
 1826              		.loc 1 423 0
 1827              		strb	r0, [r4, #4]
 1828              		.loc 1 424 0
 1829 0000 2DE9F041 		adds	r3, r3, r2
 1830              		cmp	r6, r3
 1831              		bcs	.L247
 1832 0004 066B     	.LBB3:
 1833              		.loc 1 426 0
 1834              		ldrb	r5, [r4, #3]	@ zero_extendqisi2
 1835 0006 0446     	.LVL193:
 1836              		b	.L252
 1837 0008 8E42     	.L253:
 1838              		.loc 1 427 0
 1839 000a 0F46     		ldr	r3, [r4, #32]
 1840              		.loc 1 428 0
 1841 000c 2BD0     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 1842              		.loc 1 427 0
 1843              		adds	r6, r6, r3
 1844 000e 0379     		.loc 1 428 0
 1845 0010 E3B1     		mov	r1, r8
 1846              		movs	r3, #1
 1847              		mov	r2, r6
 1848 0012 00F13408 		bl	disk_write
 1849 0016 4146     		.loc 1 426 0
 1850 0018 4078     		subs	r3, r5, #1
 1851              		uxtb	r5, r3
 1852 001a 3246     	.L252:
 1853 001c 0123     		cmp	r5, #1
 1854 001e FFF7FEFF 		bhi	.L253
 1855 0022 F0B9     	.LVL194:
 1856              	.L247:
 1857 0024 236A     	.LBE3:
 1858 0026 626A     		.loc 1 433 0
 1859              		cbz	r7, .L245
 1860 0028 2071     		.loc 1 434 0
 1861              		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 1862 002a 9B18     		add	r1, r4, #52
 1863 002c 9E42     		mov	r2, r7
 1864 002e 0DD2     		movs	r3, #1
 1865              		bl	disk_read
 1866              		cbnz	r0, .L249
 1867 0030 E578     		.loc 1 436 0
 1868              		str	r7, [r4, #48]
 1869 0032 09E0     		b	.L256
 1870              	.L249:
 1871              		movs	r0, #1
 1872 0034 236A     		b	.L256
 1873              	.LVL195:
 1874 0036 6078     	.L245:
 1875              		movs	r0, #0
 1876 0038 F618     	.L256:
 1877              		.loc 1 441 0
 1878 003a 4146     		pop	{r4, r5, r6, r7, r8, pc}
 1879 003c 0123     	.LFE6:
 1881 0040 FFF7FEFF 		.section	.text.put_fat,"ax",%progbits
 1882              		.align	2
 1883 0044 6B1E     		.global	put_fat
 1884 0046 DDB2     		.thumb
 1885              		.thumb_func
 1887 004a F3D8     	put_fat:
 1888              	.LFB9:
 1889              		.loc 1 537 0
 1890              		@ args = 0, pretend = 0, frame = 0
 1891              		@ frame_needed = 0, uses_anonymous_args = 0
 1892 004c 5FB1     	.LVL196:
 1893              		.loc 1 543 0
 1894 004e 6078     		cmp	r1, #1
 1895 0050 04F13401 		.loc 1 537 0
 1896 0054 3A46     		push	{r4, r5, r6, r7, r8, r9, sl, lr}
 1897 0056 0123     	.LCFI10:
 1898 0058 FFF7FEFF 		.loc 1 537 0
 1899 005c 08B9     		mov	r5, r0
 1900              		mov	r4, r1
 1901 005e 2763     		mov	r8, r2
 1902 0060 02E0     		.loc 1 543 0
 1903              		bls	.L259
 1904 0062 0120     	.LVL197:
 1905 0064 00E0     		ldr	r3, [r0, #28]
 1906              		cmp	r1, r3
 1907              		bcs	.L259
 1908 0066 0020     	.LVL198:
 1909              		.loc 1 547 0
 1910              		ldrb	r3, [r0, #0]	@ zero_extendqisi2
 1911 0068 BDE8F081 		cmp	r3, #2
 1912              		beq	.L264
 1913              		cmp	r3, #3
 1914              		beq	.L265
 1915              		cmp	r3, #1
 1916              		beq	.L263
 1917              		mov	lr, #2
 1918              	.LVL199:
 1919              		b	.L266
 1920              	.LVL200:
 1921              	.L263:
 1922              		.loc 1 549 0
 1923              		add	r6, r1, r1, lsr #1
 1924              	.LVL201:
 1925              		.loc 1 550 0
 1926              		ldr	r1, [r0, #36]
 1927 0000 0129     	.LVL202:
 1928              		add	r1, r1, r6, lsr #9
 1929 0002 2DE9F047 		bl	move_window
 1930              	.LVL203:
 1931              		.loc 1 551 0
 1932 0006 0546     		mov	lr, r0
 1933 0008 0C46     	.LVL204:
 1934 000a 9046     		cmp	r0, #0
 1935              		bne	.L266
 1936 000c 78D9     		.loc 1 552 0
 1937              		lsls	r3, r6, #23
 1938 000e C369     		lsrs	r3, r3, #23
 1939 0010 9942     		add	r7, r5, #52
 1940 0012 75D2     		adds	r1, r7, r3
 1941              	.LVL205:
 1942              		.loc 1 553 0
 1943 0014 0378     		ands	r9, r4, #1
 1944 0016 022B     		uxtb	r2, r8
 1945 0018 41D0     	.LVL206:
 1946 001a 032B     		beq	.L268
 1947 001c 52D0     		ldrb	r3, [r7, r3]	@ zero_extendqisi2
 1948 001e 012B     		and	r3, r3, #15
 1949 0020 02D0     		orr	r3, r3, r2, lsl #4
 1950 0022 4FF0020E 		uxtb	r3, r3
 1951              		b	.L270
 1952 0026 68E0     	.L268:
 1953              		mov	r3, r2
 1954              	.L270:
 1955              		strb	r3, [r1, #0]
 1956 0028 01EB5106 		.loc 1 556 0
 1957              		ldr	r1, [r5, #36]
 1958              	.LVL207:
 1959 002c 416A     		.loc 1 555 0
 1960              		movs	r3, #1
 1961 002e 01EB5621 		.loc 1 554 0
 1962 0032 FFF7FEFF 		adds	r4, r6, #1
 1963              	.LVL208:
 1964              		.loc 1 555 0
 1965 0036 8646     		strb	r3, [r5, #4]
 1966              		.loc 1 556 0
 1967 0038 0028     		mov	r0, r5
 1968 003a 5ED1     		add	r1, r1, r4, lsr #9
 1969              		bl	move_window
 1970 003c F305     	.LVL209:
 1971 003e DB0D     		.loc 1 557 0
 1972 0040 05F13407 		mov	lr, r0
 1973 0044 F918     	.LVL210:
 1974              		cmp	r0, #0
 1975              		bne	.L266
 1976 0046 14F00109 		.loc 1 558 0
 1977 004a 5FFA88F2 		lsls	r3, r4, #23
 1978              		lsrs	r3, r3, #23
 1979 004e 06D0     		adds	r1, r7, r3
 1980 0050 FB5C     	.LVL211:
 1981 0052 03F00F03 		.loc 1 559 0
 1982 0056 43EA0213 		cmp	r9, #0
 1983 005a DBB2     		beq	.L272
 1984 005c 00E0     		ubfx	r2, r8, #4, #8
 1985              	.LVL212:
 1986 005e 1346     		b	.L274
 1987              	.LVL213:
 1988 0060 0B70     	.L272:
 1989              		ldrb	r3, [r7, r3]	@ zero_extendqisi2
 1990 0062 696A     		ubfx	r2, r8, #8, #4
 1991              	.LVL214:
 1992              		bic	r3, r3, #15
 1993 0064 0123     		orr	r2, r3, r2
 1994              	.L274:
 1995 0066 741C     		strb	r2, [r1, #0]
 1996              		.loc 1 560 0
 1997              		b	.L266
 1998 0068 2B71     	.LVL215:
 1999              	.L264:
 2000 006a 2846     		.loc 1 563 0
 2001 006c 01EB5421 		ldr	r1, [r0, #36]
 2002 0070 FFF7FEFF 	.LVL216:
 2003              		add	r1, r1, r4, lsr #8
 2004              		bl	move_window
 2005 0074 8646     	.LVL217:
 2006              		.loc 1 564 0
 2007 0076 0028     		mov	lr, r0
 2008 0078 3FD1     	.LVL218:
 2009              		cbnz	r0, .L266
 2010 007a E305     		.loc 1 565 0
 2011 007c DB0D     		lsls	r3, r4, #1
 2012 007e F918     		lsls	r3, r3, #23
 2013              		lsrs	r3, r3, #23
 2014              		add	r1, r5, #52
 2015 0080 B9F1000F 		adds	r2, r1, r3
 2016 0084 02D0     	.LVL219:
 2017 0086 C8F30712 		.loc 1 566 0
 2018              		strb	r8, [r1, r3]
 2019 008a 06E0     		ubfx	r3, r8, #8, #8
 2020              		strb	r3, [r2, #1]
 2021              		.loc 1 567 0
 2022 008c FB5C     		b	.L266
 2023 008e C8F30322 	.LVL220:
 2024              	.L265:
 2025 0092 23F00F03 		.loc 1 570 0
 2026 0096 43EA0202 		ldr	r1, [r0, #36]
 2027              	.LVL221:
 2028 009a 0A70     		add	r1, r1, r4, lsr #7
 2029              		bl	move_window
 2030 009c 2DE0     	.LVL222:
 2031              		.loc 1 571 0
 2032              		mov	lr, r0
 2033              	.LVL223:
 2034 009e 416A     		cbnz	r0, .L266
 2035              		.loc 1 572 0
 2036 00a0 01EB1421 		lsls	r2, r4, #2
 2037 00a4 FFF7FEFF 		lsls	r2, r2, #23
 2038              		lsrs	r2, r2, #23
 2039              		add	r0, r5, #52
 2040 00a8 8646     		adds	r1, r0, r2
 2041              	.LVL224:
 2042 00aa 30BB     		.loc 1 573 0
 2043              		ldrb	r3, [r1, #3]	@ zero_extendqisi2
 2044 00ac 6300     		lsls	r3, r3, #24
 2045 00ae DB05     		and	r3, r3, #-268435456
 2046 00b0 DB0D     		orr	r3, r3, r8
 2047 00b2 05F13401 	.LVL225:
 2048 00b6 CA18     		.loc 1 574 0
 2049              		strb	r3, [r0, r2]
 2050              		ubfx	r2, r3, #8, #8
 2051 00b8 01F80380 		strb	r2, [r1, #1]
 2052 00bc C8F30723 		lsrs	r2, r3, #16
 2053 00c0 5370     		lsrs	r3, r3, #24
 2054              	.LVL226:
 2055 00c2 1AE0     		strb	r2, [r1, #2]
 2056              		strb	r3, [r1, #3]
 2057              	.LVL227:
 2058              	.L266:
 2059 00c4 416A     		.loc 1 580 0
 2060              		movs	r3, #1
 2061 00c6 01EBD411 		strb	r3, [r5, #4]
 2062 00ca FFF7FEFF 		b	.L277
 2063              	.LVL228:
 2064              	.L259:
 2065 00ce 8646     		mov	lr, #2
 2066              	.LVL229:
 2067 00d0 98B9     	.L277:
 2068              		.loc 1 584 0
 2069 00d2 A200     		mov	r0, lr
 2070 00d4 D205     	.LVL230:
 2071 00d6 D20D     		pop	{r4, r5, r6, r7, r8, r9, sl, pc}
 2072 00d8 05F13400 	.LFE9:
 2074              		.section	.text.get_fat,"ax",%progbits
 2075              		.align	2
 2076 00de CB78     		.global	get_fat
 2077 00e0 1B06     		.thumb
 2078 00e2 03F07043 		.thumb_func
 2080              	get_fat:
 2081              	.LFB8:
 2082 00ea 8354     		.loc 1 493 0
 2083 00ec C3F30722 		@ args = 0, pretend = 0, frame = 0
 2084 00f0 4A70     		@ frame_needed = 0, uses_anonymous_args = 0
 2085 00f2 1A0C     	.LVL231:
 2086 00f4 1B0E     		.loc 1 498 0
 2087              		cmp	r1, #1
 2088 00f6 8A70     		.loc 1 493 0
 2089 00f8 CB70     		push	{r4, r5, r6, r7, r8, lr}
 2090              	.LCFI11:
 2091              		.loc 1 493 0
 2092              		mov	r4, r0
 2093 00fa 0123     		mov	r6, r1
 2094 00fc 2B71     		.loc 1 498 0
 2095 00fe 01E0     		bls	.L280
 2096              	.LVL232:
 2097              		ldr	r3, [r0, #28]
 2098 0100 4FF0020E 		cmp	r1, r3
 2099              		bcs	.L280
 2100              	.LVL233:
 2101              		.loc 1 501 0
 2102 0104 7046     		ldrb	r3, [r0, #0]	@ zero_extendqisi2
 2103              		cmp	r3, #2
 2104 0106 BDE8F087 		beq	.L285
 2105              		cmp	r3, #3
 2106              		beq	.L286
 2107 010a C046     		cmp	r3, #1
 2108              		bne	.L283
 2109              		.loc 1 503 0
 2110              		add	r5, r1, r1, lsr #1
 2111              	.LVL234:
 2112              		.loc 1 504 0
 2113              		ldr	r1, [r0, #36]
 2114              	.LVL235:
 2115              		add	r1, r1, r5, lsr #9
 2116              		bl	move_window
 2117              	.LVL236:
 2118              		cmp	r0, #0
 2119              		bne	.L283
 2120 0000 0129     		.loc 1 505 0
 2121              		lsls	r3, r5, #23
 2122 0002 2DE9F041 		.loc 1 506 0
 2123              		ldr	r1, [r4, #36]
 2124              		.loc 1 505 0
 2125 0006 0446     		lsrs	r3, r3, #23
 2126 0008 0E46     		adds	r5, r5, #1
 2127              	.LVL237:
 2128 000a 58D9     		adds	r3, r4, r3
 2129              		.loc 1 506 0
 2130 000c C369     		mov	r0, r4
 2131 000e 9942     		add	r1, r1, r5, lsr #9
 2132 0010 55D2     		.loc 1 505 0
 2133              		ldrb	r7, [r3, #52]	@ zero_extendqisi2
 2134              		.loc 1 506 0
 2135 0012 0378     		bl	move_window
 2136 0014 022B     		cmp	r0, #0
 2137 0016 29D0     		bne	.L283
 2138 0018 032B     		.loc 1 507 0
 2139 001a 38D0     		lsls	r3, r5, #23
 2140 001c 012B     		lsrs	r3, r3, #23
 2141 001e 50D1     		adds	r3, r4, r3
 2142              		ldrb	r3, [r3, #52]	@ zero_extendqisi2
 2143 0020 01EB5105 		.loc 1 508 0
 2144              		tst	r6, #1
 2145              		.loc 1 507 0
 2146 0024 416A     		orr	r0, r7, r3, lsl #8
 2147              	.LVL238:
 2148 0026 01EB5521 		.loc 1 508 0
 2149 002a FFF7FEFF 		beq	.L289
 2150              		lsrs	r0, r0, #4
 2151 002e 0028     	.LVL239:
 2152 0030 47D1     		b	.L291
 2153              	.LVL240:
 2154 0032 EB05     	.L289:
 2155              		lsls	r0, r0, #20
 2156 0034 616A     	.LVL241:
 2157              		lsrs	r0, r0, #20
 2158 0036 DB0D     		b	.L291
 2159 0038 0135     	.LVL242:
 2160              	.L285:
 2161 003a E318     		.loc 1 511 0
 2162              		ldr	r1, [r0, #36]
 2163 003c 2046     	.LVL243:
 2164 003e 01EB5521 		add	r1, r1, r6, lsr #8
 2165              		bl	move_window
 2166 0042 93F83470 	.LVL244:
 2167              		cbnz	r0, .L283
 2168 0046 FFF7FEFF 		.loc 1 512 0
 2169 004a 0028     		lsls	r3, r6, #1
 2170 004c 39D1     		lsls	r3, r3, #23
 2171              		add	r1, r4, #52
 2172 004e EB05     		lsrs	r3, r3, #23
 2173 0050 DB0D     		adds	r2, r1, r3
 2174 0052 E318     	.LVL245:
 2175 0054 93F83430 		.loc 1 513 0
 2176              		ldrb	r2, [r2, #1]	@ zero_extendqisi2
 2177 0058 16F0010F 	.LVL246:
 2178              		ldrb	r3, [r1, r3]	@ zero_extendqisi2
 2179 005c 47EA0320 		orr	r0, r3, r2, lsl #8
 2180              		b	.L291
 2181              	.LVL247:
 2182 0060 01D0     	.L286:
 2183 0062 0009     		.loc 1 516 0
 2184              		ldr	r1, [r0, #36]
 2185 0064 2FE0     	.LVL248:
 2186              		add	r1, r1, r6, lsr #7
 2187              		bl	move_window
 2188 0066 0005     	.LVL249:
 2189              		cbnz	r0, .L283
 2190 0068 000D     		.loc 1 517 0
 2191 006a 2CE0     		lsls	r2, r6, #2
 2192              		lsls	r2, r2, #23
 2193              		adds	r4, r4, #52
 2194              	.LVL250:
 2195 006c 416A     		lsrs	r2, r2, #23
 2196              		adds	r1, r4, r2
 2197 006e 01EB1621 	.LVL251:
 2198 0072 FFF7FEFF 		.loc 1 518 0
 2199              		ldrb	r3, [r1, #2]	@ zero_extendqisi2
 2200 0076 20BB     		ldrb	r0, [r1, #3]	@ zero_extendqisi2
 2201              		ldrb	r2, [r4, r2]	@ zero_extendqisi2
 2202 0078 7300     		lsls	r3, r3, #16
 2203 007a DB05     		orr	r3, r3, r0, lsl #24
 2204 007c 04F13401 		orrs	r3, r3, r2
 2205 0080 DB0D     		ldrb	r2, [r1, #1]	@ zero_extendqisi2
 2206 0082 CA18     		orr	r3, r3, r2, lsl #8
 2207              		bic	r0, r3, #-268435456
 2208              		b	.L291
 2209 0084 5278     	.LVL252:
 2210              	.L280:
 2211 0086 CB5C     		movs	r0, #1
 2212 0088 43EA0220 	.LVL253:
 2213 008c 1BE0     		b	.L291
 2214              	.LVL254:
 2215              	.L283:
 2216              		mov	r0, #-1
 2217 008e 416A     	.LVL255:
 2218              	.L291:
 2219 0090 01EBD611 		.loc 1 522 0
 2220 0094 FFF7FEFF 		pop	{r4, r5, r6, r7, r8, pc}
 2221              	.LFE8:
 2223              		.section	.text.f_getfree,"ax",%progbits
 2224 009a B200     		.align	2
 2225 009c D205     		.global	f_getfree
 2226 009e 3434     		.thumb
 2227              		.thumb_func
 2229 00a2 A118     	f_getfree:
 2230              	.LFB42:
 2231              		.loc 1 2655 0
 2232 00a4 8B78     		@ args = 0, pretend = 0, frame = 8
 2233 00a6 C878     		@ frame_needed = 0, uses_anonymous_args = 0
 2234 00a8 A25C     	.LVL256:
 2235 00aa 1B04     		push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 2236 00ac 43EA0063 	.LCFI12:
 2237 00b0 1343     	.LVL257:
 2238 00b2 4A78     		.loc 1 2655 0
 2239 00b4 43EA0223 		add	r3, sp, #8
 2240 00b8 23F07040 		str	r0, [r3, #-4]!
 2241 00bc 03E0     	.LVL258:
 2242              		mov	fp, r1
 2243              	.LVL259:
 2244 00be 0120     		mov	r5, r2
 2245              	.LVL260:
 2246 00c0 01E0     		.loc 1 2663 0
 2247              		mov	r1, r2
 2248              	.LVL261:
 2249 00c2 4FF0FF30 		mov	r0, r3
 2250              	.LVL262:
 2251              		movs	r2, #0
 2252              	.LVL263:
 2253 00c6 BDE8F081 		bl	chk_mounted
 2254              	.LVL264:
 2255              		.loc 1 2664 0
 2256 00ca C046     		mov	r4, r0
 2257              	.LVL265:
 2258              		cmp	r0, #0
 2259              		bne	.L296
 2260              		.loc 1 2666 0
 2261              		ldr	r1, [r5, #0]
 2262              		ldr	r7, [r1, #28]
 2263              	.LVL266:
 2264              		ldr	r2, [r1, #16]
 2265              		subs	r3, r7, #2
 2266              		cmp	r2, r3
 2267              		bhi	.L298
 2268 0000 2DE9F74F 		.loc 1 2667 0
 2269              		str	r2, [fp, #0]
 2270              		b	.L296
 2271              	.L298:
 2272 0004 02AB     		.loc 1 2670 0
 2273 0006 43F8040D 		ldrb	sl, [r1, #0]	@ zero_extendqisi2
 2274              	.LVL267:
 2275 000a 8B46     		.loc 1 2672 0
 2276              		cmp	sl, #1
 2277 000c 1546     		bne	.L300
 2278              		mov	r8, r0
 2279              	.LVL268:
 2280 000e 1146     		movs	r6, #2
 2281              	.LVL269:
 2282 0010 1846     	.L302:
 2283              		.loc 1 2675 0
 2284 0012 0022     		ldr	r0, [r5, #0]
 2285              	.LVL270:
 2286 0014 FFF7FEFF 		mov	r1, r6
 2287              		bl	get_fat
 2288              		.loc 1 2676 0
 2289 0018 0446     		cmp	r0, #-1
 2290              	.LVL271:
 2291 001a 0028     		bne	.L303
 2292 001c 63D1     		movs	r4, #1
 2293              		b	.L305
 2294 001e 2968     	.L303:
 2295 0020 CF69     		.loc 1 2677 0
 2296              		cmp	r0, #1
 2297 0022 0A69     		bne	.L306
 2298 0024 BB1E     		movs	r4, #2
 2299 0026 9A42     		b	.L305
 2300 0028 02D8     	.L306:
 2301              		.loc 1 2678 0
 2302 002a CBF80020 		cbnz	r0, .L308
 2303 002e 5AE0     		add	r8, r8, #1
 2304              	.L308:
 2305              		.loc 1 2679 0
 2306 0030 91F800A0 		ldr	r3, [r5, #0]
 2307              		adds	r6, r6, #1
 2308              		ldr	r3, [r3, #28]
 2309 0034 BAF1010F 		cmp	r6, r3
 2310 0038 17D1     		bcc	.L302
 2311 003a 8046     		b	.L305
 2312              	.LVL272:
 2313 003c 0226     	.L300:
 2314              		.loc 1 2682 0
 2315              		ldr	r9, [r1, #36]
 2316              	.LVL273:
 2317 003e 2868     		mov	r8, r0
 2318              	.LVL274:
 2319 0040 3146     		mov	r6, r0
 2320 0042 FFF7FEFF 	.LVL275:
 2321              		mov	r1, r0
 2322 0046 B0F1FF3F 	.LVL276:
 2323              	.L310:
 2324 004a 01D1     		.loc 1 2685 0
 2325 004c 0124     		cbnz	r6, .L311
 2326 004e 40E0     	.LVL277:
 2327              		.loc 1 2686 0
 2328              		ldr	r0, [r5, #0]
 2329 0050 0128     	.LVL278:
 2330 0052 01D1     		mov	r1, r9
 2331 0054 0224     	.LVL279:
 2332 0056 3CE0     		bl	move_window
 2333              		.loc 1 2687 0
 2334              		cbz	r0, .L313
 2335 0058 08B9     		mov	r4, r0
 2336 005a 08F10108 		b	.L305
 2337              	.L313:
 2338              		.loc 1 2688 0
 2339 005e 2B68     		ldr	r3, [r5, #0]
 2340 0060 0136     		.loc 1 2686 0
 2341 0062 DB69     		add	r9, r9, #1
 2342 0064 9E42     		.loc 1 2688 0
 2343 0066 EAD3     		add	r1, r3, #52
 2344 0068 33E0     	.LVL280:
 2345              		mov	r6, #512
 2346              	.LVL281:
 2347              	.L311:
 2348 006a D1F82490 		.loc 1 2691 0
 2349              		cmp	sl, #2
 2350 006e 8046     		ldrb	lr, [r1, #1]	@ zero_extendqisi2
 2351              		ldrb	r0, [r1, #0]	@ zero_extendqisi2
 2352 0070 0646     		bne	.L315
 2353              		.loc 1 2692 0
 2354 0072 0146     		orrs	lr, r0, lr, lsl #8
 2355              		it	eq
 2356              		addeq	r8, r8, #1
 2357              		.loc 1 2693 0
 2358 0074 6EB9     		adds	r1, r1, #2
 2359              		subs	r6, r6, #2
 2360              		b	.L319
 2361 0076 2868     	.L315:
 2362              		.loc 1 2695 0
 2363 0078 4946     		ldrb	r3, [r1, #2]	@ zero_extendqisi2
 2364              		ldrb	r2, [r1, #3]	@ zero_extendqisi2
 2365 007a FFF7FEFF 		lsls	r3, r3, #16
 2366              		orr	r3, r3, r2, lsl #24
 2367 007e 08B1     		orrs	r3, r3, r0
 2368 0080 0446     		orr	r3, r3, lr, lsl #8
 2369 0082 26E0     		bic	r3, r3, #-268435456
 2370              		cbnz	r3, .L320
 2371              		add	r8, r8, #1
 2372 0084 2B68     	.L320:
 2373              		.loc 1 2696 0
 2374 0086 09F10109 		adds	r1, r1, #4
 2375              		subs	r6, r6, #4
 2376 008a 03F13401 	.L319:
 2377              		.loc 1 2698 0
 2378 008e 4FF40076 		adds	r7, r7, #-1
 2379              		bne	.L310
 2380              	.LVL282:
 2381              	.L305:
 2382 0092 BAF1020F 		.loc 1 2700 0
 2383 0096 91F801E0 		ldr	r0, [r5, #0]
 2384 009a 0878     	.LVL283:
 2385 009c 07D1     		.loc 1 2701 0
 2386              		cmp	sl, #3
 2387 009e 50EA0E2E 		.loc 1 2700 0
 2388 00a2 08BF     		str	r8, [r0, #16]
 2389 00a4 08F10108 		.loc 1 2701 0
 2390              		bne	.L322
 2391 00a8 0231     		movs	r3, #1
 2392 00aa 023E     		strb	r3, [r0, #5]
 2393 00ac 0EE0     	.L322:
 2394              		.loc 1 2702 0
 2395              		str	r8, [fp, #0]
 2396 00ae 8B78     	.LVL284:
 2397 00b0 CA78     	.L296:
 2398 00b2 1B04     		.loc 1 2706 0
 2399 00b4 43EA0263 		mov	r0, r4
 2400 00b8 0343     		pop	{r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 2401 00ba 43EA0E23 	.LFE42:
 2403 00c2 0BB9     		.section	.text.f_read,"ax",%progbits
 2404 00c4 08F10108 		.align	2
 2405              		.global	f_read
 2406              		.thumb
 2407 00c8 0431     		.thumb_func
 2409              	f_read:
 2410              	.LFB32:
 2411 00cc 17F1FF37 		.loc 1 2024 0
 2412 00d0 D0D1     		@ args = 0, pretend = 0, frame = 0
 2413              		@ frame_needed = 0, uses_anonymous_args = 0
 2414              	.LVL285:
 2415              		push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 2416 00d2 2868     	.LCFI13:
 2417              	.LVL286:
 2418              		.loc 1 2024 0
 2419 00d4 BAF1030F 		mov	r4, r0
 2420              		mov	fp, r3
 2421 00d8 C0F81080 	.LVL287:
 2422              		.loc 1 2031 0
 2423 00dc 01D1     		movs	r3, #0
 2424 00de 0123     	.LVL288:
 2425 00e0 4371     		.loc 1 2024 0
 2426              		mov	r5, r1
 2427              		.loc 1 2031 0
 2428 00e2 CBF80080 		str	r3, [fp, #0]
 2429              		.loc 1 2033 0
 2430              		ldr	r0, [r0, #0]
 2431              	.LVL289:
 2432 00e6 2046     		ldrh	r1, [r4, #4]
 2433 00e8 BDE8FE8F 	.LVL290:
 2434              		.loc 1 2024 0
 2435              		mov	r6, r2
 2436              		.loc 1 2033 0
 2437              		bl	validate
 2438              	.LVL291:
 2439              		.loc 1 2034 0
 2440              		cmp	r0, #0
 2441              		bne	.L328
 2442              		.loc 1 2035 0
 2443              		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 2444              		tst	r3, #128
 2445              		bne	.L367
 2446              		.loc 1 2037 0
 2447              		tst	r3, #1
 2448 0000 2DE9F84F 		bne	.L331
 2449              		movs	r0, #7
 2450              		b	.L328
 2451              	.L331:
 2452 0004 0446     		.loc 1 2028 0
 2453 0006 9B46     		ldr	r3, [r4, #12]
 2454              		ldr	r2, [r4, #8]
 2455              		mov	sl, r5
 2456 0008 0023     	.LVL292:
 2457              		subs	r3, r3, r2
 2458              		cmp	r6, r3
 2459 000a 0D46     		ite	cc
 2460              		movcc	r9, r6
 2461 000c CBF80030 		movcs	r9, r3
 2462              	.LVL293:
 2463 0010 0068     		b	.L333
 2464              	.LVL294:
 2465 0012 A188     	.L334:
 2466              		.loc 1 2044 0
 2467              		ldr	r2, [r4, #8]
 2468 0014 1646     		lsls	r3, r2, #23
 2469              		lsrs	r3, r3, #23
 2470 0016 FFF7FEFF 		cmp	r3, #0
 2471              		bne	.L335
 2472              		.loc 1 2045 0
 2473 001a 0028     		ldr	r0, [r4, #0]
 2474 001c 40F0AB80 		ldrb	r3, [r0, #2]	@ zero_extendqisi2
 2475              		subs	r3, r3, #1
 2476 0020 A379     		and	r3, r3, r2, lsr #9
 2477 0022 13F0800F 		uxtb	r7, r3
 2478 0026 27D1     		.loc 1 2046 0
 2479              		cbnz	r7, .L337
 2480 0028 13F0010F 		.loc 1 2047 0
 2481 002c 01D1     		cbnz	r2, .L339
 2482 002e 0720     		ldr	r0, [r4, #16]
 2483 0030 A1E0     	.LVL295:
 2484              		b	.L341
 2485              	.LVL296:
 2486 0032 E368     	.L339:
 2487 0034 A268     		ldr	r1, [r4, #20]
 2488 0036 AA46     		bl	get_fat
 2489              	.LVL297:
 2490 0038 9B1A     	.L341:
 2491 003a 9E42     		.loc 1 2049 0
 2492 003c 34BF     		cmp	r0, #1
 2493 003e B146     		bhi	.L342
 2494 0040 9946     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 2495              		mvn	r3, r3, lsl #25
 2496 0042 93E0     		mvn	r3, r3, lsr #25
 2497              		strb	r3, [r4, #6]
 2498              	.LVL298:
 2499              	.L367:
 2500 0044 A268     		movs	r0, #2
 2501 0046 D305     	.LVL299:
 2502 0048 DB0D     		b	.L328
 2503 004a 002B     	.LVL300:
 2504 004c 73D1     	.L342:
 2505              		.loc 1 2050 0
 2506 004e 2068     		cmp	r0, #-1
 2507 0050 8378     		beq	.L368
 2508 0052 013B     		.loc 1 2051 0
 2509 0054 03EA5223 		str	r0, [r4, #20]
 2510 0058 DFB2     	.L337:
 2511              		.loc 1 2053 0
 2512 005a 9FB9     		ldr	r5, [r4, #0]
 2513              	.LVL301:
 2514 005c 0AB9     		ldr	r1, [r4, #20]
 2515 005e 2069     		mov	r0, r5
 2516              	.LVL302:
 2517 0060 02E0     		bl	clust2sect
 2518              		.loc 1 2054 0
 2519              		cbnz	r0, .L346
 2520 0062 6169     	.LVL303:
 2521 0064 FFF7FEFF 	.L368:
 2522              		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 2523              		adds	r0, r0, #2
 2524              	.LVL304:
 2525 0068 0128     		mvn	r3, r3, lsl #25
 2526 006a 07D8     		mvn	r3, r3, lsr #25
 2527 006c A379     		strb	r3, [r4, #6]
 2528 006e 6FEA4363 		b	.L328
 2529 0072 6FEA5363 	.LVL305:
 2530 0076 A371     	.L346:
 2531              		.loc 1 2057 0
 2532              		lsrs	r6, r9, #9
 2533 0078 0220     		.loc 1 2055 0
 2534              		add	r8, r7, r0
 2535 007a 7CE0     		.loc 1 2057 0
 2536              		beq	.L348
 2537              		.loc 1 2058 0
 2538              		ldrb	r2, [r5, #2]	@ zero_extendqisi2
 2539 007c B0F1FF3F 		adds	r3, r6, r7
 2540 0080 06D0     		cmp	r3, r2
 2541              		.loc 1 2059 0
 2542 0082 6061     		it	hi
 2543              		subhi	r6, r2, r7
 2544              		.loc 1 2060 0
 2545 0084 2568     		uxtb	r3, r6
 2546              	.LVL306:
 2547 0086 6169     		ldrb	r0, [r5, #1]	@ zero_extendqisi2
 2548 0088 2846     		mov	r1, sl
 2549              		mov	r2, r8
 2550 008a FFF7FEFF 		bl	disk_read
 2551              	.LVL307:
 2552 008e 38B9     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 2553              		cmp	r0, #0
 2554              		bne	.L369
 2555 0090 A379     		.loc 1 2067 0
 2556 0092 0230     		tst	r3, #64
 2557              		beq	.L354
 2558 0094 6FEA4363 		ldr	r3, [r4, #24]
 2559 0098 6FEA5363 		rsb	r0, r8, r3
 2560 009c A371     		cmp	r0, r6
 2561 009e 6AE0     	.LVL308:
 2562              		bcs	.L354
 2563              		.loc 1 2068 0
 2564              		add	r0, sl, r0, lsl #9
 2565 00a0 5FEA5926 		add	r1, r4, #36
 2566              		mov	r2, #512
 2567 00a4 07EB0008 		bl	mem_cpy
 2568              	.L354:
 2569 00a8 1FD0     		.loc 1 2071 0
 2570              		lsls	r5, r6, #9
 2571 00aa AA78     	.LVL309:
 2572 00ac F319     		.loc 1 2072 0
 2573 00ae 9342     		b	.L357
 2574              	.LVL310:
 2575 00b0 88BF     	.L348:
 2576 00b2 D61B     		.loc 1 2076 0
 2577              		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 2578 00b4 F3B2     		tst	r3, #64
 2579              		beq	.L358
 2580 00b6 6878     		.loc 1 2077 0
 2581 00b8 5146     		movs	r3, #1
 2582 00ba 4246     		ldrb	r0, [r5, #1]	@ zero_extendqisi2
 2583 00bc FFF7FEFF 		add	r1, r4, #36
 2584              		ldr	r2, [r4, #24]
 2585 00c0 A379     		bl	disk_write
 2586 00c2 0028     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 2587 00c4 2ED1     		cbnz	r0, .L369
 2588              		.loc 1 2079 0
 2589 00c6 13F0400F 		bic	r3, r3, #64
 2590 00ca 0CD0     		strb	r3, [r4, #6]
 2591 00cc A369     	.L358:
 2592 00ce C8EB0300 		.loc 1 2082 0
 2593 00d2 B042     		ldr	r3, [r4, #24]
 2594              		cmp	r3, r8
 2595 00d4 07D2     		beq	.L362
 2596              		.loc 1 2083 0
 2597 00d6 0AEB4020 		ldr	r3, [r4, #0]
 2598 00da 04F12401 		add	r1, r4, #36
 2599 00de 4FF40072 		ldrb	r0, [r3, #1]	@ zero_extendqisi2
 2600 00e2 FFF7FEFF 		mov	r2, r8
 2601              		movs	r3, #1
 2602              		bl	disk_read
 2603 00e6 7502     		cbz	r0, .L362
 2604              		.loc 1 2084 0
 2605              		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 2606 00e8 35E0     	.L369:
 2607              		mvn	r3, r3, lsl #25
 2608              		mvn	r3, r3, lsr #25
 2609              		strb	r3, [r4, #6]
 2610 00ea A379     		movs	r0, #1
 2611 00ec 13F0400F 		b	.L328
 2612 00f0 0BD0     	.L362:
 2613              		.loc 1 2087 0
 2614 00f2 0123     		str	r8, [r4, #24]
 2615 00f4 6878     	.LVL311:
 2616 00f6 04F12401 	.L335:
 2617 00fa A269     		.loc 1 2089 0
 2618 00fc FFF7FEFF 		ldr	r1, [r4, #8]
 2619 0100 A379     		.loc 1 2096 0
 2620 0102 78B9     		mov	r0, sl
 2621              		.loc 1 2089 0
 2622 0104 23F04003 		lsls	r1, r1, #23
 2623 0108 A371     		lsrs	r1, r1, #23
 2624              		rsb	r3, r1, #512
 2625              	.LVL312:
 2626 010a A369     		cmp	r9, r3
 2627 010c 4345     		ite	cc
 2628 010e 10D0     		movcc	r5, r9
 2629              		movcs	r5, r3
 2630 0110 2368     	.LVL313:
 2631 0112 04F12401 		.loc 1 2096 0
 2632 0116 5878     		add	r3, r4, #36
 2633 0118 4246     		adds	r1, r3, r1
 2634 011a 0123     		mov	r2, r5
 2635 011c FFF7FEFF 		bl	mem_cpy
 2636 0120 38B1     	.L357:
 2637              		.loc 1 2043 0
 2638 0122 A379     		ldr	r3, [r4, #8]
 2639              		add	sl, sl, r5
 2640 0124 6FEA4363 		adds	r3, r3, r5
 2641 0128 6FEA5363 		str	r3, [r4, #8]
 2642 012c A371     		ldr	r3, [fp, #0]
 2643 012e 0120     		rsb	r9, r5, r9
 2644 0130 21E0     		adds	r3, r3, r5
 2645              		str	r3, [fp, #0]
 2646              	.L333:
 2647 0132 C4F81880 		.loc 1 2042 0
 2648              		cmp	r9, #0
 2649              		bne	.L334
 2650              		mov	r0, r9
 2651 0136 A168     	.LVL314:
 2652              	.L328:
 2653 0138 5046     		.loc 1 2101 0
 2654              		pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 2655 013a C905     	.LFE32:
 2657 013e C1F50073 		.section	.text.f_gets,"ax",%progbits
 2658              		.align	2
 2659 0142 9945     		.global	f_gets
 2660 0144 34BF     		.thumb
 2661 0146 4D46     		.thumb_func
 2663              	f_gets:
 2664              	.LFB50:
 2665 014a 04F12403 		.loc 1 3350 0
 2666 014e 5918     		@ args = 0, pretend = 0, frame = 8
 2667 0150 2A46     		@ frame_needed = 0, uses_anonymous_args = 0
 2668 0152 FFF7FEFF 	.LVL315:
 2669              		push	{r0, r1, r4, r5, r6, r7, r8, lr}
 2670              	.LCFI14:
 2671 0156 A368     	.LVL316:
 2672 0158 AA44     		.loc 1 3350 0
 2673 015a 5B19     		mov	r5, r0
 2674 015c A360     	.LVL317:
 2675 015e DBF80030 		mov	r8, r1
 2676 0162 C5EB0909 	.LVL318:
 2677 0166 5B19     		mov	r7, r2
 2678 0168 CBF80030 		mov	r4, r0
 2679              	.LVL319:
 2680              		movs	r6, #0
 2681 016c B9F1000F 	.LVL320:
 2682 0170 7FF468AF 		.loc 1 3357 0
 2683 0174 4846     		b	.L371
 2684              	.LVL321:
 2685              	.L372:
 2686              		.loc 1 3358 0
 2687 0176 BDE8F88F 		movs	r2, #1
 2688              		mov	r3, sp
 2689              		mov	r0, r7
 2690 017a C046     		add	r1, sp, #6
 2691              		bl	f_read
 2692              		.loc 1 3359 0
 2693              		ldr	r3, [sp, #0]
 2694              		cmp	r3, #1
 2695              		bne	.L373
 2696              	.LVL322:
 2697              		.loc 1 3360 0
3335:Libraries/fat_sd/ff.c **** 
3336:Libraries/fat_sd/ff.c **** #endif /* _USE_MKFS && !_FS_READONLY */
3337:Libraries/fat_sd/ff.c **** 
3338:Libraries/fat_sd/ff.c **** 
3339:Libraries/fat_sd/ff.c **** 
3340:Libraries/fat_sd/ff.c **** 
3341:Libraries/fat_sd/ff.c **** #if _USE_STRFUNC
3342:Libraries/fat_sd/ff.c **** /*-----------------------------------------------------------------------*/
3343:Libraries/fat_sd/ff.c **** /* Get a string from the file                                            */
3344:Libraries/fat_sd/ff.c **** /*-----------------------------------------------------------------------*/
3345:Libraries/fat_sd/ff.c **** TCHAR* f_gets (
3346:Libraries/fat_sd/ff.c **** 	TCHAR* buff,	/* Pointer to the string buffer to read */
3347:Libraries/fat_sd/ff.c **** 	int len,		/* Size of string buffer (characters) */
3348:Libraries/fat_sd/ff.c **** 	FIL* fil		/* Pointer to the file object */
3349:Libraries/fat_sd/ff.c **** )
3350:Libraries/fat_sd/ff.c **** {
 2698              	#-1
 2699              	.LVL325:
 2700              		cmp	r6, r3
 2701              		blt	.L372
 2702 0000 2DE9F341 	.LVL326:
 2703              	.L373:
 2704              		.loc 1 3388 0
 2705              		movs	r3, #0
 2706 0004 0546     	.LVL327:
 2707              		strb	r3, [r4, #0]
 2708 0006 8846     		.loc 1 3390 0
 2709              		cmp	r6, r3
 2710 0008 1746     		ite	ne
 2711 000a 0446     		movne	r0, r5
 2712              		moveq	r0, r3
 2713 000c 0026     		pop	{r2, r3, r4, r5, r6, r7, r8, pc}
 2714              	.LFE50:
3351:Libraries/fat_sd/ff.c **** 	int n = 0;
3352:Libraries/fat_sd/ff.c **** 	TCHAR c, *p = buff;
3353:Libraries/fat_sd/ff.c **** 	BYTE s[2];
3354:Libraries/fat_sd/ff.c **** 	UINT rc;
3355:Libraries/fat_sd/ff.c **** 
3356:Libraries/fat_sd/ff.c **** 
3357:Libraries/fat_sd/ff.c **** 	while (n < len - 1) {			/* Read bytes until buffer gets filled */
 2715              	f_gets
 2716 000e 10E0     		.section	.text.dir_sdi,"ax",%progbits
 2717              		.align	2
 2718              		.thumb
3358:Libraries/fat_sd/ff.c **** 		f_read(fil, s, 1, &rc);
 2719              	umb_func
 2721 0012 6B46     	dir_sdi:
 2722 0014 3846     	.LFB13:
 2723 0016 0DF10601 		.loc 1 716 0
 2724 001a FFF7FEFF 		@ args = 0, pretend = 0, frame = 0
3359:Libraries/fat_sd/ff.c **** 		if (rc != 1) break;			/* Break on EOF or error */
 2725              	me_needed = 0, uses_anonymous_args = 0
 2726 001e 009B     	.LVL328:
 2727 0020 012B     		push	{r4, r5, r6, lr}
 2728 0022 0AD1     	.LCFI15:
 2729              		.loc 1 716 0
3360:Libraries/fat_sd/ff.c **** 		c = s[0];
 2730              	r5, r0
 2731 0024 9DF80630 		mov	r6, r1
 2732              		.loc 1 721 0
3361:Libraries/fat_sd/ff.c **** #if _LFN_UNICODE					/* Read a character in UTF-8 encoding */
3362:Libraries/fat_sd/ff.c **** 		if (c >= 0x80) {
3363:Libraries/fat_sd/ff.c **** 			if (c < 0xC0) continue;	/* Skip stray trailer */
3364:Libraries/fat_sd/ff.c **** 			if (c < 0xE0) {			/* Two-byte sequense */
3365:Libraries/fat_sd/ff.c **** 				f_read(fil, s, 1, &rc);
3366:Libraries/fat_sd/ff.c **** 				if (rc != 1) break;
3367:Libraries/fat_sd/ff.c **** 				c = ((c & 0x1F) << 6) | (s[0] & 0x3F);
3368:Libraries/fat_sd/ff.c **** 				if (c < 0x80) c = '?';
3369:Libraries/fat_sd/ff.c **** 			} else {
3370:Libraries/fat_sd/ff.c **** 				if (c < 0xF0) {		/* Three-byte sequense */
3371:Libraries/fat_sd/ff.c **** 					f_read(fil, s, 2, &rc);
3372:Libraries/fat_sd/ff.c **** 					if (rc != 2) break;
3373:Libraries/fat_sd/ff.c **** 					c = (c << 12) | ((s[0] & 0x3F) << 6) | (s[1] & 0x3F);
3374:Libraries/fat_sd/ff.c **** 					if (c < 0x800) c = '?';
3375:Libraries/fat_sd/ff.c **** 				} else {			/* Reject four-byte sequense */
3376:Libraries/fat_sd/ff.c **** 					c = '?';
3377:Libraries/fat_sd/ff.c **** 				}
3378:Libraries/fat_sd/ff.c **** 			}
3379:Libraries/fat_sd/ff.c **** 		}
3380:Libraries/fat_sd/ff.c **** #endif
3381:Libraries/fat_sd/ff.c **** #if _USE_STRFUNC >= 2
3382:Libraries/fat_sd/ff.c **** 		if (c == '\r') continue;	/* Strip '\r' */
3383:Libraries/fat_sd/ff.c **** #endif
3384:Libraries/fat_sd/ff.c **** 		*p++ = c;
 2733              	rh	r1, [r5, #6]	@ movhi
 2734 0028 0134     		.loc 1 722 0
 2735 002a 7355     		ldr	r1, [r0, #8]
3385:Libraries/fat_sd/ff.c **** 		n++;
 2736              	L329:
 2737 002c 0136     		.loc 1 723 0
3386:Libraries/fat_sd/ff.c **** 		if (c == '\n') break;		/* Break on EOL */
 2738              	mp	r1, #1
 2739 002e 0A2B     		beq	.L379
 2740 0030 03D0     		ldr	r2, [r0, #0]
 2741              		ldr	r3, [r2, #28]
 2742              		cmp	r1, r3
 2743              		bcs	.L379
 2744 0032 08F1FF33 		.loc 1 725 0
 2745              		cbnz	r1, .L382
 2746 0036 9E42     		ldrb	r3, [r2, #0]	@ zero_extendqisi2
 2747 0038 EADB     		cmp	r3, #3
 2748              		bne	.L384
 2749              		.loc 1 726 0
3387:Libraries/fat_sd/ff.c **** 	}
3388:Libraries/fat_sd/ff.c **** 	*p = 0;
 2750              	, #40]
 2751 003a 0023     		.loc 1 728 0
 2752              		cbnz	r1, .L382
 2753 003c 2370     	.L384:
3389:Libraries/fat_sd/ff.c **** 	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
3390:Libraries/fat_sd/ff.c **** }
 2754              	c 1 729 0
 2755 003e 9E42     		movs	r3, #0
 2756 0040 14BF     		str	r3, [r5, #12]
 2757 0042 2846     		.loc 1 730 0
 2758 0044 1846     		ldrh	r3, [r2, #8]
 2759 0046 BDE8FC81 		cmp	r3, r6
 2760              		bls	.L379
 2761              	.LVL330:
 2762 004a C046     		.loc 1 732 0
 2763              		ldr	r3, [r2, #40]
 2764              		add	r3, r3, r6, lsr #4
 2765              		str	r3, [r5, #16]
 2766              		b	.L387
 2767              	.LVL331:
 2768              	.L382:
 2769              		.loc 1 735 0
 2770              		ldrb	r3, [r2, #2]	@ zero_extendqisi2
 2771              		lsls	r4, r3, #4
 2772              	.LVL332:
 2773 0000 70B5     		.loc 1 736 0
 2774              		b	.L388
 2775              	.LVL333:
 2776 0002 0546     	.L389:
 2777 0004 0E46     		.loc 1 737 0
 2778              		ldr	r0, [r5, #0]
 2779 0006 E980     		bl	get_fat
 2780              	.LVL334:
 2781 0008 8168     		.loc 1 738 0
 2782              		cmp	r0, #-1
 2783              	.LVL335:
 2784 000a 0129     		.loc 1 737 0
 2785 000c 39D0     		mov	r1, r0
 2786 000e 0268     	.LVL336:
 2787 0010 D369     		.loc 1 738 0
 2788 0012 9942     		bne	.L390
 2789 0014 35D2     		movs	r0, #1
 2790              		b	.L392
 2791 0016 71B9     	.L390:
 2792 0018 1378     		.loc 1 739 0
 2793 001a 032B     		cmp	r0, #1
 2794 001c 01D1     		bls	.L379
 2795              	.LVL337:
 2796 001e 916A     		ldr	r3, [r5, #0]
 2797              		ldr	r3, [r3, #28]
 2798 0020 49B9     		cmp	r0, r3
 2799              		bcs	.L379
 2800              		.loc 1 741 0
 2801 0022 0023     		subs	r3, r6, r4
 2802 0024 EB60     		uxth	r6, r3
 2803              	.LVL338:
 2804 0026 1389     	.L388:
 2805 0028 B342     		.loc 1 736 0
 2806 002a 2AD9     		cmp	r6, r4
 2807              		bcs	.L389
 2808              		.loc 1 743 0
 2809 002c 936A     		str	r1, [r5, #12]
 2810 002e 03EB1613 		.loc 1 744 0
 2811 0032 2B61     		ldr	r0, [r5, #0]
 2812 0034 1CE0     		bl	clust2sect
 2813              	.LVL339:
 2814              		lsrs	r4, r6, #4
 2815              	.LVL340:
 2816 0036 9378     		adds	r4, r4, r0
 2817 0038 1C01     		str	r4, [r5, #16]
 2818              	.LVL341:
 2819              	.L387:
 2820 003a 10E0     		.loc 1 747 0
 2821              		ldr	r3, [r5, #0]
 2822              		and	r2, r6, #15
 2823              		adds	r3, r3, #52
 2824 003c 2868     		add	r3, r3, r2, lsl #5
 2825 003e FFF7FEFF 		str	r3, [r5, #20]
 2826              		movs	r0, #0
 2827              		.loc 1 749 0
 2828 0042 B0F1FF3F 		b	.L392
 2829              	.LVL342:
 2830              	.L379:
 2831 0046 0146     		movs	r0, #2
 2832              	.L392:
 2833              		.loc 1 750 0
 2834 0048 01D1     		pop	{r4, r5, r6, pc}
 2835 004a 0120     	.LFE13:
 2837              		.section	.text.create_chain,"ax",%progbits
 2838              		.align	2
 2839 004e 0128     		.thumb
 2840 0050 17D9     		.thumb_func
 2842 0052 2B68     	create_chain:
 2843 0054 DB69     	.LFB11:
 2844 0056 9842     		.loc 1 640 0
 2845 0058 13D2     		@ args = 0, pretend = 0, frame = 0
 2846              		@ frame_needed = 0, uses_anonymous_args = 0
 2847 005a 331B     	.LVL343:
 2848 005c 9EB2     		push	{r4, r5, r6, r7, r8, lr}
 2849              	.LCFI16:
 2850              		.loc 1 640 0
 2851              		mov	r6, r0
 2852 005e A642     		.loc 1 644 0
 2853 0060 ECD2     		mov	r7, r1
 2854              		cbnz	r1, .L398
 2855 0062 E960     	.LVL344:
 2856              		.loc 1 645 0
 2857 0064 2868     		ldr	r5, [r0, #12]
 2858 0066 FFF7FEFF 	.LVL345:
 2859              		.loc 1 646 0
 2860 006a 3409     		cbz	r5, .L400
 2861              	.LVL346:
 2862 006c 2418     		ldr	r3, [r0, #28]
 2863 006e 2C61     		cmp	r5, r3
 2864              		bcs	.L400
 2865              		b	.L402
 2866              	.LVL347:
 2867 0070 2B68     	.L398:
 2868 0072 06F00F02 		.loc 1 649 0
 2869 0076 3433     		bl	get_fat
 2870 0078 03EB4213 	.LVL348:
 2871 007c 6B61     		.loc 1 650 0
 2872 007e 0020     		cmp	r0, #1
 2873              	.LVL349:
 2874 0080 00E0     		.loc 1 649 0
 2875              		mov	r2, r0
 2876              	.LVL350:
 2877 0082 0220     		.loc 1 650 0
 2878              		bhi	.L403
 2879              		movs	r2, #1
 2880 0084 70BD     		b	.L405
 2881              	.L403:
 2882              		.loc 1 651 0
 2883 0086 C046     		ldr	r3, [r6, #28]
 2884              		cmp	r0, r3
 2885              		bcc	.L405
 2886              	.LVL351:
 2887              		mov	r5, r7
 2888              	.LVL352:
 2889              		b	.L402
 2890              	.LVL353:
 2891              	.L400:
 2892              		movs	r5, #1
 2893              	.LVL354:
 2894 0000 2DE9F041 	.L402:
 2895              		mov	r4, r5
 2896              	.LVL355:
 2897 0004 0646     	.L407:
 2898              		.loc 1 658 0
 2899 0006 0F46     		ldr	r3, [r6, #28]
 2900 0008 29B9     		.loc 1 657 0
 2901              		adds	r4, r4, #1
 2902              		.loc 1 658 0
 2903 000a C568     		cmp	r4, r3
 2904              		bcc	.L408
 2905              		.loc 1 660 0
 2906 000c 7DB1     		cmp	r5, #1
 2907              		bls	.L410
 2908 000e C369     		movs	r4, #2
 2909 0010 9D42     	.L408:
 2910 0012 0CD2     		.loc 1 662 0
 2911 0014 0CE0     		mov	r0, r6
 2912              	.LVL356:
 2913              		mov	r1, r4
 2914              		bl	get_fat
 2915 0016 FFF7FEFF 	.LVL357:
 2916              		.loc 1 663 0
 2917              		mov	r2, r0
 2918 001a 0128     	.LVL358:
 2919              		cbz	r0, .L412
 2920              		.loc 1 664 0
 2921 001c 0246     		cmp	r0, #-1
 2922              		beq	.L405
 2923              	.LVL359:
 2924 001e 01D8     		cmp	r0, #1
 2925 0020 0122     		beq	.L405
 2926 0022 38E0     		.loc 1 666 0
 2927              		cmp	r4, r5
 2928              		beq	.L410
 2929 0024 F369     		b	.L407
 2930 0026 9842     	.LVL360:
 2931 0028 35D3     	.L412:
 2932              		.loc 1 669 0
 2933 002a 3D46     		mov	r0, r6
 2934              		mov	r1, r4
 2935 002c 00E0     		mvn	r2, #-268435456
 2936              	.LVL361:
 2937              		bl	put_fat
 2938 002e 0125     		cbnz	r0, .L416
 2939              		.loc 1 671 0
 2940              		cbz	r7, .L418
 2941 0030 2C46     		.loc 1 672 0
 2942              		mov	r0, r6
 2943              		mov	r1, r7
 2944              		mov	r2, r4
 2945 0032 F369     		bl	put_fat
 2946              		cbnz	r0, .L416
 2947 0034 0134     	.L418:
 2948              		.loc 1 677 0
 2949 0036 9C42     		ldr	r3, [r6, #16]
 2950 0038 02D3     		.loc 1 676 0
 2951              		str	r4, [r6, #12]
 2952 003a 012D     		.loc 1 677 0
 2953 003c 27D9     		cmp	r3, #-1
 2954 003e 0224     		beq	.L423
 2955              		.loc 1 678 0
 2956              		subs	r3, r3, #1
 2957 0040 3046     		str	r3, [r6, #16]
 2958              		.loc 1 679 0
 2959 0042 2146     		movs	r3, #1
 2960 0044 FFF7FEFF 		strb	r3, [r6, #5]
 2961              	.L423:
 2962              		mov	r2, r4
 2963 0048 0246     	.LVL362:
 2964              		b	.L405
 2965 004a 38B1     	.LVL363:
 2966              	.L410:
 2967 004c B0F1FF3F 		movs	r2, #0
 2968 0050 21D0     	.LVL364:
 2969              		b	.L405
 2970 0052 0128     	.LVL365:
 2971 0054 1FD0     	.L416:
 2972              		mov	r2, #-1
 2973 0056 AC42     	.LVL366:
 2974 0058 19D0     	.L405:
 2975 005a EAE7     		.loc 1 683 0
 2976              		mov	r0, r2
 2977              		pop	{r4, r5, r6, r7, r8, pc}
 2978              	.LFE11:
 2980 005e 2146     		.section	.text.f_lseek,"ax",%progbits
 2981 0060 6FF07042 		.align	2
 2982              		.global	f_lseek
 2983 0064 FFF7FEFF 		.thumb
 2984 0068 98B9     		.thumb_func
 2986 006a 2FB1     	f_lseek:
 2987              	.LFB38:
 2988 006c 3046     		.loc 1 2373 0
 2989 006e 3946     		@ args = 0, pretend = 0, frame = 0
 2990 0070 2246     		@ frame_needed = 0, uses_anonymous_args = 0
 2991 0072 FFF7FEFF 	.LVL367:
 2992 0076 60B9     		push	{r4, r5, r6, lr}
 2993              	.LCFI17:
 2994              		.loc 1 2373 0
 2995 0078 3369     		mov	r4, r0
 2996              		mov	r5, r1
 2997 007a F460     		.loc 1 2377 0
 2998              		ldr	r0, [r0, #0]
 2999 007c B3F1FF3F 	.LVL368:
 3000 0080 03D0     		ldrh	r1, [r4, #4]
 3001              	.LVL369:
 3002 0082 013B     		bl	validate
 3003 0084 3361     		.loc 1 2378 0
 3004              		mov	r1, r0
 3005 0086 0123     		cmp	r0, #0
 3006 0088 7371     		bne	.L427
 3007              		.loc 1 2379 0
 3008 008a 2246     		ldrb	r2, [r4, #6]	@ zero_extendqisi2
 3009              		tst	r2, #128
 3010 008c 03E0     		bne	.L473
 3011              	.LBB4:
 3012              		.loc 1 2449 0
 3013 008e 0022     		ldr	r3, [r4, #12]
 3014              	.LVL370:
 3015 0090 01E0     		cmp	r5, r3
 3016              		bls	.L430
 3017              		tst	r2, #2
 3018 0092 4FF0FF32 		it	eq
 3019              		moveq	r5, r3
 3020              	.LVL371:
 3021              	.L430:
 3022 0096 1046     		.loc 1 2455 0
 3023 0098 BDE8F081 		ldr	r2, [r4, #8]
 3024              	.LVL372:
 3025              		.loc 1 2456 0
 3026              		str	r1, [r4, #8]
 3027              		.loc 1 2457 0
 3028              		cmp	r5, #0
 3029              		beq	.L433
 3030              		.loc 1 2458 0
 3031              		ldr	r0, [r4, #0]
 3032              		ldrb	r3, [r0, #2]	@ zero_extendqisi2
 3033              		lsls	r6, r3, #9
 3034              	.LVL373:
 3035              		.loc 1 2459 0
 3036              		cbz	r2, .L435
 3037              		subs	r1, r2, #1
 3038 0000 70B5     		subs	r3, r5, #1
 3039              		udiv	r3, r3, r6
 3040              		udiv	r2, r1, r6
 3041 0002 0446     	.LVL374:
 3042 0004 0D46     		cmp	r3, r2
 3043              		bcc	.L435
 3044 0006 0068     		.loc 1 2461 0
 3045              		negs	r3, r6
 3046 0008 A188     		ands	r3, r3, r1
 3047              		str	r3, [r4, #8]
 3048 000a FFF7FEFF 		.loc 1 2462 0
 3049              		subs	r5, r5, r3
 3050 000e 0146     		.loc 1 2463 0
 3051 0010 0028     		ldr	r1, [r4, #20]
 3052 0012 40F09F80 	.LVL375:
 3053              		.loc 1 2459 0
 3054 0016 A279     		b	.L438
 3055 0018 12F0800F 	.LVL376:
 3056 001c 29D1     	.L435:
 3057              		.loc 1 2465 0
 3058              		ldr	r1, [r4, #16]
 3059 001e E368     	.LVL377:
 3060              		.loc 1 2467 0
 3061 0020 9D42     		cbnz	r1, .L439
 3062 0022 03D9     		.loc 1 2468 0
 3063 0024 12F0020F 		bl	create_chain
 3064 0028 08BF     	.LVL378:
 3065 002a 1D46     		.loc 1 2469 0
 3066              		cmp	r0, #1
 3067              	.LVL379:
 3068              		.loc 1 2468 0
 3069 002c A268     		mov	r1, r0
 3070              	.LVL380:
 3071              		.loc 1 2469 0
 3072 002e A160     		bne	.L441
 3073              	.L478:
 3074 0030 002D     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 3075 0032 5BD0     		mvn	r3, r3, lsl #25
 3076              		mvn	r3, r3, lsr #25
 3077 0034 2068     		strb	r3, [r4, #6]
 3078 0036 8378     	.L473:
 3079 0038 5E02     		movs	r0, #2
 3080              		b	.L427
 3081              	.L441:
 3082 003a 6AB1     		.loc 1 2470 0
 3083 003c 511E     		cmp	r0, #-1
 3084 003e 6B1E     		beq	.L476
 3085 0040 B3FBF6F3 	.LVL381:
 3086 0044 B1FBF6F2 		.loc 1 2471 0
 3087              		str	r0, [r4, #16]
 3088 0048 9342     	.LVL382:
 3089 004a 05D3     	.L439:
 3090              		.loc 1 2474 0
 3091 004c 7342     		str	r1, [r4, #20]
 3092 004e 0B40     	.L438:
 3093 0050 A360     		.loc 1 2476 0
 3094              		cbnz	r1, .L445
 3095 0052 ED1A     		b	.L433
 3096              	.L446:
 3097 0054 6169     		.loc 1 2479 0
 3098              		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 3099              		tst	r3, #2
 3100 0056 13E0     		beq	.L447
 3101              		.loc 1 2480 0
 3102              		ldr	r0, [r4, #0]
 3103              		bl	create_chain
 3104 0058 2169     	.LVL383:
 3105              		.loc 1 2481 0
 3106              		mov	r1, r0
 3107 005a 81B9     	.LVL384:
 3108              		cbnz	r0, .L449
 3109 005c FFF7FEFF 		mov	r5, r6
 3110              		b	.L451
 3111              	.LVL385:
 3112 0060 0128     	.L447:
 3113              		.loc 1 2486 0
 3114              		ldr	r0, [r4, #0]
 3115 0062 0146     		bl	get_fat
 3116              	.LVL386:
 3117              		mov	r1, r0
 3118 0064 07D1     	.LVL387:
 3119              	.L449:
 3120 0066 A379     		.loc 1 2487 0
 3121 0068 6FEA4363 		cmp	r1, #-1
 3122 006c 6FEA5363 		beq	.L476
 3123 0070 A371     		.loc 1 2488 0
 3124              		cmp	r1, #1
 3125 0072 0220     		bls	.L478
 3126 0074 6EE0     		ldr	r3, [r4, #0]
 3127              		ldr	r3, [r3, #28]
 3128              		cmp	r1, r3
 3129 0076 B0F1FF3F 		bcs	.L478
 3130 007a 58D0     		.loc 1 2490 0
 3131              		ldr	r3, [r4, #8]
 3132              		.loc 1 2489 0
 3133 007c 2061     		str	r1, [r4, #20]
 3134              		.loc 1 2490 0
 3135              		adds	r3, r3, r6
 3136              		str	r3, [r4, #8]
 3137 007e 6161     		.loc 1 2491 0
 3138              		subs	r5, r5, r6
 3139              	.LVL388:
 3140 0080 E9B9     	.L445:
 3141 0082 33E0     		.loc 1 2477 0
 3142              		cmp	r5, r6
 3143              		bhi	.L446
 3144 0084 A379     	.L451:
 3145 0086 13F0020F 		.loc 1 2493 0
 3146 008a 06D0     		ldr	r3, [r4, #8]
 3147              		adds	r3, r3, r5
 3148 008c 2068     		str	r3, [r4, #8]
 3149 008e FFF7FEFF 		.loc 1 2494 0
 3150              		lsls	r3, r5, #23
 3151              		lsrs	r3, r3, #23
 3152 0092 0146     		cbz	r3, .L433
 3153              		.loc 1 2495 0
 3154 0094 28B9     		ldr	r0, [r4, #0]
 3155 0096 3546     		bl	clust2sect
 3156 0098 13E0     	.LVL389:
 3157              		.loc 1 2496 0
 3158              		cbnz	r0, .L458
 3159              		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 3160 009a 2068     		adds	r0, r0, #2
 3161 009c FFF7FEFF 		mvn	r3, r3, lsl #25
 3162              		mvn	r3, r3, lsr #25
 3163 00a0 0146     		strb	r3, [r4, #6]
 3164              		b	.L427
 3165              	.L458:
 3166              		.loc 1 2497 0
 3167 00a2 B1F1FF3F 		add	r5, r0, r5, lsr #9
 3168 00a6 42D0     	.LVL390:
 3169              		b	.L460
 3170 00a8 0129     	.LVL391:
 3171 00aa DCD9     	.L433:
 3172 00ac 2368     		movs	r5, #0
 3173 00ae DB69     	.LVL392:
 3174 00b0 9942     	.L460:
 3175 00b2 D8D2     		.loc 1 2501 0
 3176              		ldr	r3, [r4, #8]
 3177 00b4 A368     	.LVL393:
 3178              		lsls	r3, r3, #23
 3179 00b6 6161     		lsrs	r3, r3, #23
 3180              		cbz	r3, .L461
 3181 00b8 9B19     		ldr	r2, [r4, #24]
 3182 00ba A360     	.LVL394:
 3183              		cmp	r5, r2
 3184 00bc AD1B     		beq	.L461
 3185              		.loc 1 2504 0
 3186              		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 3187              		tst	r3, #64
 3188 00be B542     		beq	.L464
 3189 00c0 E0D8     		.loc 1 2505 0
 3190              		ldr	r3, [r4, #0]
 3191              		add	r1, r4, #36
 3192 00c2 A368     	.LVL395:
 3193 00c4 5B19     		ldrb	r0, [r3, #1]	@ zero_extendqisi2
 3194 00c6 A360     	.LVL396:
 3195              		movs	r3, #1
 3196 00c8 EB05     		bl	disk_write
 3197 00ca DB0D     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 3198 00cc 73B1     		cbnz	r0, .L477
 3199              		.loc 1 2507 0
 3200 00ce 2068     		bic	r3, r3, #64
 3201 00d0 FFF7FEFF 		strb	r3, [r4, #6]
 3202              	.LVL397:
 3203              	.L464:
 3204 00d4 38B9     		.loc 1 2510 0
 3205 00d6 A379     		ldr	r3, [r4, #0]
 3206 00d8 0230     		add	r1, r4, #36
 3207 00da 6FEA4363 	.LVL398:
 3208 00de 6FEA5363 		ldrb	r0, [r3, #1]	@ zero_extendqisi2
 3209 00e2 A371     	.LVL399:
 3210 00e4 36E0     		mov	r2, r5
 3211              		movs	r3, #1
 3212              		bl	disk_read
 3213 00e6 00EB5525 		cbz	r0, .L468
 3214              	.LVL400:
 3215 00ea 00E0     	.L476:
 3216              		.loc 1 2511 0
 3217              		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 3218 00ec 0025     	.L477:
 3219              		mvn	r3, r3, lsl #25
 3220              		mvn	r3, r3, lsr #25
 3221              		strb	r3, [r4, #6]
 3222 00ee A368     		movs	r0, #1
 3223              		b	.L427
 3224 00f0 DB05     	.LVL401:
 3225 00f2 DB0D     	.L468:
 3226 00f4 23B3     		.loc 1 2513 0
 3227 00f6 A269     		str	r5, [r4, #24]
 3228              	.LVL402:
 3229 00f8 9542     	.L461:
 3230 00fa 21D0     		.loc 1 2516 0
 3231              		ldr	r2, [r4, #8]
 3232 00fc A379     	.LVL403:
 3233 00fe 13F0400F 		ldr	r3, [r4, #12]
 3234 0102 0BD0     		cmp	r2, r3
 3235              		bls	.L474
 3236 0104 2368     		.loc 1 2518 0
 3237 0106 04F12401 		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 3238              		.loc 1 2517 0
 3239 010a 5878     		str	r2, [r4, #12]
 3240              		.loc 1 2518 0
 3241 010c 0123     		orr	r3, r3, #32
 3242 010e FFF7FEFF 		strb	r3, [r4, #6]
 3243 0112 A379     	.L474:
 3244 0114 60B9     		movs	r0, #0
 3245              	.LVL404:
 3246 0116 23F04003 	.L427:
 3247 011a A371     	.LBE4:
 3248              		.loc 1 2524 0
 3249              		pop	{r4, r5, r6, pc}
 3250              	.LFE38:
 3252 011e 04F12401 		.section	.text.f_write,"ax",%progbits
 3253              		.align	2
 3254 0122 5878     		.global	f_write
 3255              		.thumb
 3256 0124 2A46     		.thumb_func
 3258 0128 FFF7FEFF 	f_write:
 3259 012c 38B1     	.LFB33:
 3260              		.loc 1 2117 0
 3261              		@ args = 0, pretend = 0, frame = 0
 3262              		@ frame_needed = 0, uses_anonymous_args = 0
 3263 012e A379     	.LVL405:
 3264              		push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 3265 0130 6FEA4363 	.LCFI18:
 3266 0134 6FEA5363 	.LVL406:
 3267 0138 A371     		.loc 1 2117 0
 3268 013a 0120     		mov	r4, r0
 3269 013c 0AE0     		mov	fp, r3
 3270              	.LVL407:
 3271              		.loc 1 2125 0
 3272              		movs	r3, #0
 3273 013e A561     	.LVL408:
 3274              		.loc 1 2117 0
 3275              		mov	r5, r1
 3276              		.loc 1 2125 0
 3277 0140 A268     		str	r3, [fp, #0]
 3278              		.loc 1 2127 0
 3279 0142 E368     		ldr	r0, [r0, #0]
 3280 0144 9A42     	.LVL409:
 3281 0146 04D9     		ldrh	r1, [r4, #4]
 3282              	.LVL410:
 3283 0148 A379     		.loc 1 2117 0
 3284              		mov	r8, r2
 3285 014a E260     		.loc 1 2127 0
 3286              		bl	validate
 3287 014c 43F02003 	.LVL411:
 3288 0150 A371     		.loc 1 2128 0
 3289              		cmp	r0, #0
 3290 0152 0020     		bne	.L482
 3291              		.loc 1 2129 0
 3292              		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 3293              		tst	r3, #128
 3294              		bne	.L527
 3295 0154 70BD     		.loc 1 2131 0
 3296              		tst	r3, #2
 3297              		bne	.L485
 3298 0156 C046     		movs	r0, #7
 3299              		b	.L482
 3300              	.L485:
 3301              		.loc 1 2133 0
 3302              		ldr	r3, [r4, #12]
 3303              		.loc 1 2121 0
 3304              		mov	sl, r5
 3305              	.LVL412:
 3306              		.loc 1 2133 0
 3307              		cmn	r8, r3
 3308              		it	cs
 3309              		movcs	r8, #0
 3310 0000 2DE9F84F 		.loc 1 2121 0
 3311              		b	.L489
 3312              	.LVL413:
 3313              	.L490:
 3314 0004 0446     		.loc 1 2137 0
 3315 0006 9B46     		ldr	r2, [r4, #8]
 3316              		lsls	r3, r2, #23
 3317              		lsrs	r3, r3, #23
 3318 0008 0023     		cmp	r3, #0
 3319              		bne	.L491
 3320              		.loc 1 2138 0
 3321 000a 0D46     		ldr	r0, [r4, #0]
 3322              		ldrb	r3, [r0, #2]	@ zero_extendqisi2
 3323 000c CBF80030 		subs	r3, r3, #1
 3324              		and	r3, r3, r2, lsr #9
 3325 0010 0068     		uxtb	r9, r3
 3326              		.loc 1 2139 0
 3327 0012 A188     		cmp	r9, #0
 3328              		bne	.L493
 3329              		.loc 1 2140 0
 3330 0014 9046     		cbnz	r2, .L495
 3331              		.loc 1 2141 0
 3332 0016 FFF7FEFF 		ldr	r1, [r4, #16]
 3333              	.LVL414:
 3334              		.loc 1 2142 0
 3335 001a 0028     		cbnz	r1, .L497
 3336 001c 40F0C880 		.loc 1 2143 0
 3337              		bl	create_chain
 3338 0020 A379     	.LVL415:
 3339 0022 13F0800F 		mov	r1, r0
 3340 0026 33D1     	.LVL416:
 3341              		str	r0, [r4, #16]
 3342 0028 13F0020F 		b	.L499
 3343 002c 01D1     	.LVL417:
 3344 002e 0720     	.L495:
 3345 0030 BEE0     		.loc 1 2145 0
 3346              		ldr	r1, [r4, #20]
 3347              		bl	create_chain
 3348 0032 E368     		mov	r1, r0
 3349              	.LVL418:
 3350 0034 AA46     	.L499:
 3351              		.loc 1 2147 0
 3352              		cmp	r1, #0
 3353 0036 18EB030F 		beq	.L500
 3354 003a 28BF     	.L497:
 3355 003c 4FF00008 		.loc 1 2148 0
 3356              		cmp	r1, #1
 3357 0040 A8E0     		bne	.L501
 3358              		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 3359              		mvn	r3, r3, lsl #25
 3360              		mvn	r3, r3, lsr #25
 3361 0042 A268     		strb	r3, [r4, #6]
 3362 0044 D305     	.L527:
 3363 0046 DB0D     		movs	r0, #2
 3364 0048 002B     		b	.L482
 3365 004a 40F08480 	.LVL419:
 3366              	.L501:
 3367 004e 2068     		.loc 1 2149 0
 3368 0050 8378     		cmp	r1, #-1
 3369 0052 013B     		beq	.L530
 3370 0054 03EA5223 		.loc 1 2150 0
 3371 0058 5FFA83F9 		str	r1, [r4, #20]
 3372              	.L493:
 3373 005c B9F1000F 		.loc 1 2156 0
 3374 0060 1CD1     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 3375              		tst	r3, #64
 3376 0062 32B9     		beq	.L505
 3377              		.loc 1 2157 0
 3378 0064 2169     		ldr	r3, [r4, #0]
 3379              		add	r1, r4, #36
 3380              	.LVL420:
 3381 0066 59B9     		ldrb	r0, [r3, #1]	@ zero_extendqisi2
 3382              	.LVL421:
 3383 0068 FFF7FEFF 		ldr	r2, [r4, #24]
 3384              		movs	r3, #1
 3385 006c 0146     		bl	disk_write
 3386              		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 3387 006e 2061     		cmp	r0, #0
 3388 0070 03E0     		bne	.L529
 3389              		.loc 1 2159 0
 3390              		bic	r3, r3, #64
 3391              		strb	r3, [r4, #6]
 3392 0072 6169     	.LVL422:
 3393 0074 FFF7FEFF 	.L505:
 3394 0078 0146     		.loc 1 2162 0
 3395              		ldr	r6, [r4, #0]
 3396              		ldr	r1, [r4, #20]
 3397              	.LVL423:
 3398 007a 0029     		mov	r0, r6
 3399 007c 00F08E80 	.LVL424:
 3400              		bl	clust2sect
 3401              		.loc 1 2163 0
 3402 0080 0129     		cbnz	r0, .L509
 3403 0082 07D1     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 3404 0084 A379     		adds	r0, r0, #2
 3405 0086 6FEA4363 		mvn	r3, r3, lsl #25
 3406 008a 6FEA5363 		mvn	r3, r3, lsr #25
 3407 008e A371     		strb	r3, [r4, #6]
 3408              		b	.L482
 3409 0090 0220     	.L509:
 3410 0092 8DE0     		.loc 1 2166 0
 3411              		lsrs	r5, r8, #9
 3412              	.LVL425:
 3413              		.loc 1 2164 0
 3414 0094 B1F1FF3F 		add	r7, r9, r0
 3415 0098 54D0     		.loc 1 2166 0
 3416              		beq	.L511
 3417 009a 6161     		.loc 1 2167 0
 3418              		ldrb	r2, [r6, #2]	@ zero_extendqisi2
 3419              		add	r3, r5, r9
 3420 009c A379     		cmp	r3, r2
 3421 009e 13F0400F 		.loc 1 2168 0
 3422 00a2 0DD0     		it	hi
 3423              		rsbhi	r5, r9, r2
 3424 00a4 2368     		.loc 1 2169 0
 3425 00a6 04F12401 		ldrb	r0, [r6, #1]	@ zero_extendqisi2
 3426              		mov	r1, sl
 3427 00aa 5878     		mov	r2, r7
 3428              		uxtb	r3, r5
 3429 00ac A269     	.LVL426:
 3430 00ae 0123     		bl	disk_write
 3431 00b0 FFF7FEFF 	.LVL427:
 3432 00b4 A379     		cbnz	r0, .L530
 3433 00b6 0028     		.loc 1 2177 0
 3434 00b8 45D1     		ldr	r3, [r4, #24]
 3435              		subs	r2, r3, r7
 3436 00ba 23F04003 		cmp	r2, r5
 3437 00be A371     	.LVL428:
 3438              		bcs	.L517
 3439              		.loc 1 2178 0
 3440              		add	r1, sl, r2, lsl #9
 3441 00c0 2668     		add	r0, r4, #36
 3442 00c2 6169     		mov	r2, #512
 3443              		bl	mem_cpy
 3444 00c4 3046     		.loc 1 2179 0
 3445              		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 3446 00c6 FFF7FEFF 		bic	r3, r3, #64
 3447              		strb	r3, [r4, #6]
 3448 00ca 38B9     	.L517:
 3449 00cc A379     		.loc 1 2182 0
 3450 00ce 0230     		lsls	r5, r5, #9
 3451 00d0 6FEA4363 	.LVL429:
 3452 00d4 6FEA5363 		.loc 1 2183 0
 3453 00d8 A371     		b	.L519
 3454 00da 69E0     	.LVL430:
 3455              	.L511:
 3456              		.loc 1 2191 0
 3457 00dc 5FEA5825 		ldr	r3, [r4, #24]
 3458              		cmp	r3, r7
 3459              		beq	.L520
 3460 00e0 09EB0007 		.loc 1 2192 0
 3461              		ldr	r2, [r4, #8]
 3462 00e4 1FD0     		ldr	r3, [r4, #12]
 3463              		cmp	r2, r3
 3464 00e6 B278     		bcs	.L520
 3465 00e8 05EB0903 		ldrb	r0, [r6, #1]	@ zero_extendqisi2
 3466 00ec 9342     		add	r1, r4, #36
 3467              		mov	r2, r7
 3468 00ee 88BF     		movs	r3, #1
 3469 00f0 C9EB0205 		bl	disk_read
 3470              		cbz	r0, .L520
 3471 00f4 7078     	.LVL431:
 3472 00f6 5146     	.L530:
 3473 00f8 3A46     		.loc 1 2194 0
 3474 00fa EBB2     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 3475              	.L529:
 3476 00fc FFF7FEFF 		mvn	r3, r3, lsl #25
 3477              		mvn	r3, r3, lsr #25
 3478 0100 00BB     		strb	r3, [r4, #6]
 3479              		movs	r0, #1
 3480 0102 A369     		b	.L482
 3481 0104 DA1B     	.LVL432:
 3482 0106 AA42     	.L520:
 3483              		.loc 1 2197 0
 3484 0108 0BD2     		str	r7, [r4, #24]
 3485              	.LVL433:
 3486 010a 0AEB4221 	.L491:
 3487 010e 04F12400 		.loc 1 2199 0
 3488 0112 4FF40072 		ldr	r0, [r4, #8]
 3489 0116 FFF7FEFF 		.loc 1 2207 0
 3490              		mov	r1, sl
 3491 011a A379     		.loc 1 2199 0
 3492 011c 23F04003 		lsls	r0, r0, #23
 3493 0120 A371     		lsrs	r0, r0, #23
 3494              		rsb	r3, r0, #512
 3495              	.LVL434:
 3496 0122 6D02     		cmp	r8, r3
 3497              		ite	cc
 3498              		movcc	r5, r8
 3499 0124 2BE0     		movcs	r5, r3
 3500              	.LVL435:
 3501              		.loc 1 2207 0
 3502              		add	r3, r4, #36
 3503 0126 A369     		adds	r0, r3, r0
 3504 0128 BB42     		mov	r2, r5
 3505 012a 13D0     		bl	mem_cpy
 3506              		.loc 1 2208 0
 3507 012c A268     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 3508 012e E368     		orr	r3, r3, #64
 3509 0130 9A42     		strb	r3, [r4, #6]
 3510 0132 0FD2     	.L519:
 3511 0134 7078     		.loc 1 2136 0
 3512 0136 04F12401 		ldr	r3, [r4, #8]
 3513 013a 3A46     		add	sl, sl, r5
 3514 013c 0123     		adds	r3, r3, r5
 3515 013e FFF7FEFF 		str	r3, [r4, #8]
 3516 0142 38B1     		ldr	r3, [fp, #0]
 3517              		rsb	r8, r5, r8
 3518              		adds	r3, r3, r5
 3519              		str	r3, [fp, #0]
 3520 0144 A379     	.L489:
 3521              		.loc 1 2135 0
 3522 0146 6FEA4363 		cmp	r8, #0
 3523 014a 6FEA5363 		bne	.L490
 3524 014e A371     	.LVL436:
 3525 0150 0120     	.L500:
 3526 0152 2DE0     		.loc 1 2212 0
 3527              		ldr	r3, [r4, #12]
 3528              		ldr	r2, [r4, #8]
 3529              		cmp	r2, r3
 3530 0154 A761     		.loc 1 2213 0
 3531              		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 3532              		.loc 1 2212 0
 3533              		it	hi
 3534 0156 A068     		strhi	r2, [r4, #12]
 3535              		.loc 1 2213 0
 3536 0158 5146     		orr	r3, r3, #32
 3537              		strb	r3, [r4, #6]
 3538 015a C005     		movs	r0, #0
 3539 015c C00D     	.LVL437:
 3540 015e C0F50073 	.L482:
 3541              		.loc 1 2216 0
 3542 0162 9845     		pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 3543 0164 34BF     	.LFE33:
 3545 0168 1D46     		.section	.text.f_putc,"ax",%progbits
 3546              		.align	2
 3547              		.global	f_putc
 3548 016a 04F12403 		.thumb
 3549 016e 1818     		.thumb_func
 3551 0172 FFF7FEFF 	f_putc:
 3552              	.LFB51:
 3553 0176 A379     		.loc 1 3403 0
 3554 0178 43F04003 		@ args = 0, pretend = 0, frame = 8
 3555 017c A371     		@ frame_needed = 0, uses_anonymous_args = 0
 3556              	.LVL438:
 3557              		push	{r0, r1, r2, lr}
 3558 017e A368     	.LCFI19:
 3559 0180 AA44     	.LVL439:
 3560 0182 5B19     		.loc 1 3432 0
 3561 0184 A360     		movs	r2, #1
 3562 0186 DBF80030 		.loc 1 3429 0
 3563 018a C5EB0808 		strb	r0, [sp, #5]
 3564 018e 5B19     	.LVL440:
 3565 0190 CBF80030 		.loc 1 3432 0
 3566              		mov	r3, sp
 3567              		mov	r0, r1
 3568 0194 B8F1000F 	.LVL441:
 3569 0198 7FF453AF 		add	r1, sp, #5
 3570              	.LVL442:
 3571              		bl	f_write
 3572              	.LVL443:
 3573 019c E368     		.loc 1 3434 0
 3574 019e A268     		ldr	r0, [sp, #0]
 3575 01a0 9A42     	.LVL444:
 3576              		cmp	r0, #1
 3577 01a2 A379     		ite	eq
 3578              		moveq	r0, #1
 3579 01a4 88BF     		movne	r0, #-1
 3580 01a6 E260     		pop	{r1, r2, r3, pc}
 3581              	.LFE51:
 3583 01ac A371     		.section	.text.f_puts,"ax",%progbits
 3584 01ae 0020     		.align	2
 3585              		.global	f_puts
 3586              		.thumb
 3587              		.thumb_func
 3589              	f_puts:
 3590              	.LFB52:
 3591              		.loc 1 3446 0
 3592              		@ args = 0, pretend = 0, frame = 0
 3593              		@ frame_needed = 0, uses_anonymous_args = 0
 3594              	.LVL445:
 3595              		push	{r4, r5, r6, lr}
 3596              	.LCFI20:
 3597              		.loc 1 3446 0
 3598              		mov	r6, r0
3391:Libraries/fat_sd/ff.c **** 
3392:Libraries/fat_sd/ff.c **** 
3393:Libraries/fat_sd/ff.c **** 
3394:Libraries/fat_sd/ff.c **** #if !_FS_READONLY
3395:Libraries/fat_sd/ff.c **** #include <stdarg.h>
3396:Libraries/fat_sd/ff.c **** /*-----------------------------------------------------------------------*/
3397:Libraries/fat_sd/ff.c **** /* Put a character to the file                                           */
3398:Libraries/fat_sd/ff.c **** /*-----------------------------------------------------------------------*/
3399:Libraries/fat_sd/ff.c **** int f_putc (
3400:Libraries/fat_sd/ff.c **** 	TCHAR c,	/* A character to be output */
3401:Libraries/fat_sd/ff.c **** 	FIL* fil	/* Pointer to the file object */
3402:Libraries/fat_sd/ff.c **** )
3403:Libraries/fat_sd/ff.c **** {
 3599              		r5, r1
 3600              		movs	r4, #0
 3601              	.LVL446:
 3602              		.loc 1 3450 0
 3603 0000 07B5     		b	.L537
 3604              	.LVL447:
 3605              	.L538:
3404:Libraries/fat_sd/ff.c **** 	UINT bw, btw;
3405:Libraries/fat_sd/ff.c **** 	BYTE s[3];
3406:Libraries/fat_sd/ff.c **** 
3407:Libraries/fat_sd/ff.c **** 
3408:Libraries/fat_sd/ff.c **** #if _USE_STRFUNC >= 2
3409:Libraries/fat_sd/ff.c **** 	if (c == '\n') f_putc ('\r', fil);	/* LF -> CRLF conversion */
3410:Libraries/fat_sd/ff.c **** #endif
3411:Libraries/fat_sd/ff.c **** 
3412:Libraries/fat_sd/ff.c **** #if _LFN_UNICODE	/* Write the character in UTF-8 encoding */
3413:Libraries/fat_sd/ff.c **** 	if (c < 0x80) {			/* 7-bit */
3414:Libraries/fat_sd/ff.c **** 		s[0] = (BYTE)c;
3415:Libraries/fat_sd/ff.c **** 		btw = 1;
3416:Libraries/fat_sd/ff.c **** 	} else {
3417:Libraries/fat_sd/ff.c **** 		if (c < 0x800) {	/* 11-bit */
3418:Libraries/fat_sd/ff.c **** 			s[0] = (BYTE)(0xC0 | (c >> 6));
3419:Libraries/fat_sd/ff.c **** 			s[1] = (BYTE)(0x80 | (c & 0x3F));
3420:Libraries/fat_sd/ff.c **** 			btw = 2;
3421:Libraries/fat_sd/ff.c **** 		} else {			/* 16-bit */
3422:Libraries/fat_sd/ff.c **** 			s[0] = (BYTE)(0xE0 | (c >> 12));
3423:Libraries/fat_sd/ff.c **** 			s[1] = (BYTE)(0x80 | ((c >> 6) & 0x3F));
3424:Libraries/fat_sd/ff.c **** 			s[2] = (BYTE)(0x80 | (c & 0x3F));
3425:Libraries/fat_sd/ff.c **** 			btw = 3;
3426:Libraries/fat_sd/ff.c **** 		}
3427:Libraries/fat_sd/ff.c **** 	}
3428:Libraries/fat_sd/ff.c **** #else				/* Write the character without conversion */
3429:Libraries/fat_sd/ff.c **** 	s[0] = (BYTE)c;
3430:Libraries/fat_sd/ff.c **** 	btw = 1;
3431:Libraries/fat_sd/ff.c **** #endif
3432:Libraries/fat_sd/ff.c **** 	f_write(fil, s, btw, &bw);		/* Write the char to the file */
 3606              	 3451 0
 3607 0002 0122     		mov	r1, r5
 3608              		bl	f_putc
 3609 0004 8DF80500 		cmp	r0, #-1
 3610              		bne	.L539
 3611              		mov	r4, r0
 3612 0008 6B46     		b	.L541
 3613 000a 0846     	.L539:
 3614              		.loc 1 3450 0
 3615 000c 0DF10501 		adds	r4, r4, #1
 3616              	.LVL448:
 3617 0010 FFF7FEFF 	.L537:
 3618              		ldrb	r0, [r4, r6]	@ zero_extendqisi2
3433:Libraries/fat_sd/ff.c **** 	return (bw == btw) ? 1 : EOF;	/* Return the result */
3434:Libraries/fat_sd/ff.c **** }
 3619              	bne	.L538
 3620 0014 0098     	.L541:
 3621              		.loc 1 3454 0
 3622 0016 0128     		mov	r0, r4
 3623 0018 0CBF     		pop	{r4, r5, r6, pc}
 3624 001a 0120     	.LFE52:
 3626 0020 0EBD     		.section	.text.f_printf,"ax",%progbits
 3627              		.align	2
 3628              		.global	f_printf
 3629 0022 C046     		.thumb
 3630              		.thumb_func
 3632              	f_printf:
 3633              	.LFB53:
 3634              		.loc 1 3467 0
 3635              		@ args = 4, pretend = 12, frame = 24
 3636              		@ frame_needed = 0, uses_anonymous_args = 1
3435:Libraries/fat_sd/ff.c **** 
3436:Libraries/fat_sd/ff.c **** 
3437:Libraries/fat_sd/ff.c **** 
3438:Libraries/fat_sd/ff.c **** 
3439:Libraries/fat_sd/ff.c **** /*-----------------------------------------------------------------------*/
3440:Libraries/fat_sd/ff.c **** /* Put a string to the file                                              */
3441:Libraries/fat_sd/ff.c **** /*-----------------------------------------------------------------------*/
3442:Libraries/fat_sd/ff.c **** int f_puts (
3443:Libraries/fat_sd/ff.c **** 	const TCHAR* str,	/* Pointer to the string to be output */
3444:Libraries/fat_sd/ff.c **** 	FIL* fil			/* Pointer to the file object */
3445:Libraries/fat_sd/ff.c **** )
3446:Libraries/fat_sd/ff.c **** {
 3637              	, r2, r3}
 3638              	.LCFI21:
 3639              		push	{r4, r5, r6, r7, r8, r9, sl, lr}
 3640              	.LCFI22:
 3641 0000 70B5     		sub	sp, sp, #28
 3642              	.LCFI23:
 3643              		.loc 1 3467 0
 3644 0002 0646     		add	r3, sp, #60
 3645 0004 0D46     		ldr	r6, [r3], #4
 3646 0006 0024     		.loc 1 3476 0
 3647              		movs	r1, #0
3447:Libraries/fat_sd/ff.c **** 	int n;
3448:Libraries/fat_sd/ff.c **** 
3449:Libraries/fat_sd/ff.c **** 
3450:Libraries/fat_sd/ff.c **** 	for (n = 0; *str; str++, n++) {
 3648              	loc 1 3467 0
 3649 0008 08E0     		mov	r8, r0
 3650              		.loc 1 3476 0
 3651              		str	r3, [sp, #20]
3451:Libraries/fat_sd/ff.c **** 		if (f_putc(*str, fil) == EOF) return EOF;
 3652              	451:
 3653 000a 2946     		mov	r9, r1
 3654 000c FFF7FEFF 	.LVL452:
 3655 0010 B0F1FF3F 	.L544:
 3656 0014 01D1     		.loc 1 3479 0
 3657 0016 0446     		ldrb	r0, [r6, #0]	@ zero_extendqisi2
 3658 0018 03E0     	.LVL453:
 3659              		.loc 1 3480 0
 3660              		cmp	r0, #0
 3661 001a 0134     		beq	.L545
 3662              		.loc 1 3479 0
 3663              		adds	r6, r6, #1
 3664 001c A05D     		.loc 1 3481 0
 3665 001e 0028     		cmp	r0, #37
 3666 0020 F3D1     		beq	.L547
 3667              		.loc 1 3482 0
3452:Libraries/fat_sd/ff.c **** 	}
3453:Libraries/fat_sd/ff.c **** 	return n;
3454:Libraries/fat_sd/ff.c **** }
 3668              	454:
 3669 0022 2046     		bl	f_putc
 3670 0024 70BD     	.LVL455:
 3671              		.loc 1 3483 0
 3672              		cmp	r0, #-1
 3673 0026 C046     	.LVL456:
 3674              		.loc 1 3482 0
 3675              		mov	r1, r0
 3676              	.LVL457:
 3677              		.loc 1 3483 0
 3678              		beq	.L549
 3679              		movs	r1, #1
 3680              		b	.L549
3455:Libraries/fat_sd/ff.c **** 
3456:Libraries/fat_sd/ff.c **** 
3457:Libraries/fat_sd/ff.c **** 
3458:Libraries/fat_sd/ff.c **** 
3459:Libraries/fat_sd/ff.c **** /*-----------------------------------------------------------------------*/
3460:Libraries/fat_sd/ff.c **** /* Put a formatted string to the file                                    */
3461:Libraries/fat_sd/ff.c **** /*-----------------------------------------------------------------------*/
3462:Libraries/fat_sd/ff.c **** int f_printf (
3463:Libraries/fat_sd/ff.c **** 	FIL* fil,			/* Pointer to the file object */
3464:Libraries/fat_sd/ff.c **** 	const TCHAR* str,	/* Pointer to the format string */
3465:Libraries/fat_sd/ff.c **** 	...					/* Optional arguments... */
3466:Libraries/fat_sd/ff.c **** )
3467:Libraries/fat_sd/ff.c **** {
 3681              	7:
 3682              		.loc 1 3487 0
 3683              		mov	r3, r6
 3684              		ldrb	r4, [r3], #1	@ zero_extendqisi2
 3685 0000 0EB4     	.LVL459:
 3686              		.loc 1 3488 0
 3687 0002 2DE9F047 		cmp	r4, #48
 3688              		beq	.L551
 3689 0006 87B0     	.LVL460:
 3690              		movs	r7, #0
 3691              	.L553:
 3692 0008 0FAB     		mov	r2, r3
 3693 000a 53F8046B 		mov	sl, #0
3468:Libraries/fat_sd/ff.c **** 	va_list arp;
3469:Libraries/fat_sd/ff.c **** 	BYTE f, r;
3470:Libraries/fat_sd/ff.c **** 	UINT i, w;
3471:Libraries/fat_sd/ff.c **** 	ULONG val;
3472:Libraries/fat_sd/ff.c **** 	TCHAR c, d, s[16];
3473:Libraries/fat_sd/ff.c **** 	int res, cc;
3474:Libraries/fat_sd/ff.c **** 
3475:Libraries/fat_sd/ff.c **** 
3476:Libraries/fat_sd/ff.c **** 	va_start(arp, str);
 3694              	1:
 3695 000e 0021     		.loc 1 3489 0
 3696              		ldrb	r4, [r6, #1]	@ zero_extendqisi2
 3697              		adds	r3, r3, #1
 3698 0010 8046     		movs	r7, #1
 3699              		b	.L553
 3700 0012 0593     	.LVL461:
 3701              	.L555:
 3702 0014 8946     		.loc 1 3492 0
 3703              		movs	r3, #10
 3704              		mla	r3, sl, r3, r4
3477:Libraries/fat_sd/ff.c **** 
3478:Libraries/fat_sd/ff.c **** 	for (cc = res = 0; cc != EOF; res += cc) {
3479:Libraries/fat_sd/ff.c **** 		c = *str++;
 3705              	3 0
 3706 0016 3078     		ldrb	r4, [r2, #-1]	@ zero_extendqisi2
 3707              		.loc 1 3492 0
3480:Libraries/fat_sd/ff.c **** 		if (c == 0) break;			/* End of string */
 3708              	b	sl, r3, #48
 3709 0018 0028     	.LVL462:
 3710 001a 00F0D980 	.L554:
 3711              		.loc 1 3491 0
 3712 001e 0136     		sub	r3, r4, #48
3481:Libraries/fat_sd/ff.c **** 		if (c != '%') {				/* Non escape character */
 3713              		r3, r3
 3714 0020 2528     		.loc 1 3493 0
 3715 0022 09D0     		mov	r6, r2
3482:Libraries/fat_sd/ff.c **** 			cc = f_putc(c, fil);
 3716              	ds	r2, r2, #1
 3717 0024 4146     		.loc 1 3491 0
 3718              		cmp	r3, #9
 3719 0026 FFF7FEFF 		bls	.L555
 3720              		.loc 1 3495 0
3483:Libraries/fat_sd/ff.c **** 			if (cc != EOF) cc = 1;
 3721              	r4, #108
 3722 002a B0F1FF3F 		beq	.L557
 3723              		cmp	r4, #76
 3724              		bne	.L559
 3725 002e 0146     	.L557:
 3726              		.loc 1 3496 0
 3727              		ldrb	r4, [r6, #0]	@ zero_extendqisi2
 3728 0030 00F0C880 		orr	r7, r7, #2
 3729 0034 0121     		mov	r6, r2
 3730 0036 C5E0     	.L559:
 3731              		.loc 1 3498 0
 3732              		cmp	r4, #0
3484:Libraries/fat_sd/ff.c **** 			continue;
3485:Libraries/fat_sd/ff.c **** 		}
3486:Libraries/fat_sd/ff.c **** 		w = f = 0;
3487:Libraries/fat_sd/ff.c **** 		c = *str++;
 3733              	.loc 1 3500 0
 3734 0038 3346     		sub	r3, r4, #97
 3735 003a 13F8014B 		uxtb	r3, r3
 3736              		cmp	r3, #25
3488:Libraries/fat_sd/ff.c **** 		if (c == '0') {				/* Flag: '0' padding */
 3737              	t	ls
 3738 003e 302C     		subls	r3, r4, #32
 3739 0040 04D0     		movhi	r1, r4
 3740              	.LVL463:
 3741 0042 0027     		uxtbls	r1, r3
 3742              		.loc 1 3501 0
 3743 0044 1A46     		cmp	r1, #79
 3744 0046 4FF0000A 		beq	.L568
 3745 004a 0AE0     		bhi	.L571
 3746              		cmp	r1, #67
3489:Libraries/fat_sd/ff.c **** 			f = 1; c = *str++;
 3747              	
 3748 004c 7478     		cmp	r1, #68
 3749 004e 0133     		beq	.L567
 3750 0050 0127     		cmp	r1, #66
 3751 0052 F7E7     		beq	.L565
 3752              		b	.L564
 3753              	.L571:
3490:Libraries/fat_sd/ff.c **** 		}
3491:Libraries/fat_sd/ff.c **** 		while (IsDigit(c)) {		/* Precision */
3492:Libraries/fat_sd/ff.c **** 			w = w * 10 + c - '0';
 3754              	1, #85
 3755 0054 0A23     		beq	.L567
 3756 0056 0AFB0343 		cmp	r1, #88
3493:Libraries/fat_sd/ff.c **** 			c = *str++;
 3757              	q	.L570
 3758 005a 12F8014C 		cmp	r1, #83
 3759              		bne	.L564
 3760 005e A3F1300A 		.loc 1 3503 0
 3761              		ldr	r2, [sp, #20]
 3762              		mov	r1, r8
 3763              	.LVL464:
 3764 0062 A4F13003 		adds	r3, r2, #4
 3765 0066 DBB2     		ldr	r0, [r2, #0]
 3766              		str	r3, [sp, #20]
 3767 0068 1646     	.LVL465:
 3768 006a 0132     		bl	f_puts
 3769              		b	.L602
 3770 006c 092B     	.LVL466:
 3771 006e F1D9     	.L566:
3494:Libraries/fat_sd/ff.c **** 		}
3495:Libraries/fat_sd/ff.c **** 		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 3772              		ldr	r2, [sp, #20]
 3773 0070 6C2C     		adds	r3, r2, #4
 3774 0072 01D0     		ldrb	r0, [r2, #0]	@ zero_extendqisi2
 3775 0074 4C2C     		str	r3, [sp, #20]
 3776 0076 03D1     	.LVL467:
 3777              	.L603:
3496:Libraries/fat_sd/ff.c **** 			f |= 2; c = *str++;
 3778              	1, r8
 3779 0078 3478     	.LVL468:
 3780 007a 47F00207 		bl	f_putc
 3781 007e 1646     	.L602:
 3782              		mov	r1, r0
3497:Libraries/fat_sd/ff.c **** 		}
3498:Libraries/fat_sd/ff.c **** 		if (!c) break;
 3783              	69:
 3784 0080 002C     		b	.L549
 3785 0082 00F0A580 	.LVL470:
3499:Libraries/fat_sd/ff.c **** 		d = c;
3500:Libraries/fat_sd/ff.c **** 		if (IsLower(d)) d -= 0x20;
 3786              	65:
 3787 0086 A4F16103 		mov	lr, #2
 3788 008a DBB2     	.LVL471:
 3789 008c 192B     		.loc 1 3507 0
 3790 008e 96BF     		b	.L572
 3791 0090 A4F12003 	.LVL472:
 3792 0094 2146     	.L568:
 3793              		mov	lr, #8
 3794 0096 D9B2     	.LVL473:
3501:Libraries/fat_sd/ff.c **** 		switch (d) {				/* Type is... */
 3795              	509 0
 3796 0098 4F29     		b	.L572
 3797 009a 21D0     	.LVL474:
 3798 009c 06D8     	.L567:
 3799 009e 4329     		mov	lr, #10
 3800 00a0 12D0     	.LVL475:
 3801 00a2 4429     		.loc 1 3512 0
 3802 00a4 1FD0     		b	.L572
 3803 00a6 4229     	.LVL476:
 3804 00a8 17D0     	.L564:
 3805 00aa 1FE0     		.loc 1 3516 0
 3806              		mov	r0, r4
 3807 00ac 5529     		b	.L603
 3808 00ae 1AD0     	.LVL477:
 3809 00b0 5829     	.L570:
 3810 00b2 1DD0     		mov	lr, #16
 3811 00b4 5329     	.LVL478:
 3812 00b6 19D1     	.L572:
3502:Libraries/fat_sd/ff.c **** 		case 'S' :					/* String */
3503:Libraries/fat_sd/ff.c **** 			cc = f_puts(va_arg(arp, TCHAR*), fil); continue;
 3813              	t	r7, #2
 3814 00b8 059A     		beq	.L573
 3815 00ba 4146     		.loc 1 3522 0
 3816              		ldr	r2, [sp, #20]
 3817 00bc 131D     		adds	r3, r2, #4
 3818 00be 1068     		.loc 1 3530 0
 3819 00c0 0593     		cmp	r1, #68
 3820              		.loc 1 3522 0
 3821 00c2 FFF7FEFF 		str	r3, [sp, #20]
 3822 00c6 06E0     	.LVL479:
 3823              		ldr	r0, [r2, #0]
 3824              	.LVL480:
3504:Libraries/fat_sd/ff.c **** 		case 'C' :					/* Character */
3505:Libraries/fat_sd/ff.c **** 			cc = f_putc((TCHAR)va_arg(arp, int), fil); continue;
 3825              	 0
 3826 00c8 059A     		beq	.L575
 3827 00ca 131D     		b	.L576
 3828 00cc 1078     	.LVL481:
 3829 00ce 0593     	.L573:
 3830              		.loc 1 3524 0
 3831              		cmp	r1, #68
 3832 00d0 4146     		ldr	r2, [sp, #20]
 3833              		bne	.L577
 3834 00d2 FFF7FEFF 	.LVL482:
 3835              		.loc 1 3525 0
 3836 00d6 0146     		adds	r3, r2, #4
 3837              		str	r3, [sp, #20]
 3838 00d8 74E0     	.LVL483:
 3839              		ldr	r0, [r2, #0]
 3840              	.LVL484:
 3841 00da 4FF0020E 		b	.L575
 3842              	.LVL485:
3506:Libraries/fat_sd/ff.c **** 		case 'B' :					/* Binary */
3507:Libraries/fat_sd/ff.c **** 			r = 2; break;
 3843              	7 0
 3844 00de 09E0     		adds	r3, r2, #4
 3845              		str	r3, [sp, #20]
 3846              	.LVL486:
 3847 00e0 4FF0080E 		ldr	r0, [r2, #0]
 3848              	.LVL487:
3508:Libraries/fat_sd/ff.c **** 		case 'O' :					/* Octal */
3509:Libraries/fat_sd/ff.c **** 			r = 8; break;
 3849              	76
 3850 00e4 06E0     	.L575:
 3851              		.loc 1 3530 0
 3852              		cmp	r0, #0
 3853 00e6 4FF00A0E 		bge	.L576
 3854              		.loc 1 3531 0
3510:Libraries/fat_sd/ff.c **** 		case 'D' :					/* Signed decimal */
3511:Libraries/fat_sd/ff.c **** 		case 'U' :					/* Unsigned decimal */
3512:Libraries/fat_sd/ff.c **** 			r = 10; break;
 3855              	r0, r0
 3856 00ea 03E0     		.loc 1 3532 0
 3857              		orr	r7, r7, #4
 3858              	.L576:
3513:Libraries/fat_sd/ff.c **** 		case 'X' :					/* Hexdecimal */
3514:Libraries/fat_sd/ff.c **** 			r = 16; break;
3515:Libraries/fat_sd/ff.c **** 		default:					/* Unknown */
3516:Libraries/fat_sd/ff.c **** 			cc = f_putc(c, fil); continue;
 3859              	s	r5, #0
 3860 00ec 2046     	.L580:
 3861 00ee EFE7     		.loc 1 3537 0
 3862              		udiv	r1, r0, lr
 3863              	.LVL488:
 3864 00f0 4FF0100E 		mls	r3, lr, r1, r0
 3865              		uxtb	r2, r3
 3866              	.LVL489:
3517:Libraries/fat_sd/ff.c **** 		}
3518:Libraries/fat_sd/ff.c **** 
3519:Libraries/fat_sd/ff.c **** 		/* Get an argument */
3520:Libraries/fat_sd/ff.c **** 		// mthomas val = (f & 2) ? va_arg(arp, long) : ((d == 'D') ? (long)va_arg(arp, int) : va_arg(arp,
3521:Libraries/fat_sd/ff.c **** 		if (f & 2) {
 3867              	3538 0
 3868 00f4 17F0020F 		cmp	r2, #9
 3869 00f8 06D0     		.loc 1 3537 0
3522:Libraries/fat_sd/ff.c **** 			val = va_arg(arp, long);
 3870              	v	r0, r1
 3871 00fa 059A     		.loc 1 3538 0
 3872 00fc 131D     		bls	.L581
3523:Libraries/fat_sd/ff.c **** 		} else {
3524:Libraries/fat_sd/ff.c **** 			if (d == 'D') {
3525:Libraries/fat_sd/ff.c **** 				val = (long)va_arg(arp, int);
3526:Libraries/fat_sd/ff.c **** 			} else {
3527:Libraries/fat_sd/ff.c **** 				val = va_arg(arp, unsigned int);
3528:Libraries/fat_sd/ff.c **** 			}
3529:Libraries/fat_sd/ff.c **** 		}
3530:Libraries/fat_sd/ff.c **** 		if (d == 'D' && (val & 0x80000000)) {
 3873              	oc 1 3539 0
 3874 00fe 4429     		adds	r3, r2, #7
 3875              		uxtb	r2, r3
 3876 0100 0593     		.loc 1 3540 0
 3877              		cmp	r4, #120
 3878 0102 1068     		itt	eq
 3879              		addeq	r3, r2, #32
 3880              		uxtbeq	r2, r3
 3881 0104 0BD0     	.L581:
 3882 0106 0FE0     		.loc 1 3542 0
 3883              		adds	r2, r2, #48
 3884              	.LVL490:
 3885              		add	r3, sp, #4
 3886 0108 4429     		strb	r2, [r5, r3]
 3887 010a 059A     		adds	r5, r5, #1
 3888 010c 03D1     		.loc 1 3543 0
 3889              		cbz	r1, .L584
 3890              		cmp	r5, #16
 3891 010e 131D     		bne	.L580
 3892 0110 0593     	.L584:
 3893              		.loc 1 3544 0
 3894 0112 1068     		tst	r7, #4
 3895              		beq	.L586
 3896 0114 03E0     		add	r3, sp, #24
 3897              		adds	r2, r3, r5
 3898              		movs	r3, #45
 3899              		strb	r3, [r2, #-20]
 3900 0116 131D     		adds	r5, r5, #1
 3901 0118 0593     	.L586:
 3902              		movs	r0, #0
 3903 011a 1068     	.LVL491:
 3904              		.loc 1 3546 0
 3905 011c 04E0     		b	.L588
 3906              	.L589:
 3907              		.loc 1 3547 0
 3908 011e 0028     		tst	r7, #1
 3909 0120 02DA     		ite	eq
3531:Libraries/fat_sd/ff.c **** 			val = 0 - val;
 3910              	:
 3911 0122 4042     		mov	r1, r8
3532:Libraries/fat_sd/ff.c **** 			f |= 4;
 3912              	l	f_putc
 3913 0124 47F00407 	.LVL493:
 3914              		.loc 1 3548 0
 3915 0128 0025     		add	r9, r9, #1
 3916              		add	sl, sl, #-1
3533:Libraries/fat_sd/ff.c **** 		}
3534:Libraries/fat_sd/ff.c **** 		/* Put it in numeral string */
3535:Libraries/fat_sd/ff.c **** 		i = 0;
3536:Libraries/fat_sd/ff.c **** 		do {
3537:Libraries/fat_sd/ff.c **** 			d = (TCHAR)(val % r); val /= r;
 3917              	94:
 3918 012a B0FBFEF1 	.L588:
 3919              		.loc 1 3546 0
 3920 012e 0EFB1103 		cmp	r5, sl
 3921 0132 DAB2     		bcc	.L593
 3922              	.L594:
3538:Libraries/fat_sd/ff.c **** 			if (d > 9) {
 3923              	3, sp, #4
 3924 0134 092A     		adds	r4, r3, r5
 3925              	.LVL495:
 3926 0136 0846     		b	.L595
 3927              	.LVL496:
 3928 0138 06D9     	.L593:
3539:Libraries/fat_sd/ff.c **** 				d += 7;
 3929              	0, #-1
 3930 013a D31D     		bne	.L589
 3931 013c DAB2     		b	.L594
3540:Libraries/fat_sd/ff.c **** 				if (c == 'x') d += 0x20;
 3932              	L497:
 3933 013e 782C     	.L595:
 3934 0140 04BF     		.loc 1 3551 0
 3935 0142 02F12003 		mov	r1, r8
 3936 0146 DAB2     		ldrb	r0, [r4, #-1]	@ zero_extendqisi2
 3937              	.LVL498:
3541:Libraries/fat_sd/ff.c **** 			}
3542:Libraries/fat_sd/ff.c **** 			s[i++] = d + '0';
 3938              	putc
 3939 0148 3032     	.LVL499:
 3940              		.loc 1 3553 0
 3941 014a 01AB     		add	r3, sp, #5
 3942 014c EA54     		cmp	r4, r3
 3943 014e 0135     		.loc 1 3551 0
3543:Libraries/fat_sd/ff.c **** 		} while (val && i < sizeof(s) / sizeof(s[0]));
 3944              	1, r0
 3945 0150 09B1     	.LVL500:
 3946 0152 102D     		.loc 1 3552 0
 3947 0154 E9D1     		add	r9, r9, #1
 3948              		.loc 1 3553 0
3544:Libraries/fat_sd/ff.c **** 		if (f & 4) s[i++] = '-';
 3949              	.L596
 3950 0156 17F0040F 		subs	r4, r4, #1
 3951 015a 05D0     		cmp	r0, #-1
 3952 015c 06AB     		bne	.L595
 3953 015e 5A19     	.LVL501:
 3954 0160 2D23     		b	.L549
 3955 0162 02F8143C 	.LVL502:
 3956 0166 0135     	.L596:
 3957              		.loc 1 3554 0
 3958 0168 0020     		cmp	r0, #-1
 3959              		ite	eq
3545:Libraries/fat_sd/ff.c **** 		cc = 0;
3546:Libraries/fat_sd/ff.c **** 		while (i < w-- && cc != EOF) {
 3960              	#-1
 3961 016a 0BE0     		movne	r1, #0
 3962              	.LVL503:
3547:Libraries/fat_sd/ff.c **** 			cc = f_putc((TCHAR)((f & 1) ? '0' : ' '), fil);
 3963              	49:
 3964 016c 17F0010F 		.loc 1 3478 0
 3965 0170 0CBF     		cmp	r1, #-1
 3966 0172 2020     		add	r9, r9, r1
 3967 0174 3020     		bne	.L544
 3968              		b	.L599
 3969 0176 4146     	.LVL504:
 3970 0178 FFF7FEFF 	.L545:
 3971              		.loc 1 3558 0
3548:Libraries/fat_sd/ff.c **** 			res++;
 3972              	#-1
 3973 017c 09F10109 		ite	ne
 3974 0180 0AF1FF3A 		movne	r1, r9
 3975              		moveq	r1, #-1
 3976              	.LVL505:
 3977              	.L599:
 3978 0184 5545     		.loc 1 3559 0
 3979 0186 02D3     		mov	r0, r1
 3980              		add	sp, sp, #28
 3981 0188 01AB     		pop	{r4, r5, r6, r7, r8, r9, sl, lr}
 3982 018a 5C19     		add	sp, sp, #12
 3983              		bx	lr
 3984 018c 03E0     	.LFE53:
 3986              		.section	.text.dir_next,"ax",%progbits
 3987 018e B0F1FF3F 		.align	2
 3988 0192 EBD1     		.thumb
 3989 0194 F8E7     		.thumb_func
 3991              	dir_next:
3549:Libraries/fat_sd/ff.c **** 		}
3550:Libraries/fat_sd/ff.c **** 		do {
3551:Libraries/fat_sd/ff.c **** 			cc = f_putc(s[--i], fil); 
 3992              	0
 3993 0196 4146     		@ args = 0, pretend = 0, frame = 0
 3994 0198 14F8010C 		@ frame_needed = 0, uses_anonymous_args = 0
 3995              	.LVL506:
 3996 019c FFF7FEFF 		.loc 1 769 0
 3997              		ldrh	r3, [r0, #6]
3552:Libraries/fat_sd/ff.c **** 			res++;
3553:Libraries/fat_sd/ff.c **** 		} while (i && cc != EOF);
 3998              	1 764 0
 3999 01a0 0DF10503 		push	{r4, r5, r6, r7, r8, lr}
 4000 01a4 9C42     	.LCFI24:
 4001              		.loc 1 769 0
 4002 01a6 0146     		adds	r3, r3, #1
 4003              		uxth	r7, r3
 4004              	.LVL507:
 4005 01a8 09F10109 		.loc 1 764 0
 4006              		mov	r5, r0
 4007 01ac 04D0     		mov	r4, r1
 4008 01ae 013C     		.loc 1 770 0
 4009 01b0 B0F1FF3F 		cmp	r7, #0
 4010 01b4 EFD1     		beq	.L605
 4011              	.LVL508:
 4012 01b6 05E0     		ldr	r3, [r0, #16]
 4013              		cmp	r3, #0
 4014              		beq	.L605
3554:Libraries/fat_sd/ff.c **** 		if (cc != EOF) cc = 0;
 4015              	773 0
 4016 01b8 B0F1FF3F 		ands	r8, r7, #15
 4017 01bc 0CBF     		bne	.L608
 4018 01be 4FF0FF31 		.loc 1 776 0
 4019 01c2 0021     		ldr	r1, [r0, #12]
 4020              		.loc 1 774 0
 4021              		adds	r3, r3, #1
 4022              		str	r3, [r0, #16]
 4023 01c4 B1F1FF3F 		ldr	r0, [r0, #0]
 4024 01c8 8944     	.LVL510:
 4025 01ca 7FF424AF 		.loc 1 776 0
 4026 01ce 05E0     		cbnz	r1, .L610
 4027              		.loc 1 777 0
 4028              		ldrh	r3, [r0, #8]
3555:Libraries/fat_sd/ff.c **** 	}
3556:Libraries/fat_sd/ff.c **** 
3557:Libraries/fat_sd/ff.c **** 	va_end(arp);
3558:Libraries/fat_sd/ff.c **** 	return (cc == EOF) ? cc : res;
 4029              	ls	.L605
 4030 01d0 B1F1FF3F 		b	.L608
 4031 01d4 14BF     	.L610:
 4032 01d6 4946     		.loc 1 781 0
 4033 01d8 4FF0FF31 		ldrb	r3, [r0, #2]	@ zero_extendqisi2
 4034              		subs	r3, r3, #1
 4035              		ands	r3, r3, r7, lsr #4
3559:Libraries/fat_sd/ff.c **** }
 4036              	608
 4037 01dc 0846     		.loc 1 782 0
 4038 01de 07B0     		bl	get_fat
 4039 01e0 BDE8F047 		.loc 1 783 0
 4040 01e4 03B0     		cmp	r0, #1
 4041 01e6 7047     	.LVL511:
 4042              		.loc 1 782 0
 4043              		mov	r6, r0
 4044              	.LVL512:
 4045              		.loc 1 783 0
 4046              		bls	.L613
 4047              		.loc 1 784 0
 4048              		cmp	r0, #-1
 4049              		beq	.L615
 4050              	.LVL513:
 4051              		.loc 1 785 0
 4052              		ldr	r0, [r5, #0]
 4053              	.LVL514:
 4054              		ldr	r3, [r0, #28]
 4055              		cmp	r6, r3
 4056 0000 C388     		bcc	.L617
 4057              	.LBB5:
 4058 0002 2DE9F041 		.loc 1 788 0
 4059              		cmp	r4, #0
 4060              		beq	.L605
 4061 0006 0133     		.loc 1 789 0
 4062 0008 9FB2     		ldr	r1, [r5, #12]
 4063              		bl	create_chain
 4064              		.loc 1 790 0
 4065 000a 0546     		mov	r6, r0
 4066 000c 0C46     		cbnz	r0, .L620
 4067              		adds	r0, r0, #7
 4068 000e 002F     		b	.L622
 4069 0010 64D0     	.L620:
 4070              		.loc 1 791 0
 4071 0012 0369     		cmp	r0, #1
 4072 0014 002B     		beq	.L613
 4073 0016 61D0     	.LVL515:
 4074              		.loc 1 792 0
 4075              		cmp	r0, #-1
 4076 0018 17F00F08 		beq	.L615
 4077 001c 56D1     		.loc 1 794 0
 4078              		ldr	r0, [r5, #0]
 4079 001e C168     	.LVL516:
 4080              		mov	r1, r8
 4081 0020 0133     		bl	move_window
 4082 0022 0361     		cmp	r0, #0
 4083 0024 0068     		bne	.L615
 4084              		.loc 1 795 0
 4085              		ldr	r0, [r5, #0]
 4086 0026 19B9     		mov	r1, r8
 4087              		adds	r0, r0, #52
 4088 0028 0389     		mov	r2, #512
 4089 002a BB42     		bl	mem_set
 4090 002c 56D9     		.loc 1 796 0
 4091 002e 4DE0     		ldr	r4, [r5, #0]
 4092              	.LVL517:
 4093              		mov	r1, r6
 4094 0030 8378     		mov	r0, r4
 4095 0032 013B     		bl	clust2sect
 4096 0034 13EA1713 		str	r0, [r4, #48]
 4097 0038 48D1     		mov	r4, r8
 4098              		.loc 1 797 0
 4099 003a FFF7FEFF 		b	.L626
 4100              	.LVL518:
 4101 003e 0128     	.L627:
 4102              		.loc 1 798 0
 4103              		movs	r3, #1
 4104 0040 0646     		strb	r3, [r2, #4]
 4105              		.loc 1 799 0
 4106              		ldr	r0, [r5, #0]
 4107 0042 4DD9     		movs	r1, #0
 4108              	.LVL519:
 4109 0044 B0F1FF3F 		bl	move_window
 4110 0048 4CD0     		adds	r4, r4, #1
 4111              		cbnz	r0, .L615
 4112              		.loc 1 800 0
 4113 004a 2868     		ldr	r2, [r5, #0]
 4114              		ldr	r3, [r2, #48]
 4115 004c C369     		adds	r3, r3, #1
 4116 004e 9E42     		str	r3, [r2, #48]
 4117 0050 36D3     	.L626:
 4118              		.loc 1 797 0
 4119              		ldr	r2, [r5, #0]
 4120 0052 002C     		.loc 1 800 0
 4121 0054 42D0     		uxtb	r1, r4
 4122              	.LVL520:
 4123 0056 E968     		.loc 1 797 0
 4124 0058 FFF7FEFF 		ldrb	r3, [r2, #2]	@ zero_extendqisi2
 4125              		cmp	r3, r1
 4126 005c 0646     		bhi	.L627
 4127 005e 08B9     		.loc 1 802 0
 4128 0060 0730     		ldr	r3, [r2, #48]
 4129 0062 40E0     		subs	r3, r3, r1
 4130              		str	r3, [r2, #48]
 4131              	.LVL521:
 4132 0064 0128     	.L617:
 4133 0066 3BD0     	.LBE5:
 4134              		.loc 1 807 0
 4135              		str	r6, [r5, #12]
 4136 0068 B0F1FF3F 		.loc 1 808 0
 4137 006c 3AD0     		ldr	r0, [r5, #0]
 4138              		mov	r1, r6
 4139 006e 2868     	.LVL522:
 4140              		bl	clust2sect
 4141 0070 4146     		str	r0, [r5, #16]
 4142 0072 FFF7FEFF 	.LVL523:
 4143 0076 0028     	.L608:
 4144 0078 34D1     		.loc 1 814 0
 4145              		ldr	r3, [r5, #0]
 4146 007a 2868     		.loc 1 813 0
 4147 007c 4146     		strh	r7, [r5, #6]	@ movhi
 4148 007e 3430     		.loc 1 814 0
 4149 0080 4FF40072 		adds	r3, r3, #52
 4150 0084 FFF7FEFF 		add	r3, r3, r8, lsl #5
 4151              		str	r3, [r5, #20]
 4152 0088 2C68     		movs	r0, #0
 4153              		.loc 1 816 0
 4154 008a 3146     		b	.L622
 4155 008c 2046     	.LVL524:
 4156 008e FFF7FEFF 	.L605:
 4157 0092 2063     		movs	r0, #4
 4158 0094 4446     		b	.L622
 4159              	.LVL525:
 4160 0096 0BE0     	.L613:
 4161              		movs	r0, #2
 4162              		b	.L622
 4163              	.LVL526:
 4164 0098 0123     	.L615:
 4165 009a 1371     		movs	r0, #1
 4166              	.LVL527:
 4167 009c 2868     	.L622:
 4168 009e 0021     		.loc 1 817 0
 4169              		pop	{r4, r5, r6, r7, r8, pc}
 4170 00a0 FFF7FEFF 	.LFE14:
 4172 00a6 E8B9     		.section	.text.dir_remove,"ax",%progbits
 4173              		.align	2
 4174 00a8 2A68     		.thumb
 4175 00aa 136B     		.thumb_func
 4177 00ae 1363     	dir_remove:
 4178              	.LFB23:
 4179              		.loc 1 1226 0
 4180 00b0 2A68     		@ args = 0, pretend = 0, frame = 0
 4181              		@ frame_needed = 0, uses_anonymous_args = 0
 4182 00b2 E1B2     	.LVL528:
 4183              		push	{r4, r5, r6, lr}
 4184              	.LCFI25:
 4185 00b4 9378     		.loc 1 1232 0
 4186 00b6 8B42     		ldrh	r3, [r0, #32]
 4187 00b8 EED8     	.LVL529:
 4188              		.loc 1 1231 0
 4189 00ba 136B     		ldrh	r5, [r0, #6]
 4190 00bc 5B1A     	.LVL530:
 4191 00be 1363     		.loc 1 1232 0
 4192              		movw	r1, #65535
 4193              		cmp	r3, r1
 4194              		ite	ne
 4195              		movne	r1, r3
 4196 00c0 EE60     		moveq	r1, r5
 4197              	.LVL531:
 4198 00c2 2868     		.loc 1 1226 0
 4199 00c4 3146     		mov	r4, r0
 4200              		.loc 1 1232 0
 4201 00c6 FFF7FEFF 		bl	dir_sdi
 4202 00ca 2861     	.LVL532:
 4203              		.loc 1 1233 0
 4204              		mov	r1, r0
 4205              	.LVL533:
 4206 00cc 2B68     		cbnz	r0, .L634
 4207              	.LVL534:
 4208 00ce EF80     	.L635:
 4209              		.loc 1 1235 0
 4210 00d0 3433     		ldr	r1, [r4, #16]
 4211 00d2 03EB4813 	.LVL535:
 4212 00d6 6B61     		ldr	r0, [r4, #0]
 4213 00d8 0020     		bl	move_window
 4214              		.loc 1 1236 0
 4215 00da 04E0     		mov	r1, r0
 4216              	.LVL536:
 4217              		cbnz	r0, .L636
 4218 00dc 0420     		.loc 1 1237 0
 4219 00de 02E0     		ldr	r2, [r4, #20]
 4220              		mvn	r3, #26
 4221              		strb	r3, [r2, #0]
 4222 00e0 0220     		.loc 1 1238 0
 4223 00e2 00E0     		ldr	r2, [r4, #0]
 4224              		adds	r3, r3, #28
 4225              		strb	r3, [r2, #4]
 4226 00e4 0120     		.loc 1 1239 0
 4227              		ldrh	r3, [r4, #6]
 4228              		cmp	r3, r5
 4229              		bcs	.L634
 4230 00e6 BDE8F081 		.loc 1 1240 0
 4231              		mov	r0, r4
 4232              		bl	dir_next
 4233 00ea C046     	.LVL537:
 4234              		.loc 1 1241 0
 4235              		mov	r1, r0
 4236              	.LVL538:
 4237              		cmp	r0, #0
 4238              		beq	.L635
 4239              	.L636:
 4240              		.loc 1 1242 0
 4241              		cmp	r1, #4
 4242              		it	eq
 4243              		moveq	r1, #2
 4244 0000 70B5     	.L634:
 4245              		.loc 1 1257 0
 4246              		mov	r0, r1
 4247 0002 038C     		pop	{r4, r5, r6, pc}
 4248              	.LFE23:
 4250 0004 C588     		.section	.text.dir_read,"ax",%progbits
 4251              		.align	2
 4252              		.thumb
 4253 0006 4FF6FF71 		.thumb_func
 4255 000c 14BF     	dir_read:
 4256 000e 1946     	.LFB21:
 4257 0010 2946     		.loc 1 1063 0
 4258              		@ args = 0, pretend = 0, frame = 0
 4259              		@ frame_needed = 0, uses_anonymous_args = 0
 4260 0012 0446     	.LVL539:
 4261              		push	{r4, r5, r6, r7, r8, lr}
 4262 0014 FFF7FEFF 	.LCFI26:
 4263              		.loc 1 1063 0
 4264              		movs	r6, #255
 4265 0018 0146     	.LVL540:
 4266              		mov	r4, r0
 4267 001a C0B9     		movs	r5, #4
 4268              	.LVL541:
 4269              		mov	r8, r6
 4270              	.LVL542:
 4271 001c 2169     		.loc 1 1071 0
 4272              		b	.L642
 4273 001e 2068     	.LVL543:
 4274 0020 FFF7FEFF 	.L643:
 4275              		.loc 1 1072 0
 4276 0024 0146     		ldr	r0, [r4, #0]
 4277              		bl	move_window
 4278 0026 78B9     		.loc 1 1073 0
 4279              		mov	r5, r0
 4280 0028 6269     		cmp	r0, #0
 4281 002a 6FF01A03 		bne	.L644
 4282 002e 1370     		.loc 1 1074 0
 4283              		ldr	r0, [r4, #20]
 4284 0030 2268     	.LVL544:
 4285 0032 1C33     		.loc 1 1075 0
 4286 0034 1371     		ldrb	r3, [r0, #0]	@ zero_extendqisi2
 4287              	.LVL545:
 4288 0036 E388     		.loc 1 1076 0
 4289 0038 AB42     		cmp	r3, #0
 4290 003a 08D2     		beq	.L646
 4291              		.loc 1 1079 0
 4292 003c 2046     		cmp	r3, #229
 4293 003e FFF7FEFF 		.loc 1 1078 0
 4294              		ldrb	r1, [r0, #11]	@ zero_extendqisi2
 4295              		.loc 1 1079 0
 4296 0042 0146     		beq	.L648
 4297              		tst	r1, #8
 4298 0044 0028     		.loc 1 1078 0
 4299 0046 E9D0     		and	r2, r1, #63
 4300              	.LVL546:
 4301              		.loc 1 1079 0
 4302 0048 0429     		beq	.L650
 4303 004a 08BF     		cmp	r2, #15
 4304 004c 0221     		bne	.L648
 4305              		b	.L652
 4306              	.L650:
 4307 004e 0846     		.loc 1 1082 0
 4308 0050 70BD     		cmp	r2, #15
 4309              		bne	.L653
 4310              	.L652:
 4311 0052 C046     		.loc 1 1083 0
 4312              		tst	r3, #64
 4313              		beq	.L654
 4314              		.loc 1 1085 0
 4315              		and	r7, r3, #191
 4316              	.LVL547:
 4317              		.loc 1 1086 0
 4318              		ldrh	r3, [r4, #6]
 4319              		.loc 1 1084 0
 4320              		ldrb	r8, [r0, #13]	@ zero_extendqisi2
 4321              		.loc 1 1086 0
 4322 0000 2DE9F041 		strh	r3, [r4, #32]	@ movhi
 4323              		b	.L656
 4324              	.LVL548:
 4325 0004 FF26     	.L654:
 4326              		.loc 1 1089 0
 4327 0006 0446     		cmp	r3, r6
 4328 0008 0425     		bne	.L648
 4329              		mov	r7, r6
 4330 000a B046     	.LVL549:
 4331              	.L656:
 4332              		ldrb	r3, [r0, #13]	@ zero_extendqisi2
 4333 000c 69E0     		cmp	r3, r8
 4334              		bne	.L648
 4335              	.LBB8:
 4336              	.LBB9:
 4337 000e 2068     		.loc 1 871 0
 4338 0010 FFF7FEFF 		ldrb	r3, [r0, #0]	@ zero_extendqisi2
 4339              		movs	r2, #13
 4340 0014 0546     	.LVL550:
 4341 0016 0028     		and	r3, r3, #63
 4342 0018 67D1     		mul	r3, r3, r2
 4343              	.LBE9:
 4344 001a 6069     	.LBE8:
 4345              		.loc 1 1089 0
 4346              		ldr	r6, [r4, #28]
 4347 001c 0378     	.LVL551:
 4348              	.LBB11:
 4349              	.LBB10:
 4350 001e 002B     		.loc 1 871 0
 4351 0020 66D0     		sub	lr, r3, #13
 4352              	.LVL552:
 4353 0022 E52B     		mov	ip, #0
 4354              	.LVL553:
 4355 0024 C17A     		movs	r5, #1
 4356              	.LVL554:
 4357 0026 55D0     	.L660:
 4358 0028 11F0080F 		.loc 1 875 0
 4359              		ldr	r3, .L675
 4360 002c 01F03F02 		ldrb	r2, [ip, r3]	@ zero_extendqisi2
 4361              		adds	r3, r0, r2
 4362              		ldrb	r1, [r3, #1]	@ zero_extendqisi2
 4363 0030 02D0     		ldrb	r3, [r0, r2]	@ zero_extendqisi2
 4364 0032 0F2A     		orr	r2, r3, r1, lsl #8
 4365 0034 4ED1     	.LVL555:
 4366 0036 01E0     		.loc 1 876 0
 4367              		cbz	r5, .L661
 4368              	.LVL556:
 4369 0038 0F2A     		.loc 1 877 0
 4370 003a 42D1     		cmp	lr, #254
 4371              		bgt	.L648
 4372              		.loc 1 878 0
 4373 003c 13F0400F 		strh	r2, [r6, lr, lsl #1]	@ movhi
 4374 0040 06D0     		mov	r5, r2
 4375              		add	lr, lr, #1
 4376 0042 03F0BF07 		b	.L664
 4377              	.L661:
 4378              		.loc 1 880 0
 4379 0046 E388     		movw	r3, #65535
 4380              		cmp	r2, r3
 4381 0048 90F80D80 		bne	.L648
 4382              	.L664:
 4383 004c 2384     		.loc 1 882 0
 4384 004e 02E0     		add	ip, ip, #1
 4385              		cmp	ip, #13
 4386              		bne	.L660
 4387              		.loc 1 884 0
 4388 0050 B342     		ldrb	r3, [r0, #0]	@ zero_extendqisi2
 4389 0052 3FD1     		tst	r3, #64
 4390 0054 3746     		beq	.L666
 4391              		.loc 1 885 0
 4392              		cmp	lr, #254
 4393 0056 437B     		bgt	.L648
 4394 0058 4345     		.loc 1 886 0
 4395 005a 3BD1     		mov	r3, #0	@ movhi
 4396              		strh	r3, [r6, lr, lsl #1]	@ movhi
 4397              		b	.L666
 4398              	.LVL557:
 4399 005c 0378     	.L653:
 4400 005e 0D22     	.LBE10:
 4401              	.LBE11:
 4402 0060 03F03F03 		.loc 1 1091 0
 4403 0064 03FB02F3 		cbnz	r6, .L670
 4404              		bl	sum_sfn
 4405              	.LVL558:
 4406              		cmp	r8, r0
 4407 0068 E669     		beq	.L672
 4408              	.LVL559:
 4409              	.L670:
 4410              		.loc 1 1092 0
 4411              		mov	r3, #-1	@ movhi
 4412 006a A3F10D0E 	.LVL560:
 4413              		strh	r3, [r4, #32]	@ movhi
 4414 006e 4FF0000C 		b	.L672
 4415              	.LVL561:
 4416 0072 0125     	.L648:
 4417              		movs	r6, #255
 4418              	.LVL562:
 4419              	.L669:
 4420 0074 224B     		.loc 1 1100 0
 4421 0076 1CF80320 		mov	r0, r4
 4422 007a 8318     	.LVL563:
 4423 007c 5978     		movs	r1, #0
 4424 007e 835C     		bl	dir_next
 4425 0080 43EA0122 	.LVL564:
 4426              		.loc 1 1101 0
 4427              		mov	r5, r0
 4428 0084 45B1     	.LVL565:
 4429              		cbnz	r0, .L644
 4430              	.LVL566:
 4431 0086 BEF1FE0F 	.L642:
 4432 008a 23DC     		.loc 1 1071 0
 4433              		ldr	r1, [r4, #16]
 4434 008c 26F81E20 		cmp	r1, #0
 4435 0090 1546     		bne	.L643
 4436 0092 0EF1010E 		.loc 1 1104 0
 4437 0096 03E0     		cbz	r5, .L672
 4438              	.LVL567:
 4439              	.L644:
 4440 0098 4FF6FF73 		movs	r3, #0
 4441 009c 9A42     		str	r3, [r4, #16]
 4442 009e 19D1     		b	.L672
 4443              	.LVL568:
 4444              	.L646:
 4445 00a0 0CF1010C 		movs	r5, #4
 4446 00a4 BCF10D0F 		b	.L644
 4447 00a8 E4D1     	.LVL569:
 4448              	.L666:
 4449 00aa 0378     		.loc 1 1089 0
 4450 00ac 13F0400F 		subs	r3, r7, #1
 4451 00b0 20D0     		uxtb	r6, r3
 4452              	.LVL570:
 4453 00b2 BEF1FE0F 		b	.L669
 4454 00b6 0DDC     	.LVL571:
 4455              	.L672:
 4456 00b8 4FF00003 		.loc 1 1107 0
 4457 00bc 26F81E30 		mov	r0, r5
 4458 00c0 18E0     	.LVL572:
 4459              		pop	{r4, r5, r6, r7, r8, pc}
 4460              	.L676:
 4461              		.align	2
 4462              	.L675:
 4463              		.word	.LANCHOR5
 4464 00c2 1EB9     	.LFE21:
 4466              		.section	.text.remove_chain,"ax",%progbits
 4467 00c8 8045     		.align	2
 4468 00ca 16D0     		.thumb
 4469              		.thumb_func
 4471              	remove_chain:
 4472 00cc 4FF0FF33 	.LFB10:
 4473              		.loc 1 599 0
 4474 00d0 2384     		@ args = 0, pretend = 0, frame = 0
 4475 00d2 12E0     		@ frame_needed = 0, uses_anonymous_args = 0
 4476              	.LVL573:
 4477              		.loc 1 604 0
 4478 00d4 FF26     		cmp	r1, #1
 4479              		.loc 1 599 0
 4480              		push	{r4, r5, r6, lr}
 4481              	.LCFI27:
 4482 00d6 2046     		.loc 1 599 0
 4483              		mov	r4, r0
 4484 00d8 0021     		mov	r5, r1
 4485 00da FFF7FEFF 		.loc 1 604 0
 4486              		bls	.L678
 4487              	.LVL574:
 4488 00de 0546     		ldr	r3, [r0, #28]
 4489              		cmp	r1, r3
 4490 00e0 18B9     		bcs	.L678
 4491              	.LVL575:
 4492              		b	.L680
 4493              	.LVL576:
 4494 00e2 2169     	.L681:
 4495 00e4 0029     		.loc 1 610 0
 4496 00e6 92D1     		mov	r0, r4
 4497              		mov	r1, r5
 4498 00e8 3DB1     		bl	get_fat
 4499              		.loc 1 611 0
 4500              		mov	r6, r0
 4501 00ea 0023     		cbz	r0, .L682
 4502 00ec 2361     		.loc 1 612 0
 4503 00ee 04E0     		cmp	r0, #1
 4504              		beq	.L678
 4505              	.LVL577:
 4506 00f0 0425     		.loc 1 613 0
 4507 00f2 FAE7     		cmp	r0, #-1
 4508              		bne	.L685
 4509              		movs	r3, #1
 4510              	.LVL578:
 4511 00f4 7B1E     		b	.L687
 4512 00f6 DEB2     	.LVL579:
 4513              	.L685:
 4514 00f8 EDE7     		.loc 1 614 0
 4515              		mov	r0, r4
 4516              	.LVL580:
 4517              		mov	r1, r5
 4518 00fa 2846     		movs	r2, #0
 4519              		bl	put_fat
 4520 00fc BDE8F081 		.loc 1 615 0
 4521              		mov	r3, r0
 4522              	.LVL581:
 4523              		cbnz	r0, .L687
 4524 0100 00000000 		.loc 1 616 0
 4525              		ldr	r3, [r4, #16]
 4526              	.LVL582:
 4527              		cmp	r3, #-1
 4528              		beq	.L689
 4529              		.loc 1 617 0
 4530              		adds	r3, r3, #1
 4531              		str	r3, [r4, #16]
 4532              		.loc 1 618 0
 4533              		movs	r3, #1
 4534              		strb	r3, [r4, #5]
 4535              	.L689:
 4536              		mov	r5, r6
 4537              	.LVL583:
 4538              	.L680:
 4539 0000 0129     		.loc 1 609 0
 4540              		ldr	r3, [r4, #28]
 4541 0002 70B5     		cmp	r5, r3
 4542              		bcc	.L681
 4543              		b	.L682
 4544 0004 0446     	.LVL584:
 4545 0006 0D46     	.L678:
 4546              		movs	r3, #2
 4547 0008 24D9     	.LVL585:
 4548              		b	.L687
 4549 000a C369     	.LVL586:
 4550 000c 9942     	.L682:
 4551 000e 21D2     		movs	r3, #0
 4552              	.LVL587:
 4553 0010 1CE0     	.L687:
 4554              		.loc 1 625 0
 4555              		mov	r0, r3
 4556              		pop	{r4, r5, r6, pc}
 4557 0012 2046     	.LFE10:
 4559 0016 FFF7FEFF 		.section	.text.f_truncate,"ax",%progbits
 4560              		.align	2
 4561 001a 0646     		.global	f_truncate
 4562 001c E0B1     		.thumb
 4563              		.thumb_func
 4565 0020 18D0     	f_truncate:
 4566              	.LFB43:
 4567              		.loc 1 2718 0
 4568 0022 B0F1FF3F 		@ args = 0, pretend = 0, frame = 0
 4569 0026 01D1     		@ frame_needed = 0, uses_anonymous_args = 0
 4570 0028 0123     	.LVL588:
 4571              		push	{r4, r5, r6, lr}
 4572 002a 16E0     	.LCFI28:
 4573              		.loc 1 2718 0
 4574              		mov	r4, r0
 4575              		.loc 1 2723 0
 4576 002c 2046     		ldrh	r1, [r4, #4]
 4577              		ldr	r0, [r0, #0]
 4578 002e 2946     	.LVL589:
 4579 0030 0022     		bl	validate
 4580 0032 FFF7FEFF 		.loc 1 2724 0
 4581              		mov	r6, r0
 4582 0036 0346     	.LVL590:
 4583              		cmp	r0, #0
 4584 0038 78B9     		bne	.L693
 4585              		.loc 1 2725 0
 4586 003a 2369     		ldrb	r2, [r4, #6]	@ zero_extendqisi2
 4587              		tst	r2, #128
 4588 003c B3F1FF3F 		beq	.L695
 4589 0040 03D0     		movs	r6, #2
 4590              		b	.L693
 4591 0042 0133     	.L695:
 4592 0044 2361     		.loc 1 2728 0
 4593              		tst	r2, #2
 4594 0046 0123     		beq	.L697
 4595 0048 6371     		.loc 1 2733 0
 4596              		ldr	r5, [r4, #8]
 4597 004a 3546     		ldr	r3, [r4, #12]
 4598              		cmp	r3, r5
 4599              		bls	.L693
 4600              		.loc 1 2735 0
 4601 004c E369     		orr	r3, r2, #32
 4602 004e 9D42     		.loc 1 2734 0
 4603 0050 DFD3     		str	r5, [r4, #12]
 4604 0052 01E0     		.loc 1 2735 0
 4605              		strb	r3, [r4, #6]
 4606              		.loc 1 2736 0
 4607 0054 0223     		cbnz	r5, .L700
 4608              		.loc 1 2737 0
 4609 0056 00E0     		ldr	r0, [r4, #0]
 4610              		ldr	r1, [r4, #16]
 4611              		bl	remove_chain
 4612 0058 0023     		.loc 1 2738 0
 4613              		str	r5, [r4, #16]
 4614              		.loc 1 2737 0
 4615              		mov	r6, r0
 4616 005a 1846     		.loc 1 2738 0
 4617 005c 70BD     		b	.L702
 4618              	.L700:
 4619              		.loc 1 2740 0
 4620 005e C046     		ldr	r0, [r4, #0]
 4621              		ldr	r1, [r4, #20]
 4622              		bl	get_fat
 4623              		.loc 1 2742 0
 4624              		cmp	r0, #-1
 4625              	.LVL591:
 4626              		.loc 1 2740 0
 4627              		mov	r5, r0
 4628              	.LVL592:
 4629              		.loc 1 2742 0
 4630              		bne	.L703
 4631              		movs	r6, #1
 4632 0000 70B5     		b	.L705
 4633              	.L703:
 4634              		.loc 1 2743 0
 4635 0002 0446     		cmp	r0, #1
 4636              		beq	.L706
 4637 0004 A188     	.LVL593:
 4638 0006 0068     		.loc 1 2744 0
 4639              		ldr	r0, [r4, #0]
 4640 0008 FFF7FEFF 	.LVL594:
 4641              		ldr	r3, [r0, #28]
 4642 000c 0646     		cmp	r5, r3
 4643              		bcs	.L693
 4644 000e 0028     		.loc 1 2745 0
 4645 0010 40D1     		ldr	r1, [r4, #20]
 4646              		mvn	r2, #-268435456
 4647 0012 A279     		bl	put_fat
 4648 0014 12F0800F 		.loc 1 2746 0
 4649 0018 01D0     		mov	r6, r0
 4650 001a 0226     		cbnz	r0, .L705
 4651 001c 3AE0     		ldr	r0, [r4, #0]
 4652              		mov	r1, r5
 4653              		bl	remove_chain
 4654 001e 12F0020F 		mov	r6, r0
 4655 0022 33D0     	.L702:
 4656              		.loc 1 2750 0
 4657 0024 A568     		cbz	r6, .L693
 4658 0026 E368     	.LVL595:
 4659 0028 AB42     	.L705:
 4660 002a 33D9     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 4661              		mvn	r3, r3, lsl #25
 4662 002c 42F02003 		mvn	r3, r3, lsr #25
 4663              		strb	r3, [r4, #6]
 4664 0030 E560     		b	.L693
 4665              	.LVL596:
 4666 0032 A371     	.L697:
 4667              		movs	r6, #7
 4668 0034 35B9     		b	.L693
 4669              	.LVL597:
 4670 0036 2068     	.L706:
 4671 0038 2169     		movs	r6, #2
 4672 003a FFF7FEFF 		b	.L705
 4673              	.LVL598:
 4674 003e 2561     	.L693:
 4675              		.loc 1 2754 0
 4676 0040 0646     		mov	r0, r6
 4677              		pop	{r4, r5, r6, pc}
 4678 0042 1BE0     	.LFE43:
 4680              		.section	.text.sync,"ax",%progbits
 4681 0044 2068     		.align	2
 4682 0046 6169     		.thumb
 4683 0048 FFF7FEFF 		.thumb_func
 4685 004c B0F1FF3F 	sync:
 4686              	.LFB7:
 4687              		.loc 1 454 0
 4688 0050 0546     		@ args = 0, pretend = 0, frame = 0
 4689              		@ frame_needed = 0, uses_anonymous_args = 0
 4690              	.LVL599:
 4691 0052 01D1     		push	{r4, r5, r6, lr}
 4692 0054 0126     	.LCFI29:
 4693 0056 12E0     		.loc 1 458 0
 4694              		movs	r1, #0
 4695              		.loc 1 454 0
 4696 0058 0128     		mov	r5, r0
 4697 005a 19D0     		.loc 1 458 0
 4698              		bl	move_window
 4699              	.LVL600:
 4700 005c 2068     		.loc 1 459 0
 4701              		mov	r6, r0
 4702 005e C369     	.LVL601:
 4703 0060 9D42     		cmp	r0, #0
 4704 0062 17D2     		bne	.L712
 4705              		.loc 1 461 0
 4706 0064 6169     		ldrb	r3, [r5, #0]	@ zero_extendqisi2
 4707 0066 6FF07042 		cmp	r3, #3
 4708 006a FFF7FEFF 		bne	.L714
 4709              		ldrb	r3, [r5, #5]	@ zero_extendqisi2
 4710 006e 0646     		cmp	r3, #0
 4711 0070 28B9     		beq	.L714
 4712 0072 2068     		.loc 1 463 0
 4713 0074 2946     		add	r4, r5, #52
 4714 0076 FFF7FEFF 		.loc 1 462 0
 4715 007a 0646     		str	r0, [r5, #48]
 4716              		.loc 1 463 0
 4717              		mov	r1, r6
 4718 007c 56B1     		mov	r0, r4
 4719              		mov	r2, #512
 4720              		bl	mem_set
 4721 007e A379     		.loc 1 464 0
 4722 0080 6FEA4363 		movs	r3, #85
 4723 0084 6FEA5363 		strb	r3, [r5, #562]
 4724 0088 A371     		mvn	r3, #85
 4725 008a 03E0     		strb	r3, [r5, #563]
 4726              		.loc 1 465 0
 4727              		adds	r3, r3, #168
 4728 008c 0726     		strb	r3, [r5, #52]
 4729 008e 01E0     		strb	r3, [r5, #53]
 4730              		.loc 1 466 0
 4731              		adds	r3, r3, #32
 4732 0090 0226     		strb	r3, [r5, #536]
 4733 0092 F4E7     		strb	r3, [r5, #537]
 4734              		.loc 1 467 0
 4735              		ldr	r3, [r5, #16]
 4736              		.loc 1 465 0
 4737 0094 3046     		movs	r2, #65
 4738 0096 70BD     		strb	r2, [r5, #55]
 4739              		.loc 1 466 0
 4740              		strb	r2, [r5, #538]
 4741              		.loc 1 467 0
 4742              		ubfx	r2, r3, #8, #8
 4743              		strb	r3, [r5, #540]
 4744              		strb	r2, [r5, #541]
 4745              		lsrs	r2, r3, #16
 4746              		lsrs	r3, r3, #24
 4747              		strb	r3, [r5, #543]
 4748              		.loc 1 468 0
 4749              		ldr	r3, [r5, #12]
 4750              		.loc 1 467 0
 4751              		strb	r2, [r5, #542]
 4752 0000 70B5     		.loc 1 468 0
 4753              		ubfx	r2, r3, #8, #8
 4754              		.loc 1 465 0
 4755 0002 0021     		movs	r1, #97
 4756              		.loc 1 468 0
 4757 0004 0546     		strb	r3, [r5, #544]
 4758              		strb	r2, [r5, #545]
 4759 0006 FFF7FEFF 		lsrs	r2, r3, #16
 4760              		lsrs	r3, r3, #24
 4761              		.loc 1 465 0
 4762 000a 0646     		strb	r1, [r5, #54]
 4763              		.loc 1 466 0
 4764 000c 0028     		strb	r1, [r5, #539]
 4765 000e 52D1     		.loc 1 468 0
 4766              		strb	r2, [r5, #546]
 4767 0010 2B78     		strb	r3, [r5, #547]
 4768 0012 032B     		.loc 1 469 0
 4769 0014 47D1     		ldrb	r0, [r5, #1]	@ zero_extendqisi2
 4770 0016 6B79     		mov	r1, r4
 4771 0018 002B     		ldr	r2, [r5, #20]
 4772 001a 44D0     		movs	r3, #1
 4773              		bl	disk_write
 4774 001c 05F13404 		.loc 1 470 0
 4775              		strb	r6, [r5, #5]
 4776 0020 2863     	.L714:
 4777              		.loc 1 473 0
 4778 0022 3146     		movs	r1, #0
 4779 0024 2046     		ldrb	r0, [r5, #1]	@ zero_extendqisi2
 4780 0026 4FF40072 		mov	r2, r1
 4781 002a FFF7FEFF 		bl	disk_ioctl
 4782              		subs	r6, r0, #0
 4783 002e 5523     		it	ne
 4784 0030 85F83232 		movne	r6, #1
 4785 0034 6FF05503 	.L712:
 4786 0038 85F83332 		.loc 1 478 0
 4787              		mov	r0, r6
 4788 003c A833     		pop	{r4, r5, r6, pc}
 4789 003e 85F83430 	.LFE7:
 4791              		.section	.text.f_sync,"ax",%progbits
 4792 0046 2033     		.align	2
 4793 0048 85F81832 		.global	f_sync
 4794 004c 85F81932 		.thumb
 4795              		.thumb_func
 4797              	f_sync:
 4798 0052 4122     	.LFB34:
 4799 0054 85F83720 		.loc 1 2228 0
 4800              		@ args = 0, pretend = 0, frame = 0
 4801 0058 85F81A22 		@ frame_needed = 0, uses_anonymous_args = 0
 4802              	.LVL602:
 4803 005c C3F30722 		push	{r4, r5, r6, lr}
 4804 0060 85F81C32 	.LCFI30:
 4805 0064 85F81D22 		.loc 1 2228 0
 4806 0068 1A0C     		mov	r5, r0
 4807 006a 1B0E     		.loc 1 2234 0
 4808 006c 85F81F32 		ldrh	r1, [r5, #4]
 4809              		ldr	r0, [r0, #0]
 4810 0070 EB68     	.LVL603:
 4811              		bl	validate
 4812 0072 85F81E22 		.loc 1 2235 0
 4813              		mov	r3, r0
 4814 0076 C3F30722 	.LVL604:
 4815              		cmp	r0, #0
 4816 007a 6121     		bne	.L719
 4817              		.loc 1 2236 0
 4818 007c 85F82032 		ldrb	r2, [r5, #6]	@ zero_extendqisi2
 4819 0080 85F82122 		tst	r2, #32
 4820 0084 1A0C     		beq	.L719
 4821 0086 1B0E     		.loc 1 2238 0
 4822              		tst	r2, #64
 4823 0088 85F83610 		beq	.L722
 4824              		.loc 1 2239 0
 4825 008c 85F81B12 		ldr	r3, [r5, #0]
 4826              	.LVL605:
 4827 0090 85F82222 		add	r1, r5, #36
 4828 0094 85F82332 		ldrb	r0, [r3, #1]	@ zero_extendqisi2
 4829              		ldr	r2, [r5, #24]
 4830 0098 6878     		movs	r3, #1
 4831 009a 2146     		bl	disk_write
 4832 009c 6A69     		cbz	r0, .L724
 4833 009e 0123     		movs	r0, #1
 4834 00a0 FFF7FEFF 		b	.L726
 4835              	.L724:
 4836 00a4 6E71     		.loc 1 2241 0
 4837              		ldrb	r3, [r5, #6]	@ zero_extendqisi2
 4838              		bic	r3, r3, #64
 4839 00a6 0021     		strb	r3, [r5, #6]
 4840 00a8 6878     	.LVL606:
 4841 00aa 0A46     	.L722:
 4842 00ac FFF7FEFF 		.loc 1 2245 0
 4843 00b0 061E     		ldr	r0, [r5, #0]
 4844 00b2 18BF     		ldr	r1, [r5, #28]
 4845 00b4 0126     		bl	move_window
 4846              	.LVL607:
 4847              		.loc 1 2246 0
 4848 00b6 3046     		mov	r3, r0
 4849 00b8 70BD     	.LVL608:
 4850              		cmp	r0, #0
 4851              		bne	.L719
 4852 00ba C046     		.loc 1 2247 0
 4853              		ldr	r4, [r5, #32]
 4854              	.LVL609:
 4855              		.loc 1 2248 0
 4856              		ldrb	r3, [r4, #11]	@ zero_extendqisi2
 4857              	.LVL610:
 4858              		orr	r3, r3, #32
 4859              		strb	r3, [r4, #11]
 4860              		.loc 1 2249 0
 4861              		ldr	r3, [r5, #12]
 4862              		strb	r3, [r4, #28]
 4863              		ldrh	r3, [r5, #12]
 4864 0000 70B5     		lsrs	r3, r3, #8
 4865              		strb	r3, [r4, #29]
 4866              		ldrh	r3, [r5, #14]
 4867 0002 0546     		strb	r3, [r4, #30]
 4868              		ldrb	r3, [r5, #15]	@ zero_extendqisi2
 4869 0004 A988     		strb	r3, [r4, #31]
 4870 0006 0068     		.loc 1 2250 0
 4871              		ldr	r3, [r5, #16]
 4872 0008 FFF7FEFF 		strb	r3, [r4, #26]
 4873              		ldrh	r3, [r5, #16]
 4874 000c 0346     		lsrs	r3, r3, #8
 4875              		strb	r3, [r4, #27]
 4876 000e 0028     		.loc 1 2251 0
 4877 0010 49D1     		ldrh	r3, [r5, #18]
 4878              		strb	r3, [r4, #20]
 4879 0012 AA79     		ldrh	r3, [r5, #18]
 4880 0014 12F0200F 		lsrs	r3, r3, #8
 4881 0018 45D0     		strb	r3, [r4, #21]
 4882              		.loc 1 2252 0
 4883 001a 12F0400F 		bl	get_fattime
 4884 001e 0ED0     		.loc 1 2253 0
 4885              		ubfx	r3, r0, #8, #8
 4886 0020 2B68     	.LVL611:
 4887              		strb	r0, [r4, #22]
 4888 0022 05F12401 		strb	r3, [r4, #23]
 4889 0026 5878     		lsrs	r3, r0, #16
 4890 0028 AA69     		lsrs	r0, r0, #24
 4891 002a 0123     	.LVL612:
 4892 002c FFF7FEFF 		strb	r3, [r4, #24]
 4893 0030 08B1     		strb	r0, [r4, #25]
 4894 0032 0120     		.loc 1 2254 0
 4895 0034 38E0     		ldrb	r3, [r5, #6]	@ zero_extendqisi2
 4896              		.loc 1 2255 0
 4897              		ldr	r2, [r5, #0]
 4898 0036 AB79     		.loc 1 2254 0
 4899 0038 23F04003 		bic	r3, r3, #32
 4900 003c AB71     		strb	r3, [r5, #6]
 4901              		.loc 1 2255 0
 4902              		movs	r3, #1
 4903              		strb	r3, [r2, #4]
 4904 003e 2868     		.loc 1 2256 0
 4905 0040 E969     		ldr	r0, [r5, #0]
 4906 0042 FFF7FEFF 		bl	sync
 4907              		mov	r3, r0
 4908              	.LVL613:
 4909 0046 0346     	.L719:
 4910              		.loc 1 2261 0
 4911 0048 0028     		mov	r0, r3
 4912 004a 2CD1     	.L726:
 4913              		.loc 1 2262 0
 4914 004c 2C6A     		pop	{r4, r5, r6, pc}
 4915              	.LFE34:
 4917 004e E37A     		.section	.text.f_close,"ax",%progbits
 4918              		.align	2
 4919 0050 43F02003 		.global	f_close
 4920 0054 E372     		.thumb
 4921              		.thumb_func
 4923 0058 2377     	f_close:
 4924 005a AB89     	.LFB35:
 4925 005c 1B0A     		.loc 1 2276 0
 4926 005e 6377     		@ args = 0, pretend = 0, frame = 0
 4927 0060 EB89     		@ frame_needed = 0, uses_anonymous_args = 0
 4928 0062 A377     	.LVL614:
 4929 0064 EB7B     		push	{r4, lr}
 4930 0066 E377     	.LCFI31:
 4931              		.loc 1 2276 0
 4932 0068 2B69     		mov	r4, r0
 4933 006a A376     		.loc 1 2286 0
 4934 006c 2B8A     		bl	f_sync
 4935 006e 1B0A     	.LVL615:
 4936 0070 E376     		.loc 1 2300 0
 4937              		cbnz	r0, .L730
 4938 0072 6B8A     		str	r0, [r4, #0]
 4939 0074 2375     	.LVL616:
 4940 0076 6B8A     	.L730:
 4941 0078 1B0A     	.LVL617:
 4942 007a 6375     		.loc 1 2303 0
 4943              		pop	{r4, pc}
 4944 007c FFF7FEFF 	.LFE35:
 4946 0080 C0F30723 		.section	.text.get_fileinfo,"ax",%progbits
 4947              		.align	2
 4948 0084 A075     		.thumb
 4949 0086 E375     		.thumb_func
 4951 008a 000E     	get_fileinfo:
 4952              	.LFB25:
 4953 008c 2376     		.loc 1 1486 0
 4954 008e 6076     		@ args = 0, pretend = 0, frame = 0
 4955              		@ frame_needed = 0, uses_anonymous_args = 0
 4956 0090 AB79     	.LVL618:
 4957              		push	{r4, r5, r6, r7, r8, lr}
 4958 0092 2A68     	.LCFI32:
 4959              		.loc 1 1486 0
 4960 0094 23F02003 		mov	r7, r0
 4961 0098 AB71     		.loc 1 1493 0
 4962              		ldr	r3, [r7, #16]
 4963 009a 0123     		.loc 1 1486 0
 4964 009c 1371     		mov	r6, r1
 4965              		.loc 1 1492 0
 4966 009e 2868     		add	r0, r1, #9
 4967 00a0 FFF7FEFF 	.LVL619:
 4968 00a4 0346     		.loc 1 1493 0
 4969              		cmp	r3, #0
 4970              		beq	.L734
 4971              		.loc 1 1494 0
 4972 00a6 1846     		ldr	r1, [r7, #20]
 4973              	.LVL620:
 4974              		.loc 1 1495 0
 4975 00a8 70BD     		mov	r4, r0
 4976              		ldrb	r5, [r1, #12]	@ zero_extendqisi2
 4977              	.LVL621:
 4978 00aa C046     		mov	lr, #0
 4979              	.LVL622:
 4980              	.L736:
 4981              		.loc 1 1497 0
 4982              		ldrb	r2, [lr, r1]	@ zero_extendqisi2
 4983              		.loc 1 1498 0
 4984              		cmp	r2, #32
 4985              		beq	.L737
 4986              		.loc 1 1499 0
 4987              		cmp	r2, #5
 4988              		it	eq
 4989              		moveq	r2, #229
 4990 0000 10B5     		.loc 1 1500 0
 4991              		tst	r5, #8
 4992              		beq	.L741
 4993 0002 0446     		sub	r3, r2, #65
 4994              		uxtb	r3, r3
 4995 0004 FFF7FEFF 		cmp	r3, #25
 4996              		itt	ls
 4997              		addls	r3, r2, #32
 4998 0008 00B9     		uxtbls	r2, r3
 4999 000a 2060     	.L741:
 5000              		.loc 1 1507 0
 5001              		strb	r2, [lr, r0]
 5002              		.loc 1 1496 0
 5003              		add	lr, lr, #1
 5004 000c 10BD     		.loc 1 1507 0
 5005              		adds	r4, r4, #1
 5006              		.loc 1 1496 0
 5007 000e C046     		cmp	lr, #8
 5008              		bne	.L736
 5009              	.LVL623:
 5010              	.L737:
 5011              		.loc 1 1509 0
 5012              		ldrb	r3, [r1, #8]	@ zero_extendqisi2
 5013              		cmp	r3, #32
 5014              		beq	.L744
 5015              		.loc 1 1510 0
 5016              		movs	r3, #46
 5017              		strb	r3, [r4], #1
 5018 0000 2DE9F041 		mov	lr, #8
 5019              	.LVL624:
 5020              	.L746:
 5021 0004 0746     		.loc 1 1512 0
 5022              		ldrb	r2, [lr, r1]	@ zero_extendqisi2
 5023 0006 3B69     		.loc 1 1513 0
 5024              		cmp	r2, #32
 5025 0008 0E46     		beq	.L744
 5026              		.loc 1 1514 0
 5027 000a 01F10900 		tst	r5, #16
 5028              		beq	.L748
 5029              		sub	r3, r2, #65
 5030 000e 002B     		uxtb	r3, r3
 5031 0010 54D0     		cmp	r3, #25
 5032              		itt	ls
 5033 0012 7969     		addls	r3, r2, #32
 5034              		uxtbls	r2, r3
 5035              	.L748:
 5036 0014 0446     		.loc 1 1511 0
 5037 0016 0D7B     		add	lr, lr, #1
 5038              		cmp	lr, #11
 5039 0018 4FF0000E 		.loc 1 1521 0
 5040              		strb	r2, [r4], #1
 5041              		.loc 1 1511 0
 5042              		bne	.L746
 5043 001c 1EF80120 	.L744:
 5044              		.loc 1 1524 0
 5045 0020 202A     		ldrb	r3, [r1, #11]	@ zero_extendqisi2
 5046 0022 15D0     		.loc 1 1527 0
 5047              		mov	r0, r4
 5048 0024 052A     		.loc 1 1524 0
 5049 0026 08BF     		strb	r3, [r6, #8]
 5050 0028 E522     		.loc 1 1525 0
 5051              		ldrb	r3, [r1, #30]	@ zero_extendqisi2
 5052 002a 15F0080F 		ldrb	r2, [r1, #31]	@ zero_extendqisi2
 5053 002e 07D0     	.LVL625:
 5054 0030 A2F14103 		lsls	r3, r3, #16
 5055 0034 DBB2     		orr	r3, r3, r2, lsl #24
 5056 0036 192B     		ldrb	r2, [r1, #28]	@ zero_extendqisi2
 5057 0038 9CBF     		orrs	r3, r3, r2
 5058 003a 02F12003 		ldrb	r2, [r1, #29]	@ zero_extendqisi2
 5059 003e DAB2     		orr	r3, r3, r2, lsl #8
 5060              		str	r3, [r6, #0]
 5061              		.loc 1 1526 0
 5062 0040 0EF80020 		ldrb	r2, [r1, #25]	@ zero_extendqisi2
 5063              		ldrb	r3, [r1, #24]	@ zero_extendqisi2
 5064 0044 0EF1010E 		orr	r3, r3, r2, lsl #8
 5065              		strh	r3, [r6, #4]	@ movhi
 5066 0048 0134     		.loc 1 1527 0
 5067              		ldrb	r2, [r1, #23]	@ zero_extendqisi2
 5068 004a BEF1080F 		ldrb	r3, [r1, #22]	@ zero_extendqisi2
 5069 004e E5D1     		orr	r3, r3, r2, lsl #8
 5070              		strh	r3, [r6, #6]	@ movhi
 5071              	.LVL626:
 5072              	.L734:
 5073 0050 0B7A     		.loc 1 1529 0
 5074 0052 202B     		movs	r1, #0
 5075 0054 1AD0     	.LVL627:
 5076              		strb	r1, [r0, #0]
 5077 0056 2E23     		.loc 1 1532 0
 5078 0058 04F8013B 		ldr	r5, [r6, #24]
 5079 005c 4FF0080E 	.LVL628:
 5080              		cbz	r5, .L761
 5081              	.LBB12:
 5082              		.loc 1 1537 0
 5083 0060 1EF80120 		ldr	r3, [r7, #16]
 5084              		cbz	r3, .L753
 5085 0064 202A     		ldrh	r2, [r7, #32]
 5086 0066 11D0     		movw	r3, #65535
 5087              		cmp	r2, r3
 5088 0068 15F0100F 		beq	.L753
 5089 006c 07D0     		.loc 1 1538 0
 5090 006e A2F14103 		ldr	r7, [r7, #28]
 5091 0072 DBB2     	.LVL629:
 5092 0074 192B     		mov	r4, r1
 5093 0076 9CBF     	.LVL630:
 5094 0078 02F12003 		.loc 1 1539 0
 5095 007c DAB2     		b	.L756
 5096              	.LVL631:
 5097              	.L757:
 5098 007e 0EF1010E 		.loc 1 1541 0
 5099 0082 BEF10B0F 		movs	r1, #0
 5100              		bl	ff_convert
 5101 0086 04F8012B 	.LVL632:
 5102              		.loc 1 1542 0
 5103 008a E9D1     		cbz	r0, .L753
 5104              		.loc 1 1546 0
 5105              		ldr	r3, [r6, #28]
 5106 008c CB7A     		subs	r3, r3, #1
 5107              		cmp	r4, r3
 5108 008e 2046     		bge	.L753
 5109              		.loc 1 1547 0
 5110 0090 3372     		strb	r0, [r4, r5]
 5111              		adds	r4, r4, #1
 5112 0092 8B7F     	.LVL633:
 5113 0094 CA7F     	.L756:
 5114              		.loc 1 1539 0
 5115 0096 1B04     		ldrh	r0, [r7, r4, lsl #1]
 5116 0098 43EA0263 	.LVL634:
 5117 009c 0A7F     		cmp	r0, #0
 5118 009e 1343     		bne	.L757
 5119 00a0 4A7F     		b	.L760
 5120 00a2 43EA0223 	.LVL635:
 5121 00a6 3360     	.L753:
 5122              		movs	r4, #0
 5123 00a8 4A7E     	.LVL636:
 5124 00aa 0B7E     	.L760:
 5125 00ac 43EA0223 		.loc 1 1550 0
 5126 00b0 B380     		movs	r3, #0
 5127              		strb	r3, [r5, r4]
 5128 00b2 CA7D     	.LVL637:
 5129 00b4 8B7D     	.L761:
 5130 00b6 43EA0223 	.LBE12:
 5131 00ba F380     		.loc 1 1553 0
 5132              		pop	{r4, r5, r6, r7, r8, pc}
 5133              	.LFE25:
 5135 00bc 0021     		.section	.text.f_readdir,"ax",%progbits
 5136              		.align	2
 5137 00be 0170     		.global	f_readdir
 5138              		.thumb
 5139 00c0 B569     		.thumb_func
 5141 00c2 DDB1     	f_readdir:
 5142              	.LFB40:
 5143              		.loc 1 2579 0
 5144 00c4 3B69     		@ args = 0, pretend = 0, frame = 16
 5145 00c6 B3B1     		@ frame_needed = 0, uses_anonymous_args = 0
 5146 00c8 3A8C     	.LVL638:
 5147 00ca 4FF6FF73 		push	{r0, r1, r2, r3, r4, r5, r6, lr}
 5148 00ce 9A42     	.LCFI33:
 5149 00d0 11D0     	.LVL639:
 5150              		.loc 1 2579 0
 5151 00d2 FF69     		mov	r4, r0
 5152              	.LVL640:
 5153 00d4 0C46     		mov	r6, r1
 5154              	.LVL641:
 5155              		.loc 1 2584 0
 5156 00d6 09E0     		ldr	r0, [r0, #0]
 5157              	.LVL642:
 5158              		ldrh	r1, [r4, #4]
 5159              	.LVL643:
 5160 00d8 0021     		bl	validate
 5161 00da FFF7FEFF 		.loc 1 2585 0
 5162              		mov	r5, r0
 5163              	.LVL644:
 5164 00de 50B1     		cbnz	r0, .L763
 5165              		.loc 1 2586 0
 5166 00e0 F369     		cbnz	r6, .L765
 5167 00e2 013B     		.loc 1 2587 0
 5168 00e4 9C42     		mov	r0, r4
 5169 00e6 06DA     		mov	r1, r5
 5170              		bl	dir_sdi
 5171 00e8 6055     		b	.L775
 5172 00ea 0134     	.L765:
 5173              		.loc 1 2589 0
 5174              		add	r3, sp, #4
 5175              		str	r3, [r4, #24]
 5176 00ec 37F81400 		ldr	r3, .L776
 5177              		.loc 1 2590 0
 5178 00f0 0028     		mov	r0, r4
 5179 00f2 F1D1     		.loc 1 2589 0
 5180 00f4 00E0     		str	r3, [r4, #28]
 5181              		.loc 1 2590 0
 5182              		bl	dir_read
 5183 00f6 0024     		.loc 1 2591 0
 5184              		cmp	r0, #4
 5185              		bne	.L767
 5186              	.LVL645:
 5187 00f8 0023     		.loc 1 2592 0
 5188 00fa 2B55     		str	r5, [r4, #16]
 5189              		b	.L769
 5190              	.L767:
 5191              		.loc 1 2595 0
 5192              		cbnz	r0, .L775
 5193 00fc BDE8F081 	.LVL646:
 5194              	.L769:
 5195              		.loc 1 2596 0
 5196              		mov	r0, r4
 5197              		mov	r1, r6
 5198              		bl	get_fileinfo
 5199              		.loc 1 2597 0
 5200              		movs	r1, #0
 5201              		mov	r0, r4
 5202              		bl	dir_next
 5203              		.loc 1 2598 0
 5204              		cmp	r0, #4
 5205              		beq	.L771
 5206              	.LVL647:
 5207              	.L775:
 5208 0000 7FB5     		mov	r5, r0
 5209              		b	.L763
 5210              	.L771:
 5211              		.loc 1 2599 0
 5212 0002 0446     		movs	r3, #0
 5213              		str	r3, [r4, #16]
 5214 0004 0E46     	.L763:
 5215              		.loc 1 2608 0
 5216              		mov	r0, r5
 5217 0006 0068     		add	sp, sp, #16
 5218              		pop	{r4, r5, r6, pc}
 5219 0008 A188     	.L777:
 5220              		.align	2
 5221 000a FFF7FEFF 	.L776:
 5222              		.word	.LANCHOR6
 5223 000e 0546     	.LFE40:
 5225 0010 F8B9     		.section	.text.dir_find,"ax",%progbits
 5226              		.align	2
 5227 0012 26B9     		.thumb
 5228              		.thumb_func
 5230 0016 2946     	dir_find:
 5231 0018 FFF7FEFF 	.LFB20:
 5232 001c 15E0     		.loc 1 1002 0
 5233              		@ args = 0, pretend = 0, frame = 0
 5234              		@ frame_needed = 0, uses_anonymous_args = 0
 5235 001e 01AB     	.LVL648:
 5236 0020 A361     		push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 5237 0022 0D4B     	.LCFI34:
 5238              		.loc 1 1009 0
 5239 0024 2046     		movs	r1, #0
 5240              		.loc 1 1002 0
 5241 0026 E361     		mov	r6, r0
 5242              		.loc 1 1009 0
 5243 0028 FFF7FEFF 		bl	dir_sdi
 5244              	.LVL649:
 5245 002c 0428     		.loc 1 1010 0
 5246 002e 01D1     		cmp	r0, #0
 5247              		bne	.L781
 5248              		movs	r7, #255
 5249 0030 2561     	.LVL650:
 5250 0032 00E0     		mov	fp, r7
 5251              	.LVL651:
 5252              	.L782:
 5253 0034 48B9     		.loc 1 1016 0
 5254              		ldr	r0, [r6, #0]
 5255              		ldr	r1, [r6, #16]
 5256              		bl	move_window
 5257 0036 2046     		.loc 1 1017 0
 5258 0038 3146     		mov	r5, r0
 5259 003a FFF7FEFF 		cmp	r0, #0
 5260              		bne	.L783
 5261 003e 0021     		.loc 1 1018 0
 5262 0040 2046     		ldr	r4, [r6, #20]
 5263 0042 FFF7FEFF 		.loc 1 1019 0
 5264              		ldrb	r2, [r4, #0]	@ zero_extendqisi2
 5265 0046 0428     	.LVL652:
 5266 0048 01D0     		.loc 1 1020 0
 5267              		cbnz	r2, .L785
 5268              		movs	r5, #4
 5269 004a 0546     		b	.L783
 5270 004c 01E0     	.L785:
 5271              		.loc 1 1023 0
 5272              		cmp	r2, #229
 5273 004e 0023     		.loc 1 1022 0
 5274 0050 2361     		ldrb	r1, [r4, #11]	@ zero_extendqisi2
 5275              		.loc 1 1023 0
 5276              		beq	.L787
 5277 0052 2846     		tst	r1, #8
 5278 0054 04B0     		.loc 1 1022 0
 5279 0056 70BD     		and	r3, r1, #63
 5280              	.LVL653:
 5281              		.loc 1 1023 0
 5282              		beq	.L789
 5283 0058 00000000 		cmp	r3, #15
 5284              		bne	.L787
 5285              		b	.L791
 5286              	.L789:
 5287              		.loc 1 1026 0
 5288              		cmp	r3, #15
 5289              		bne	.L792
 5290              	.L791:
 5291              		.loc 1 1027 0
 5292              		ldr	r3, [r6, #28]
 5293              	.LVL654:
 5294              		cmp	r3, #0
 5295              		beq	.L793
 5296              		.loc 1 1028 0
 5297 0000 2DE9F84F 		tst	r2, #64
 5298              		beq	.L795
 5299              		.loc 1 1031 0
 5300 0004 0021     		ldrh	r3, [r6, #6]
 5301              		.loc 1 1029 0
 5302 0006 0646     		ldrb	fp, [r4, #13]	@ zero_extendqisi2
 5303              		.loc 1 1030 0
 5304 0008 FFF7FEFF 		and	sl, r2, #191
 5305              	.LVL655:
 5306              		.loc 1 1031 0
 5307 000c 0028     		strh	r3, [r6, #32]	@ movhi
 5308 000e 40F08A80 		b	.L797
 5309 0012 FF27     	.LVL656:
 5310              	.L795:
 5311 0014 BB46     		.loc 1 1034 0
 5312              		cmp	r2, r7
 5313              		bne	.L787
 5314              		mov	sl, r7
 5315 0016 3068     	.LVL657:
 5316 0018 3169     	.L797:
 5317 001a FFF7FEFF 		ldrb	r3, [r4, #13]	@ zero_extendqisi2
 5318              		cmp	r3, fp
 5319 001e 0546     		bne	.L787
 5320 0020 0028     	.LBB17:
 5321 0022 7AD1     	.LBB18:
 5322              		.loc 1 840 0
 5323 0024 7469     		ldrb	r3, [r4, #0]	@ zero_extendqisi2
 5324              		movs	r2, #13
 5325 0026 2278     		and	r3, r3, #191
 5326              		mul	r3, r3, r2
 5327              	.LBE18:
 5328 0028 0AB9     	.LBE17:
 5329 002a 0425     		.loc 1 1034 0
 5330 002c 75E0     		ldr	r9, [r6, #28]
 5331              	.LBB23:
 5332              	.LBB19:
 5333 002e E52A     		.loc 1 840 0
 5334              		sub	r5, r3, #13
 5335 0030 E17A     	.LVL658:
 5336              		movs	r7, #0
 5337 0032 69D0     	.LVL659:
 5338 0034 11F0080F 		mov	r8, #1
 5339              	.LVL660:
 5340 0038 01F03F03 	.L801:
 5341              		.loc 1 843 0
 5342              		ldr	r3, .L818
 5343 003c 02D0     		ldrb	r2, [r7, r3]	@ zero_extendqisi2
 5344 003e 0F2B     		adds	r3, r4, r2
 5345 0040 62D1     		ldrb	r1, [r3, #1]	@ zero_extendqisi2
 5346 0042 01E0     		ldrb	r3, [r4, r2]	@ zero_extendqisi2
 5347              		orr	r0, r3, r1, lsl #8
 5348              		.loc 1 844 0
 5349 0044 0F2B     		cmp	r8, #0
 5350 0046 48D1     		beq	.L802
 5351              	.LBE19:
 5352              		.loc 1 845 0
 5353 0048 F369     		bl	ff_wtoupper
 5354              	.LVL661:
 5355 004a 002B     	.LBB20:
 5356 004c 5DD0     		.loc 1 846 0
 5357              		cmp	r5, #254
 5358 004e 12F0400F 	.LBE20:
 5359 0052 06D0     		.loc 1 845 0
 5360              		mov	r8, r0
 5361 0054 F388     	.LBB21:
 5362              		.loc 1 846 0
 5363 0056 94F80DB0 		bgt	.L787
 5364              	.LBE21:
 5365 005a 02F0BF0A 		ldrh	r0, [r9, r5, lsl #1]
 5366              		bl	ff_wtoupper
 5367              	.LBB22:
 5368 005e 3384     		cmp	r8, r0
 5369 0060 02E0     		bne	.L787
 5370              		adds	r5, r5, #1
 5371              		b	.L806
 5372              	.LVL662:
 5373 0062 BA42     	.L802:
 5374 0064 50D1     		.loc 1 849 0
 5375 0066 BA46     		movw	r3, #65535
 5376              		cmp	r0, r3
 5377              		bne	.L787
 5378 0068 637B     	.L806:
 5379 006a 5B45     		.loc 1 851 0
 5380 006c 4CD1     		adds	r7, r7, #1
 5381              		cmp	r7, #13
 5382              		bne	.L801
 5383              		.loc 1 853 0
 5384 006e 2378     		ldrb	r3, [r4, #0]	@ zero_extendqisi2
 5385 0070 0D22     		tst	r3, #64
 5386 0072 03F0BF03 		beq	.L808
 5387 0076 03FB02F3 		cmp	r8, #0
 5388              		beq	.L808
 5389              		ldrh	r3, [r9, r5, lsl #1]
 5390              		cbz	r3, .L808
 5391 007a D6F81C90 		b	.L787
 5392              	.LVL663:
 5393              	.L792:
 5394              	.LBE22:
 5395 007e A3F10D05 	.LBE23:
 5396              		.loc 1 1037 0
 5397 0082 0027     		cbnz	r7, .L811
 5398              		mov	r0, r4
 5399 0084 4FF00108 		bl	sum_sfn
 5400              	.LVL664:
 5401              		cmp	fp, r0
 5402              		beq	.L783
 5403 0088 284B     	.LVL665:
 5404 008a FA5C     	.L811:
 5405 008c A318     		.loc 1 1038 0
 5406 008e 5978     		mov	r3, #-1	@ movhi
 5407 0090 A35C     	.LVL666:
 5408 0092 43EA0120 		.loc 1 1039 0
 5409              		ldr	r0, [r6, #24]
 5410 0096 B8F1000F 		.loc 1 1038 0
 5411 009a 0CD0     		strh	r3, [r6, #32]	@ movhi
 5412              		.loc 1 1039 0
 5413              		ldrb	r3, [r0, #11]	@ zero_extendqisi2
 5414 009c FFF7FEFF 		tst	r3, #1
 5415              		bne	.L787
 5416              		mov	r1, r5
 5417              		b	.L814
 5418 00a0 FE2D     	.LVL667:
 5419              	.L815:
 5420              	.LBB24:
 5421 00a2 8046     	.LBB25:
 5422              		.loc 1 262 0
 5423              		cmp	r1, #11
 5424 00a4 30DC     		beq	.L783
 5425              	.LVL668:
 5426 00a6 39F81500 	.L814:
 5427 00aa FFF7FEFF 		ldrb	r2, [r1, r4]	@ zero_extendqisi2
 5428              	.LVL669:
 5429 00ae 8045     		ldrb	r3, [r1, r0]	@ zero_extendqisi2
 5430 00b0 2AD1     		adds	r1, r1, #1
 5431 00b2 0135     		cmp	r2, r3
 5432 00b4 03E0     		beq	.L815
 5433              	.LVL670:
 5434              	.L787:
 5435              	.LBE25:
 5436 00b6 4FF6FF73 	.LBE24:
 5437 00ba 9842     		.loc 1 1039 0
 5438 00bc 24D1     		movs	r7, #255
 5439              	.LVL671:
 5440              	.L793:
 5441 00be 0137     		.loc 1 1046 0
 5442 00c0 0D2F     		mov	r0, r6
 5443 00c2 E1D1     	.LVL672:
 5444              		movs	r1, #0
 5445 00c4 2378     		bl	dir_next
 5446 00c6 13F0400F 	.LVL673:
 5447 00ca 28D0     		.loc 1 1047 0
 5448 00cc B8F1000F 		mov	r5, r0
 5449 00d0 25D0     	.LVL674:
 5450 00d2 39F81530 		cmp	r0, #0
 5451 00d6 13B3     		beq	.L782
 5452 00d8 16E0     	.LVL675:
 5453              	.L783:
 5454              		.loc 1 1049 0
 5455              		mov	r0, r5
 5456              		b	.L781
 5457              	.LVL676:
 5458 00da 27B9     	.L808:
 5459 00dc 2046     		.loc 1 1034 0
 5460 00de FFF7FEFF 		add	r3, sl, #-1
 5461              		uxtb	r7, r3
 5462 00e2 8345     	.LVL677:
 5463 00e4 19D0     		b	.L793
 5464              	.LVL678:
 5465              	.L781:
 5466              		.loc 1 1050 0
 5467 00e6 4FF0FF33 		pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 5468              	.L819:
 5469              		.align	2
 5470 00ea B069     	.L818:
 5471              		.word	.LANCHOR5
 5472 00ec 3384     	.LFE20:
 5474 00ee C37A     		.section	.text.follow_path,"ax",%progbits
 5475 00f0 13F0010F 		.align	2
 5476 00f4 08D1     		.thumb
 5477 00f6 2946     		.thumb_func
 5479              	follow_path:
 5480              	.LFB26:
 5481              		.loc 1 1568 0
 5482              		@ args = 0, pretend = 0, frame = 8
 5483              		@ frame_needed = 0, uses_anonymous_args = 0
 5484 00fa 0B29     	.LVL679:
 5485 00fc 0DD0     		push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 5486              	.LCFI35:
 5487              	.LVL680:
 5488 00fe 0A5D     		.loc 1 1568 0
 5489              		str	r1, [sp, #0]
 5490 0100 0B5C     	.LVL681:
 5491 0102 0131     		.loc 1 1574 0
 5492 0104 9A42     		ldrb	r3, [r1, #0]	@ zero_extendqisi2
 5493 0106 F8D0     		.loc 1 1568 0
 5494              		mov	r7, r0
 5495              	.LVL682:
 5496              		.loc 1 1574 0
 5497              		cmp	r3, #47
 5498              		beq	.L821
 5499 0108 FF27     	.LVL683:
 5500              		cmp	r3, #92
 5501              		bne	.L823
 5502              	.L821:
 5503 010a 3046     		.loc 1 1575 0
 5504              		ldr	r2, [sp, #0]
 5505 010c 0021     		movs	r3, #0
 5506 010e FFF7FEFF 		adds	r2, r2, #1
 5507              		str	r2, [sp, #0]
 5508              	.LVL684:
 5509 0112 0546     		b	.L918
 5510              	.LVL685:
 5511 0114 0028     	.L823:
 5512 0116 3FF47EAF 		.loc 1 1577 0
 5513              		ldr	r3, [r0, #0]
 5514              		ldr	r3, [r3, #24]
 5515              	.LVL686:
 5516 011a 2846     	.L918:
 5517 011c 03E0     		.loc 1 1585 0
 5518              		ldr	r2, [sp, #0]
 5519              		.loc 1 1577 0
 5520              		str	r3, [r7, #8]
 5521 011e 0AF1FF33 		.loc 1 1585 0
 5522 0122 DFB2     		ldrb	r3, [r2, #0]	@ zero_extendqisi2
 5523              		cmp	r3, #31
 5524 0124 F1E7     		bhi	.L922
 5525              	.LVL687:
 5526              		.loc 1 1586 0
 5527              		mov	r0, r7
 5528 0126 BDE8F88F 		movs	r1, #0
 5529              		bl	dir_sdi
 5530 012a C046     		.loc 1 1587 0
 5531              		movs	r3, #0
 5532 012c 00000000 		.loc 1 1586 0
 5533              		mov	r2, r0
 5534              	.LVL688:
 5535              		.loc 1 1587 0
 5536              		str	r3, [r7, #20]
 5537              		b	.L827
 5538              	.LVL689:
 5539              	.L922:
 5540              	.LBB28:
 5541              	.LBB29:
 5542              		.loc 1 1286 0
 5543              		movs	r6, #0
 5544              		ldr	r8, [r7, #28]
 5545              		mov	r9, r6
 5546 0000 2DE9F74F 	.LVL690:
 5547              	.L828:
 5548              		.loc 1 1288 0
 5549              		ldr	r3, [sp, #0]
 5550 0004 0091     		adds	r5, r6, #1
 5551              	.LVL691:
 5552              		ldrb	r0, [r6, r3]	@ zero_extendqisi2
 5553 0006 0B78     	.LVL692:
 5554              		.loc 1 1289 0
 5555 0008 0746     		cmp	r0, #31
 5556              		bls	.L829
 5557              	.LVL693:
 5558 000a 2F2B     		cmp	r0, #47
 5559 000c 01D0     		beq	.L829
 5560              		cmp	r0, #92
 5561 000e 5C2B     		beq	.L829
 5562 0010 04D1     		.loc 1 1290 0
 5563              		cmp	r5, #256
 5564              		beq	.L833
 5565 0012 009A     	.LVL694:
 5566 0014 0023     	.LBE29:
 5567 0016 0132     		.loc 1 1300 0
 5568 0018 0092     		movs	r1, #1
 5569              		bl	ff_convert
 5570 001a 01E0     	.LVL695:
 5571              	.LBB30:
 5572              		.loc 1 1301 0
 5573              		mov	r4, r0
 5574 001c 0368     	.LVL696:
 5575 001e 9B69     		cmp	r0, #0
 5576              		beq	.L833
 5577              		.loc 1 1303 0
 5578              		cmp	r0, #127
 5579 0020 009A     		bhi	.L836
 5580              	.LVL697:
 5581 0022 BB60     	.LBE30:
 5582              		ldr	r0, .L924
 5583 0024 1378     	.LVL698:
 5584 0026 1F2B     		mov	r1, r4
 5585 0028 07D8     		bl	chk_chr
 5586              	.LBB31:
 5587              		cmp	r0, #0
 5588 002a 3846     		bne	.L833
 5589 002c 0021     	.LVL699:
 5590 002e FFF7FEFF 	.L836:
 5591              		.loc 1 1305 0
 5592 0032 0023     		strh	r4, [r9, r8]	@ movhi
 5593              		mov	r6, r5
 5594 0034 0246     		add	r9, r9, #2
 5595              		b	.L828
 5596              	.LVL700:
 5597 0036 7B61     	.L829:
 5598 0038 37E1     		.loc 1 1307 0
 5599              		ldr	r2, [sp, #0]
 5600              		adds	r2, r2, r5
 5601              		.loc 1 1308 0
 5602              		cmp	r0, #31
 5603              		ite	ls
 5604 003a 0026     		movls	r5, #4
 5605 003c D7F81C80 		movhi	r5, #0
 5606 0040 B146     	.LVL701:
 5607              		.loc 1 1310 0
 5608              		cmp	r6, #1
 5609              		.loc 1 1307 0
 5610 0042 009B     		str	r2, [sp, #0]
 5611 0044 751C     	.LVL702:
 5612              		.loc 1 1310 0
 5613 0046 F05C     		beq	.L920
 5614              		cmp	r6, #2
 5615              		beq	.L845
 5616 0048 1F28     	.L844:
 5617 004a 1DD9     		add	r2, r8, r6, lsl #1
 5618              		b	.L846
 5619 004c 2F28     	.L845:
 5620 004e 1BD0     		ldrh	r3, [r8, #2]
 5621 0050 5C28     		cmp	r3, #46
 5622 0052 19D0     		bne	.L844
 5623              	.L920:
 5624 0054 B5F5807F 		ldrh	r3, [r8, #0]
 5625 0058 00F0F780 		cmp	r3, #46
 5626              		bne	.L844
 5627              		.loc 1 1312 0
 5628              		mov	r3, #0	@ movhi
 5629 005c 0121     		strh	r3, [r8, r6, lsl #1]	@ movhi
 5630 005e FFF7FEFF 		movs	r1, #0
 5631              	.LVL703:
 5632              	.L848:
 5633              		.loc 1 1314 0
 5634 0062 0446     		ldr	r2, [r7, #24]
 5635              		cmp	r1, r6
 5636 0064 0028     		ite	ge
 5637 0066 00F0F080 		movge	r3, #32
 5638              		movlt	r3, #46
 5639 006a 7F28     		strb	r3, [r2, r1]
 5640 006c 06D8     		.loc 1 1313 0
 5641              		adds	r1, r1, #1
 5642              		cmp	r1, #11
 5643 006e 9048     		bne	.L848
 5644              		.loc 1 1315 0
 5645 0070 2146     		ldr	r2, [r7, #24]
 5646 0072 FFF7FEFF 		orr	r3, r5, #32
 5647              		strb	r3, [r2, #11]
 5648 0076 0028     		b	.L921
 5649 0078 40F0E780 	.LVL704:
 5650              	.L854:
 5651              		.loc 1 1320 0
 5652              		ldrh	r3, [r2, #-2]
 5653 007c 29F80840 	.LVL705:
 5654 0080 2E46     		sub	r4, r8, #2
 5655 0082 09F10209 		.loc 1 1321 0
 5656 0086 DCE7     		cmp	r3, #32
 5657              		beq	.L855
 5658              		cmp	r3, #46
 5659              		bne	.L857
 5660 0088 009A     	.L855:
 5661 008a 5219     		.loc 1 1322 0
 5662              		subs	r6, r6, #1
 5663 008c 1F28     		subs	r2, r2, #2
 5664 008e 94BF     	.LVL706:
 5665 0090 0425     	.L846:
 5666 0092 0025     		.loc 1 1319 0
 5667              		cmp	r6, #0
 5668              		bne	.L854
 5669 0094 012E     		b	.L833
 5670              	.LVL707:
 5671 0096 0092     	.L857:
 5672              		.loc 1 1326 0
 5673              		mov	r2, #0	@ movhi
 5674 0098 08D0     		strh	r2, [r8, r6, lsl #1]	@ movhi
 5675 009a 022E     		.loc 1 1329 0
 5676 009c 02D0     		ldr	r0, [r7, #24]
 5677              		movs	r1, #32
 5678 009e 08EB4602 		movs	r2, #11
 5679 00a2 24E0     		bl	mem_set
 5680              	.LVL708:
 5681 00a4 B8F80230 		mov	r9, #0
 5682 00a8 2E2B     	.LVL709:
 5683 00aa F8D1     		b	.L858
 5684              	.L859:
 5685 00ac B8F80030 		.loc 1 1330 0
 5686 00b0 2E2B     		add	r9, r9, #1
 5687 00b2 F4D1     	.L858:
 5688              		ldrh	r3, [r8, r9, lsl #1]
 5689 00b4 4FF00003 		cmp	r3, #32
 5690 00b8 28F81630 		beq	.L859
 5691 00bc 0021     		cmp	r3, #46
 5692              		beq	.L859
 5693              		.loc 1 1331 0
 5694              		cmp	r9, #0
 5695 00be BA69     		beq	.L862
 5696 00c0 B142     		orr	r5, r5, #3
 5697 00c2 ACBF     	.L862:
 5698 00c4 2023     		add	r2, r4, r6, lsl #1
 5699 00c6 2E23     		b	.L864
 5700 00c8 5354     	.LVL710:
 5701              	.L865:
 5702 00ca 0131     		.loc 1 1332 0
 5703 00cc 0B29     		subs	r2, r2, #2
 5704 00ce F6D1     		adds	r6, r6, #-1
 5705              		bne	.L864
 5706 00d0 BA69     	.LVL711:
 5707 00d2 45F02003 	.L866:
 5708 00d6 D372     		mov	sl, #0
 5709 00d8 B5E0     		movs	r3, #8
 5710              		mov	fp, sl
 5711              		str	r3, [sp, #4]
 5712              	.LVL712:
 5713 00da 32F8023C 		b	.L923
 5714              	.L864:
 5715 00de A8F10204 		ldrh	r3, [r2, #0]
 5716              		cmp	r3, #46
 5717 00e2 202B     		bne	.L865
 5718 00e4 01D0     		b	.L866
 5719 00e6 2E2B     	.LVL713:
 5720 00e8 04D1     	.L923:
 5721              		.loc 1 1336 0
 5722              		ldrh	r4, [r8, r9, lsl #1]
 5723 00ea 013E     		.loc 1 1337 0
 5724 00ec 023A     		cmp	r4, #0
 5725              		beq	.L868
 5726              	.LVL714:
 5727              		.loc 1 1338 0
 5728 00ee 002E     		cmp	r4, #32
 5729 00f0 F3D1     		.loc 1 1336 0
 5730 00f2 AAE0     		add	r9, r9, #1
 5731              		.loc 1 1338 0
 5732              		beq	.L870
 5733              		cmp	r4, #46
 5734 00f4 4FF00002 		bne	.L872
 5735 00f8 28F81620 		cmp	r9, r6
 5736              		beq	.L872
 5737 00fc B869     	.L870:
 5738 00fe 2021     		.loc 1 1339 0
 5739 0100 0B22     		orr	r5, r5, #3
 5740 0102 FFF7FEFF 		b	.L923
 5741              	.L872:
 5742 0106 4FF00009 		.loc 1 1342 0
 5743              		ldr	r2, [sp, #4]
 5744 010a 01E0     		cmp	fp, r2
 5745              		bge	.L874
 5746              		cmp	r9, r6
 5747 010c 09F10109 		bne	.L876
 5748              	.L874:
 5749 0110 38F81930 		.loc 1 1343 0
 5750 0114 202B     		ldr	r3, [sp, #4]
 5751 0116 F9D0     		cmp	r3, #11
 5752 0118 2E2B     		bne	.L877
 5753 011a F7D0     		.loc 1 1344 0
 5754              		orr	r5, r5, #3
 5755 011c B9F1000F 		b	.L868
 5756 0120 01D0     	.L877:
 5757 0122 45F00305 		.loc 1 1346 0
 5758              		cmp	r9, r6
 5759 0126 04EB4602 		beq	.L879
 5760 012a 09E0     	.LVL715:
 5761              		orr	r5, r5, #3
 5762              		.loc 1 1347 0
 5763              		bgt	.L868
 5764 012c 023A     	.L879:
 5765 012e 16F1FF36 		.loc 1 1349 0
 5766 0132 05D1     		lsl	r3, sl, #2
 5767              		movs	r2, #11
 5768              		uxtb	sl, r3
 5769 0134 4FF0000A 		mov	r9, r6
 5770 0138 0823     		mov	fp, #8
 5771 013a D346     		str	r2, [sp, #4]
 5772 013c 0193     	.LVL716:
 5773              		b	.L923
 5774 013e 03E0     	.L876:
 5775              		.loc 1 1352 0
 5776 0140 1388     		cmp	r4, #127
 5777 0142 2E2B     		bls	.L881
 5778 0144 F2D1     	.LBE31:
 5779 0146 F5E7     		.loc 1 1354 0
 5780              		mov	r0, r4
 5781              		movs	r1, #0
 5782              		bl	ff_convert
 5783 0148 38F81940 	.LBB32:
 5784              		.loc 1 1355 0
 5785 014c 002C     		mov	r4, r0
 5786 014e 54D0     		cbz	r0, .L883
 5787              		ldr	r3, .L924+4
 5788              		adds	r3, r0, r3
 5789 0150 202C     		ldrb	r4, [r3, #-128]	@ zero_extendqisi2
 5790              	.L883:
 5791 0152 09F10109 		.loc 1 1359 0
 5792              		orr	r5, r5, #2
 5793 0156 03D0     		.loc 1 1368 0
 5794 0158 2E2C     		cbz	r4, .L885
 5795 015a 04D1     	.L881:
 5796 015c B145     	.LBE32:
 5797 015e 02D0     		ldr	r0, .L924+8
 5798              		mov	r1, r4
 5799              		bl	chk_chr
 5800 0160 45F00305 	.LBB33:
 5801 0164 F0E7     		cbz	r0, .L886
 5802              	.L885:
 5803              		.loc 1 1369 0
 5804 0166 019A     		orr	r5, r5, #3
 5805 0168 9345     		movs	r4, #95
 5806 016a 01DA     		b	.L887
 5807 016c B145     	.L886:
 5808 016e 14D1     		.loc 1 1371 0
 5809              		sub	r3, r4, #65
 5810              		uxth	r3, r3
 5811 0170 019B     		cmp	r3, #25
 5812 0172 0B2B     		bhi	.L888
 5813 0174 02D1     		.loc 1 1372 0
 5814              		orr	sl, sl, #2
 5815 0176 45F00305 		b	.L887
 5816 017a 3EE0     	.L888:
 5817              		.loc 1 1374 0
 5818              		sub	r3, r4, #97
 5819 017c B145     		uxth	r3, r3
 5820 017e 02D0     		cmp	r3, #25
 5821              		bhi	.L887
 5822 0180 45F00305 		.loc 1 1375 0
 5823              		sub	r3, r4, #32
 5824 0184 39DC     		orr	sl, sl, #1
 5825              		uxth	r4, r3
 5826              	.L887:
 5827 0186 4FEA8A03 		.loc 1 1380 0
 5828 018a 0B22     		ldr	r3, [r7, #24]
 5829 018c 5FFA83FA 		strb	r4, [r3, fp]
 5830 0190 B146     		add	fp, fp, #1
 5831 0192 4FF0080B 		b	.L923
 5832 0196 0192     	.LVL717:
 5833              	.L868:
 5834 0198 D6E7     		.loc 1 1383 0
 5835              		ldr	r2, [r7, #24]
 5836              		ldrb	r3, [r2, #0]	@ zero_extendqisi2
 5837 019a 7F2C     		cmp	r3, #229
 5838 019c 0CD9     		bne	.L891
 5839              		movs	r3, #5
 5840              		strb	r3, [r2, #0]
 5841 019e 2046     	.L891:
 5842 01a0 0021     		.loc 1 1385 0
 5843 01a2 FFF7FEFF 		ldr	r3, [sp, #4]
 5844              		cmp	r3, #8
 5845              		itt	eq
 5846 01a6 0446     		lsleq	r3, sl, #2
 5847 01a8 18B1     		uxtbeq	sl, r3
 5848 01aa 424B     		.loc 1 1386 0
 5849 01ac C318     		and	r2, sl, #12
 5850 01ae 13F8804C 		cmp	r2, #12
 5851              		beq	.L895
 5852              		and	r3, sl, #3
 5853 01b2 45F00205 		cmp	r3, #3
 5854              		bne	.L897
 5855 01b6 24B1     	.L895:
 5856              		.loc 1 1387 0
 5857              		orr	r5, r5, #2
 5858 01b8 3F48     	.L897:
 5859 01ba 2146     		.loc 1 1388 0
 5860 01bc FFF7FEFF 		tst	r5, #2
 5861              		bne	.L898
 5862 01c0 18B1     		.loc 1 1389 0
 5863              		and	r3, sl, #3
 5864              		cmp	r3, #1
 5865 01c2 45F00305 		it	eq
 5866 01c6 5F24     		orreq	r5, r5, #16
 5867 01c8 11E0     		.loc 1 1390 0
 5868              		cmp	r2, #4
 5869              		it	eq
 5870 01ca A4F14103 		orreq	r5, r5, #8
 5871 01ce 9BB2     	.L898:
 5872 01d0 192B     		.loc 1 1393 0
 5873 01d2 02D8     		ldr	r3, [r7, #24]
 5874              		strb	r5, [r3, #11]
 5875 01d4 4AF0020A 	.LVL718:
 5876 01d8 09E0     	.L921:
 5877              		movs	r3, #0
 5878              		b	.L853
 5879 01da A4F16103 	.LVL719:
 5880 01de 9BB2     	.L833:
 5881 01e0 192B     		movs	r3, #6
 5882 01e2 04D8     	.LVL720:
 5883              	.L853:
 5884 01e4 A4F12003 	.LBE33:
 5885 01e8 4AF0010A 	.LBE28:
 5886 01ec 9CB2     		.loc 1 1591 0
 5887              		uxtb	r4, r3
 5888              		.loc 1 1592 0
 5889 01ee BB69     		cbnz	r4, .L903
 5890 01f0 03F80B40 		.loc 1 1593 0
 5891 01f4 0BF1010B 		mov	r0, r7
 5892 01f8 A6E7     	.LVL721:
 5893              		bl	dir_find
 5894              		.loc 1 1594 0
 5895              		ldr	r3, [r7, #24]
 5896 01fa BA69     		.loc 1 1595 0
 5897 01fc 1378     		mov	r2, r0
 5898 01fe E52B     	.LVL722:
 5899 0200 01D1     		.loc 1 1594 0
 5900 0202 0523     		ldrb	r3, [r3, #11]	@ zero_extendqisi2
 5901 0204 1370     	.LVL723:
 5902              		.loc 1 1595 0
 5903              		cbz	r0, .L905
 5904 0206 019B     		.loc 1 1596 0
 5905 0208 082B     		cmp	r0, #4
 5906 020a 04BF     		bne	.L827
 5907 020c 4FEA8A03 	.LVL724:
 5908 0210 5FFA83FA 		.loc 1 1598 0
 5909              		tst	r3, #32
 5910 0214 0AF00C02 		and	r3, r3, #4
 5911 0218 0C2A     	.LVL725:
 5912 021a 03D0     		beq	.L908
 5913 021c 0AF00303 		.loc 1 1599 0
 5914 0220 032B     		str	r4, [r7, #8]
 5915 0222 01D1     		str	r4, [r7, #20]
 5916              		.loc 1 1601 0
 5917              		cmp	r3, #0
 5918 0224 45F00205 		beq	.L922
 5919              	.LVL726:
 5920              		b	.L903
 5921 0228 15F0020F 	.LVL727:
 5922 022c 09D1     	.L908:
 5923              		.loc 1 1603 0
 5924 022e 0AF00303 		cbz	r3, .L910
 5925 0232 012B     		b	.L827
 5926 0234 08BF     	.LVL728:
 5927 0236 45F01005 	.L905:
 5928              		.loc 1 1607 0
 5929 023a 042A     		tst	r3, #4
 5930 023c 08BF     		bne	.L827
 5931 023e 45F00805 		.loc 1 1608 0
 5932              		ldr	r0, [r7, #20]
 5933              	.LVL729:
 5934 0242 BB69     		.loc 1 1609 0
 5935 0244 DD72     		ldrb	r3, [r0, #11]	@ zero_extendqisi2
 5936              	.LVL730:
 5937              		tst	r3, #16
 5938 0246 0023     		beq	.L910
 5939 0248 00E0     		.loc 1 1612 0
 5940              		ldrb	r3, [r0, #21]	@ zero_extendqisi2
 5941              		ldrb	r2, [r0, #20]	@ zero_extendqisi2
 5942 024a 0623     	.LVL731:
 5943              		ldrb	r1, [r0, #27]	@ zero_extendqisi2
 5944              		orr	r2, r2, r3, lsl #8
 5945              		ldrb	r3, [r0, #26]	@ zero_extendqisi2
 5946              		orr	r3, r3, r1, lsl #8
 5947              		orr	r3, r3, r2, lsl #16
 5948 024c DCB2     		str	r3, [r7, #8]
 5949              		b	.L922
 5950 024e 4CBB     	.LVL732:
 5951              	.L903:
 5952 0250 3846     		mov	r2, r4
 5953              		b	.L827
 5954 0252 FFF7FEFF 	.LVL733:
 5955              	.L910:
 5956 0256 BB69     		movs	r2, #5
 5957              	.LVL734:
 5958 0258 0246     	.L827:
 5959              		.loc 1 1617 0
 5960              		mov	r0, r2
 5961 025a DB7A     	.LVL735:
 5962              		pop	{r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 5963              	.L925:
 5964 025c 70B1     		.align	2
 5965              	.L924:
 5966 025e 0428     		.word	.LC2
 5967 0260 23D1     		.word	.LANCHOR7
 5968              		.word	.LC3
 5969              	.LFE26:
 5971 0266 03F00403 		.section	.text.f_utime,"ax",%progbits
 5972              		.align	2
 5973 026a 05D0     		.global	f_utime
 5974              		.thumb
 5975 026c BC60     		.thumb_func
 5977              	f_utime:
 5978 0270 002B     	.LFB47:
 5979 0272 3FF4E2AE 		.loc 1 2953 0
 5980              		@ args = 0, pretend = 0, frame = 56
 5981 0276 15E0     		@ frame_needed = 0, uses_anonymous_args = 0
 5982              	.LVL736:
 5983              		push	{r4, r5, lr}
 5984              	.LCFI36:
 5985 0278 B3B1     		sub	sp, sp, #60
 5986 027a 16E0     	.LCFI37:
 5987              		.loc 1 2960 0
 5988              		add	r5, sp, #8
 5989              		.loc 1 2953 0
 5990 027c 13F0040F 		str	r0, [sp, #4]
 5991 0280 13D1     		mov	r4, r1
 5992              		.loc 1 2960 0
 5993 0282 7869     		add	r0, sp, #4
 5994              	.LVL737:
 5995              		mov	r1, r5
 5996 0284 C37A     	.LVL738:
 5997              		movs	r2, #1
 5998 0286 13F0100F 		bl	chk_mounted
 5999 028a 0DD0     		.loc 1 2961 0
 6000              		mov	r3, r0
 6001 028c 437D     	.LVL739:
 6002 028e 027D     		cbnz	r0, .L927
 6003              		.loc 1 2962 0
 6004 0290 C17E     		add	r3, sp, #44
 6005 0292 42EA0322 	.LVL740:
 6006 0296 837E     		str	r3, [sp, #32]
 6007 0298 43EA0123 		ldr	r3, .L934
 6008 029c 43EA0243 		.loc 1 2963 0
 6009 02a0 BB60     		mov	r0, r5
 6010 02a2 CAE6     		ldr	r1, [sp, #4]
 6011              		.loc 1 2962 0
 6012              		str	r3, [sp, #36]
 6013 02a4 2246     		.loc 1 2963 0
 6014 02a6 00E0     		bl	follow_path
 6015              		.loc 1 2965 0
 6016              		mov	r3, r0
 6017 02a8 0522     	.LVL741:
 6018              		cbnz	r0, .L927
 6019              		ldr	r3, [sp, #32]
 6020              	.LVL742:
 6021 02aa 1046     		ldrb	r3, [r3, #11]	@ zero_extendqisi2
 6022              		tst	r3, #32
 6023 02ac BDE8FE8F 		bne	.L930
 6024              		.loc 1 2968 0
 6025              		ldr	r2, [sp, #28]
 6026              	.LVL743:
 6027 02b0 28000000 		.loc 1 2969 0
 6028 02b4 00000000 		cbz	r2, .L930
 6029 02b8 31000000 		.loc 1 2972 0
 6030              		ldrh	r3, [r4, #6]
 6031              		strb	r3, [r2, #22]
 6032              		ldrh	r3, [r4, #6]
 6033              		lsrs	r3, r3, #8
 6034              		strb	r3, [r2, #23]
 6035              		.loc 1 2973 0
 6036              		ldrh	r3, [r4, #4]
 6037              		strb	r3, [r2, #24]
 6038              		ldrh	r3, [r4, #4]
 6039              		lsrs	r3, r3, #8
 6040              		strb	r3, [r2, #25]
 6041              		.loc 1 2974 0
 6042              		ldr	r3, [sp, #8]
 6043              		movs	r2, #1
 6044 0000 30B5     	.LVL744:
 6045              		strb	r2, [r3, #4]
 6046 0002 8FB0     		.loc 1 2975 0
 6047              		ldr	r0, [sp, #8]
 6048              		bl	sync
 6049 0004 02AD     		mov	r3, r0
 6050              	.LVL745:
 6051 0006 0190     		b	.L927
 6052 0008 0C46     	.LVL746:
 6053              	.L930:
 6054 000a 01A8     		movs	r3, #6
 6055              	.LVL747:
 6056 000c 2946     	.L927:
 6057              		.loc 1 2981 0
 6058 000e 0122     		mov	r0, r3
 6059 0010 FFF7FEFF 		add	sp, sp, #60
 6060              		pop	{r4, r5, pc}
 6061 0014 0346     	.L935:
 6062              		.align	2
 6063 0016 18BB     	.L934:
 6064              		.word	.LANCHOR6
 6065 0018 0BAB     	.LFE47:
 6067 001a 0893     		.section	.text.f_chmod,"ax",%progbits
 6068 001c 124B     		.align	2
 6069              		.global	f_chmod
 6070 001e 2846     		.thumb
 6071 0020 0199     		.thumb_func
 6073 0022 0993     	f_chmod:
 6074              	.LFB46:
 6075 0024 FFF7FEFF 		.loc 1 2912 0
 6076              		@ args = 0, pretend = 0, frame = 56
 6077 0028 0346     		@ frame_needed = 0, uses_anonymous_args = 0
 6078              	.LVL748:
 6079 002a C8B9     		push	{r4, r5, r6, lr}
 6080 002c 089B     	.LCFI38:
 6081              		sub	sp, sp, #56
 6082 002e DB7A     	.LCFI39:
 6083 0030 13F0200F 		.loc 1 2919 0
 6084 0034 13D1     		add	r4, sp, #8
 6085              		.loc 1 2912 0
 6086 0036 079A     		str	r0, [sp, #4]
 6087              		mov	r6, r1
 6088              		mov	r5, r2
 6089 0038 8AB1     		.loc 1 2919 0
 6090              		add	r0, sp, #4
 6091 003a E388     	.LVL749:
 6092 003c 9375     		mov	r1, r4
 6093 003e E388     	.LVL750:
 6094 0040 1B0A     		movs	r2, #1
 6095 0042 D375     	.LVL751:
 6096              		bl	chk_mounted
 6097 0044 A388     		.loc 1 2920 0
 6098 0046 1376     		mov	r3, r0
 6099 0048 A388     	.LVL752:
 6100 004a 1B0A     		cbnz	r0, .L937
 6101 004c 5376     		.loc 1 2921 0
 6102              		add	r3, sp, #44
 6103 004e 029B     	.LVL753:
 6104 0050 0122     		str	r3, [sp, #32]
 6105              		ldr	r3, .L944
 6106 0052 1A71     		.loc 1 2922 0
 6107              		mov	r0, r4
 6108 0054 0298     		ldr	r1, [sp, #4]
 6109 0056 FFF7FEFF 		.loc 1 2921 0
 6110 005a 0346     		str	r3, [sp, #36]
 6111              		.loc 1 2922 0
 6112 005c 00E0     		bl	follow_path
 6113              		.loc 1 2924 0
 6114              		mov	r3, r0
 6115 005e 0623     	.LVL754:
 6116              		cbnz	r0, .L937
 6117              		ldr	r3, [sp, #32]
 6118              	.LVL755:
 6119 0060 1846     		ldrb	r3, [r3, #11]	@ zero_extendqisi2
 6120 0062 0FB0     		tst	r3, #32
 6121 0064 30BD     		bne	.L940
 6122              		.loc 1 2927 0
 6123 0066 C046     		ldr	r0, [sp, #28]
 6124              	.LVL756:
 6125 0068 00000000 		.loc 1 2928 0
 6126              		cbz	r0, .L940
 6127              		.loc 1 2932 0
 6128              		ldrb	r3, [r0, #11]	@ zero_extendqisi2
 6129              		.loc 1 2931 0
 6130              		and	r2, r5, #39
 6131              	.LVL757:
 6132              		.loc 1 2932 0
 6133              		bic	r3, r3, r2
 6134              		ands	r2, r2, r6
 6135              	.LVL758:
 6136              		orrs	r3, r3, r2
 6137              		strb	r3, [r0, #11]
 6138              		.loc 1 2933 0
 6139              		ldr	r3, [sp, #8]
 6140 0000 70B5     		movs	r2, #1
 6141              		strb	r2, [r3, #4]
 6142 0002 8EB0     		.loc 1 2934 0
 6143              		ldr	r0, [sp, #8]
 6144              	.LVL759:
 6145 0004 02AC     		bl	sync
 6146              		mov	r3, r0
 6147 0006 0190     	.LVL760:
 6148 0008 0E46     		b	.L937
 6149 000a 1546     	.LVL761:
 6150              	.L940:
 6151 000c 01A8     		movs	r3, #6
 6152              	.LVL762:
 6153 000e 2146     	.L937:
 6154              		.loc 1 2940 0
 6155 0010 0122     		mov	r0, r3
 6156              	.LVL763:
 6157 0012 FFF7FEFF 		add	sp, sp, #56
 6158              		pop	{r4, r5, r6, pc}
 6159 0016 0346     	.L945:
 6160              		.align	2
 6161 0018 08BB     	.L944:
 6162              		.word	.LANCHOR6
 6163 001a 0BAB     	.LFE46:
 6165 001c 0893     		.section	.text.f_unlink,"ax",%progbits
 6166 001e 114B     		.align	2
 6167              		.global	f_unlink
 6168 0020 2046     		.thumb
 6169 0022 0199     		.thumb_func
 6171 0024 0993     	f_unlink:
 6172              	.LFB44:
 6173 0026 FFF7FEFF 		.loc 1 2766 0
 6174              		@ args = 0, pretend = 0, frame = 96
 6175 002a 0346     		@ frame_needed = 0, uses_anonymous_args = 0
 6176              	.LVL764:
 6177 002c B8B9     		push	{r4, r5, lr}
 6178 002e 089B     	.LCFI40:
 6179              		sub	sp, sp, #100
 6180 0030 DB7A     	.LCFI41:
 6181 0032 13F0200F 		.loc 1 2774 0
 6182 0036 11D1     		add	r4, sp, #48
 6183              		.loc 1 2766 0
 6184 0038 0798     		str	r0, [sp, #4]
 6185              		.loc 1 2774 0
 6186              		movs	r2, #1
 6187 003a 78B1     		add	r0, sp, #4
 6188              	.LVL765:
 6189 003c C37A     		mov	r1, r4
 6190              		bl	chk_mounted
 6191 003e 05F02702 		.loc 1 2775 0
 6192              		mov	r2, r0
 6193              	.LVL766:
 6194 0042 23EA0203 		cmp	r0, #0
 6195 0046 3240     		bne	.L947
 6196              		.loc 1 2776 0
 6197 0048 1343     		add	r3, sp, #84
 6198 004a C372     		str	r3, [sp, #72]
 6199              		ldr	r3, .L969
 6200 004c 029B     		.loc 1 2777 0
 6201 004e 0122     		mov	r0, r4
 6202 0050 1A71     		ldr	r1, [sp, #4]
 6203              		.loc 1 2776 0
 6204 0052 0298     		str	r3, [sp, #76]
 6205              		.loc 1 2777 0
 6206 0054 FFF7FEFF 		bl	follow_path
 6207 0058 0346     	.LVL767:
 6208              		.loc 1 2778 0
 6209 005a 00E0     		mov	r2, r0
 6210              	.LVL768:
 6211              		cmp	r0, #0
 6212 005c 0623     		bne	.L947
 6213              		ldr	r3, [sp, #72]
 6214              		ldrb	r3, [r3, #11]	@ zero_extendqisi2
 6215              		tst	r3, #32
 6216 005e 1846     		beq	.L950
 6217              		movs	r2, #6
 6218 0060 0EB0     		b	.L947
 6219 0062 70BD     	.L950:
 6220              		.loc 1 2784 0
 6221              		ldr	r0, [sp, #68]
 6222              	.LVL769:
 6223 0064 00000000 		.loc 1 2785 0
 6224              		cbnz	r0, .L952
 6225              		movs	r2, #6
 6226              		b	.L954
 6227              	.L952:
 6228              		.loc 1 2788 0
 6229              		ldrb	r3, [r0, #11]	@ zero_extendqisi2
 6230              		tst	r3, #1
 6231              		ite	eq
 6232              		moveq	r2, #0
 6233              		movne	r2, #7
 6234              	.L954:
 6235              		.loc 1 2791 0
 6236              		ldrb	r4, [r0, #21]	@ zero_extendqisi2
 6237              		ldrb	r3, [r0, #20]	@ zero_extendqisi2
 6238 0000 30B5     		ldrb	lr, [r0, #27]	@ zero_extendqisi2
 6239              		ldrb	r1, [r0, #26]	@ zero_extendqisi2
 6240 0002 99B0     		.loc 1 2792 0
 6241              		cmp	r2, #0
 6242              		bne	.L947
 6243 0004 0CAC     		.loc 1 2791 0
 6244              		orr	r3, r3, r4, lsl #8
 6245 0006 0190     		orr	r2, r1, lr, lsl #8
 6246              	.LVL770:
 6247 0008 0122     		orr	r4, r2, r3, lsl #16
 6248 000a 01A8     	.LVL771:
 6249              		.loc 1 2792 0
 6250 000c 2146     		ldrb	r3, [r0, #11]	@ zero_extendqisi2
 6251 000e FFF7FEFF 		tst	r3, #16
 6252              		beq	.L957
 6253 0012 0246     		.loc 1 2793 0
 6254              		cmp	r4, #1
 6255 0014 0028     		bls	.L959
 6256 0016 5DD1     		.loc 1 2796 0
 6257              		add	r5, sp, #12
 6258 0018 15AB     		movs	r2, #36
 6259 001a 1293     		mov	r0, r5
 6260 001c 2F4B     	.LVL772:
 6261              		add	r1, sp, #48
 6262 001e 2046     		bl	mem_cpy
 6263 0020 0199     		.loc 1 2798 0
 6264              		mov	r0, r5
 6265 0022 1393     		movs	r1, #2
 6266              		.loc 1 2797 0
 6267 0024 FFF7FEFF 		str	r4, [sp, #20]
 6268              		.loc 1 2798 0
 6269              		bl	dir_sdi
 6270 0028 0246     		.loc 1 2799 0
 6271              		mov	r2, r0
 6272 002a 0028     	.LVL773:
 6273 002c 52D1     		cbnz	r0, .L947
 6274 002e 129B     		.loc 1 2800 0
 6275 0030 DB7A     		mov	r0, r5
 6276 0032 13F0200F 		bl	dir_read
 6277 0036 01D0     	.LVL774:
 6278 0038 0622     		.loc 1 2801 0
 6279 003a 4BE0     		mov	r2, r0
 6280              	.LVL775:
 6281              		cbz	r0, .L962
 6282 003c 1198     		ldr	r3, [sp, #12]
 6283              		ldr	r3, [r3, #24]
 6284              		cmp	r4, r3
 6285 003e 08B9     		beq	.L962
 6286 0040 0622     		.loc 1 2806 0
 6287 0042 05E0     		cmp	r0, #4
 6288              		beq	.L957
 6289              	.LVL776:
 6290 0044 C37A     		b	.L947
 6291 0046 13F0010F 	.LVL777:
 6292 004a 0CBF     	.L962:
 6293 004c 0022     		movs	r2, #7
 6294 004e 0722     		b	.L947
 6295              	.L965:
 6296              		.loc 1 2813 0
 6297 0050 447D     		cbz	r4, .L966
 6298 0052 037D     		.loc 1 2814 0
 6299 0054 90F81BE0 		ldr	r0, [sp, #48]
 6300 0058 817E     		mov	r1, r4
 6301              		bl	remove_chain
 6302 005a 002A     	.LVL778:
 6303 005c 3AD1     		.loc 1 2815 0
 6304              		mov	r2, r0
 6305 005e 43EA0423 	.LVL779:
 6306 0062 41EA0E22 		cbnz	r0, .L947
 6307              	.L966:
 6308 0066 42EA0344 		ldr	r0, [sp, #48]
 6309              		bl	sync
 6310              	.LVL780:
 6311 006a C37A     		mov	r2, r0
 6312 006c 13F0100F 	.LVL781:
 6313 0070 2AD0     		b	.L947
 6314              	.LVL782:
 6315 0072 012C     	.L959:
 6316 0074 26D9     		movs	r2, #2
 6317              	.LVL783:
 6318 0076 03AD     		b	.L947
 6319 0078 2422     	.LVL784:
 6320 007a 2846     	.L957:
 6321              		.loc 1 2811 0
 6322 007c 0CA9     		add	r0, sp, #48
 6323 007e FFF7FEFF 	.LVL785:
 6324              		bl	dir_remove
 6325 0082 2846     	.LVL786:
 6326 0084 0221     		.loc 1 2812 0
 6327              		mov	r2, r0
 6328 0086 0594     	.LVL787:
 6329              		cmp	r0, #0
 6330 0088 FFF7FEFF 		beq	.L965
 6331              	.LVL788:
 6332 008c 0246     	.L947:
 6333              		.loc 1 2822 0
 6334 008e 08BB     		mov	r0, r2
 6335              	.LVL789:
 6336 0090 2846     		add	sp, sp, #100
 6337 0092 FFF7FEFF 		pop	{r4, r5, pc}
 6338              	.L970:
 6339              		.align	2
 6340 0096 0246     	.L969:
 6341              		.word	.LANCHOR6
 6342 0098 30B1     	.LFE44:
 6344 009c 9B69     		.section	.text.f_stat,"ax",%progbits
 6345 009e 9C42     		.align	2
 6346 00a0 02D0     		.global	f_stat
 6347              		.thumb
 6348 00a2 0428     		.thumb_func
 6350              	f_stat:
 6351 00a6 15E0     	.LFB41:
 6352              		.loc 1 2621 0
 6353              		@ args = 0, pretend = 0, frame = 56
 6354 00a8 0722     		@ frame_needed = 0, uses_anonymous_args = 0
 6355 00aa 13E0     	.LVL790:
 6356              		push	{r4, r5, r6, lr}
 6357              	.LCFI42:
 6358 00ac 2CB1     		sub	sp, sp, #56
 6359              	.LCFI43:
 6360 00ae 0C98     		.loc 1 2627 0
 6361 00b0 2146     		add	r5, sp, #8
 6362 00b2 FFF7FEFF 		.loc 1 2621 0
 6363              		str	r0, [sp, #4]
 6364              		mov	r6, r1
 6365 00b6 0246     		.loc 1 2627 0
 6366              		add	r0, sp, #4
 6367 00b8 60B9     	.LVL791:
 6368              		mov	r1, r5
 6369 00ba 0C98     	.LVL792:
 6370 00bc FFF7FEFF 		movs	r2, #0
 6371              		bl	chk_mounted
 6372 00c0 0246     		.loc 1 2628 0
 6373              		mov	r4, r0
 6374 00c2 07E0     	.LVL793:
 6375              		cbnz	r0, .L972
 6376              		.loc 1 2629 0
 6377 00c4 0222     		add	r3, sp, #44
 6378              		str	r3, [sp, #32]
 6379 00c6 05E0     		ldr	r3, .L978
 6380              		.loc 1 2630 0
 6381              		mov	r0, r5
 6382              		ldr	r1, [sp, #4]
 6383 00c8 0CA8     		.loc 1 2629 0
 6384              		str	r3, [sp, #36]
 6385 00ca FFF7FEFF 		.loc 1 2630 0
 6386              		bl	follow_path
 6387              		.loc 1 2631 0
 6388 00ce 0246     		mov	r4, r0
 6389              		cbnz	r0, .L972
 6390 00d0 0028     		.loc 1 2632 0
 6391 00d2 EBD0     		ldr	r3, [sp, #28]
 6392              		cbnz	r3, .L975
 6393              		movs	r4, #6
 6394              		b	.L972
 6395 00d4 1046     	.L975:
 6396              		.loc 1 2633 0
 6397 00d6 19B0     		mov	r0, r5
 6398 00d8 30BD     		mov	r1, r6
 6399              		bl	get_fileinfo
 6400 00da C046     	.L972:
 6401              		.loc 1 2641 0
 6402 00dc 00000000 		mov	r0, r4
 6403              		add	sp, sp, #56
 6404              		pop	{r4, r5, r6, pc}
 6405              	.L979:
 6406              		.align	2
 6407              	.L978:
 6408              		.word	.LANCHOR6
 6409              	.LFE41:
 6411              		.section	.text.f_opendir,"ax",%progbits
 6412              		.align	2
 6413              		.global	f_opendir
 6414              		.thumb
 6415              		.thumb_func
 6417 0000 70B5     	f_opendir:
 6418              	.LFB39:
 6419 0002 8EB0     		.loc 1 2537 0
 6420              		@ args = 0, pretend = 0, frame = 24
 6421              		@ frame_needed = 0, uses_anonymous_args = 0
 6422 0004 02AD     	.LVL794:
 6423              		push	{r4, lr}
 6424 0006 0190     	.LCFI44:
 6425 0008 0E46     		mov	r4, r0
 6426              		sub	sp, sp, #24
 6427 000a 01A8     	.LCFI45:
 6428              		.loc 1 2537 0
 6429 000c 2946     		str	r1, [sp, #4]
 6430              		.loc 1 2543 0
 6431 000e 0022     		add	r0, sp, #4
 6432 0010 FFF7FEFF 	.LVL795:
 6433              		mov	r1, r4
 6434 0014 0446     	.LVL796:
 6435              		movs	r2, #0
 6436 0016 88B9     		bl	chk_mounted
 6437              		.loc 1 2544 0
 6438 0018 0BAB     		mov	r3, r0
 6439 001a 0893     	.LVL797:
 6440 001c 094B     		cbnz	r0, .L981
 6441              		.loc 1 2545 0
 6442 001e 2846     		add	r3, sp, #12
 6443 0020 0199     	.LVL798:
 6444              		str	r3, [r4, #24]
 6445 0022 0993     		ldr	r3, .L991
 6446              		.loc 1 2546 0
 6447 0024 FFF7FEFF 		mov	r0, r4
 6448              		.loc 1 2545 0
 6449 0028 0446     		str	r3, [r4, #28]
 6450 002a 38B9     		.loc 1 2546 0
 6451              		ldr	r1, [sp, #4]
 6452 002c 079B     		bl	follow_path
 6453 002e 0BB9     		.loc 1 2548 0
 6454 0030 0624     		mov	r3, r0
 6455 0032 03E0     	.LVL799:
 6456              		cbnz	r0, .L983
 6457              		.loc 1 2549 0
 6458 0034 2846     		ldr	r0, [r4, #20]
 6459 0036 3146     	.LVL800:
 6460 0038 FFF7FEFF 		.loc 1 2550 0
 6461              		cbz	r0, .L985
 6462              		.loc 1 2551 0
 6463 003c 2046     		ldrb	r3, [r0, #11]	@ zero_extendqisi2
 6464 003e 0EB0     	.LVL801:
 6465 0040 70BD     		tst	r3, #16
 6466              		bne	.L987
 6467 0042 C046     		movs	r3, #5
 6468              	.LVL802:
 6469 0044 00000000 		b	.L981
 6470              	.LVL803:
 6471              	.L987:
 6472              		.loc 1 2552 0
 6473              		ldrb	r3, [r0, #21]	@ zero_extendqisi2
 6474              		ldrb	r2, [r0, #20]	@ zero_extendqisi2
 6475              		ldrb	r1, [r0, #27]	@ zero_extendqisi2
 6476              		orr	r2, r2, r3, lsl #8
 6477              		ldrb	r3, [r0, #26]	@ zero_extendqisi2
 6478              		orr	r3, r3, r1, lsl #8
 6479              		orr	r3, r3, r2, lsl #16
 6480              		str	r3, [r4, #8]
 6481              	.LVL804:
 6482              	.L985:
 6483              		.loc 1 2558 0
 6484 0000 10B5     		ldr	r3, [r4, #0]
 6485              	.LVL805:
 6486 0002 0446     		.loc 1 2559 0
 6487 0004 86B0     		mov	r0, r4
 6488              	.LVL806:
 6489              		.loc 1 2558 0
 6490 0006 0191     		ldrh	r3, [r3, #6]
 6491              		.loc 1 2559 0
 6492 0008 01A8     		movs	r1, #0
 6493              		.loc 1 2558 0
 6494 000a 2146     		strh	r3, [r4, #4]	@ movhi
 6495              		.loc 1 2559 0
 6496 000c 0022     		bl	dir_sdi
 6497 000e FFF7FEFF 		mov	r3, r0
 6498              	.LVL807:
 6499 0012 0346     	.L983:
 6500              		.loc 1 2562 0
 6501 0014 38BB     		cmp	r3, #4
 6502              		it	eq
 6503 0016 03AB     		moveq	r3, #5
 6504              	.LVL808:
 6505 0018 A361     	.L981:
 6506 001a 144B     		.loc 1 2566 0
 6507              		mov	r0, r3
 6508 001c 2046     	.LVL809:
 6509              		add	sp, sp, #24
 6510 001e E361     		pop	{r4, pc}
 6511              	.L992:
 6512 0020 0199     		.align	2
 6513 0022 FFF7FEFF 	.L991:
 6514              		.word	.LANCHOR6
 6515 0026 0346     	.LFE39:
 6517 0028 D0B9     		.section	.text.f_chdir,"ax",%progbits
 6518              		.align	2
 6519 002a 6069     		.global	f_chdir
 6520              		.thumb
 6521              		.thumb_func
 6523              	f_chdir:
 6524 002e C37A     	.LFB37:
 6525              		.loc 1 2331 0
 6526 0030 13F0100F 		@ args = 0, pretend = 0, frame = 56
 6527 0034 01D1     		@ frame_needed = 0, uses_anonymous_args = 0
 6528 0036 0523     	.LVL810:
 6529              		push	{r4, lr}
 6530 0038 15E0     	.LCFI46:
 6531              		sub	sp, sp, #56
 6532              	.LCFI47:
 6533              		.loc 1 2338 0
 6534 003a 437D     		add	r4, sp, #8
 6535 003c 027D     		.loc 1 2331 0
 6536 003e C17E     		str	r0, [sp, #4]
 6537 0040 42EA0322 		.loc 1 2338 0
 6538 0044 837E     		mov	r1, r4
 6539 0046 43EA0123 		add	r0, sp, #4
 6540 004a 43EA0243 	.LVL811:
 6541 004e A360     		movs	r2, #0
 6542              		bl	chk_mounted
 6543              		.loc 1 2339 0
 6544              		mov	lr, r0
 6545 0050 2368     	.LVL812:
 6546              		cbnz	r0, .L994
 6547              		.loc 1 2340 0
 6548 0052 2046     		add	r3, sp, #44
 6549              		str	r3, [sp, #32]
 6550              		ldr	r3, .L1004
 6551 0054 DB88     		.loc 1 2341 0
 6552              		mov	r0, r4
 6553 0056 0021     		ldr	r1, [sp, #4]
 6554              		.loc 1 2340 0
 6555 0058 A380     		str	r3, [sp, #36]
 6556              		.loc 1 2341 0
 6557 005a FFF7FEFF 		bl	follow_path
 6558 005e 0346     	.LVL813:
 6559              		.loc 1 2343 0
 6560              		mov	lr, r0
 6561              	.LVL814:
 6562 0060 042B     		cbnz	r0, .L996
 6563 0062 08BF     		.loc 1 2344 0
 6564 0064 0523     		ldr	r0, [sp, #28]
 6565              	.LVL815:
 6566              		.loc 1 2345 0
 6567              		cbnz	r0, .L998
 6568 0066 1846     		.loc 1 2346 0
 6569              		ldr	r2, [sp, #16]
 6570 0068 06B0     		ldr	r3, [sp, #8]
 6571 006a 10BD     		str	r2, [r3, #24]
 6572              		b	.L994
 6573              	.L998:
 6574              		.loc 1 2348 0
 6575 006c 00000000 		ldrb	r3, [r0, #11]	@ zero_extendqisi2
 6576              		tst	r3, #16
 6577              		beq	.L1000
 6578              		.loc 1 2349 0
 6579              		ldrb	r3, [r0, #21]	@ zero_extendqisi2
 6580              		ldrb	r2, [r0, #20]	@ zero_extendqisi2
 6581              		ldrb	r1, [r0, #27]	@ zero_extendqisi2
 6582              		orr	r2, r2, r3, lsl #8
 6583              		ldrb	r3, [r0, #26]	@ zero_extendqisi2
 6584              		orr	r3, r3, r1, lsl #8
 6585              		orr	r3, r3, r2, lsl #16
 6586              		ldr	r2, [sp, #8]
 6587              		str	r3, [r2, #24]
 6588              		b	.L994
 6589              	.LVL816:
 6590 0000 10B5     	.L996:
 6591              		.loc 1 2354 0
 6592 0002 8EB0     		cmp	r0, #4
 6593              		bne	.L994
 6594              	.LVL817:
 6595 0004 02AC     		add	lr, r0, #1
 6596              	.LVL818:
 6597 0006 0190     		b	.L994
 6598              	.LVL819:
 6599 0008 2146     	.L1000:
 6600 000a 01A8     		mov	lr, #5
 6601              	.LVL820:
 6602 000c 0022     	.L994:
 6603 000e FFF7FEFF 		.loc 1 2358 0
 6604              		mov	r0, lr
 6605 0012 8646     	.LVL821:
 6606              		add	sp, sp, #56
 6607 0014 38BB     		pop	{r4, pc}
 6608              	.L1005:
 6609 0016 0BAB     		.align	2
 6610 0018 0893     	.L1004:
 6611 001a 144B     		.word	.LANCHOR6
 6612              	.LFE37:
 6614 001e 0199     		.section	.text.dir_register,"ax",%progbits
 6615              		.align	2
 6616 0020 0993     		.thumb
 6617              		.thumb_func
 6619              	dir_register:
 6620              	.LFB22:
 6621 0026 8646     		.loc 1 1120 0
 6622              		@ args = 0, pretend = 0, frame = 16
 6623 0028 B0B9     		@ frame_needed = 0, uses_anonymous_args = 0
 6624              	.LVL822:
 6625 002a 0798     		push	{r4, r5, r6, r7, r8, r9, lr}
 6626              	.LCFI48:
 6627              		.loc 1 1129 0
 6628 002c 18B9     		ldr	r5, [r0, #24]
 6629              	.LVL823:
 6630 002e 049A     		.loc 1 1120 0
 6631 0030 029B     		sub	sp, sp, #20
 6632 0032 9A61     	.LCFI49:
 6633 0034 17E0     		.loc 1 1129 0
 6634              		ldr	r7, [r0, #28]
 6635              	.LVL824:
 6636 0036 C37A     		.loc 1 1130 0
 6637 0038 13F0100F 		movs	r2, #12
 6638 003c 11D0     		.loc 1 1120 0
 6639              		mov	r6, r0
 6640 003e 437D     		.loc 1 1130 0
 6641 0040 027D     		mov	r1, r5
 6642 0042 C17E     		add	r0, sp, #4
 6643 0044 42EA0322 	.LVL825:
 6644 0048 837E     		bl	mem_cpy
 6645 004a 43EA0123 		.loc 1 1132 0
 6646 004e 43EA0243 		ldrb	r3, [sp, #15]	@ zero_extendqisi2
 6647 0052 029A     		ands	r2, r3, #32
 6648 0054 9361     		beq	.L1007
 6649 0056 06E0     		movs	r0, #6
 6650              		b	.L1009
 6651              	.L1007:
 6652              		.loc 1 1134 0
 6653 0058 0428     		tst	r3, #1
 6654 005a 04D1     		beq	.L1010
 6655              		.loc 1 1135 0
 6656 005c 00F1010E 		strb	r2, [r5, #11]
 6657              		add	r8, r5, #11
 6658 0060 01E0     		str	r2, [r6, #28]
 6659              		movs	r4, #1
 6660              	.LVL826:
 6661 0062 4FF0050E 	.L1012:
 6662              		.loc 1 1137 0
 6663              		mov	r0, r5
 6664              		add	r1, sp, #4
 6665 0066 7046     		mov	r2, r7
 6666              		mov	r3, r4
 6667 0068 0EB0     		bl	gen_numname
 6668 006a 10BD     		.loc 1 1138 0
 6669              		mov	r0, r6
 6670              		bl	dir_find
 6671              		.loc 1 1139 0
 6672 006c 00000000 		cbnz	r0, .L1013
 6673              		.loc 1 1136 0
 6674              		adds	r3, r4, #1
 6675              		uxth	r4, r3
 6676              		cmp	r4, #100
 6677              		bne	.L1012
 6678              		adds	r0, r0, #7
 6679              		b	.L1009
 6680              	.L1013:
 6681              		.loc 1 1142 0
 6682              		cmp	r0, #4
 6683              	.LVL827:
 6684              		bne	.L1009
 6685              		.loc 1 1143 0
 6686 0000 2DE9F043 		ldrb	r3, [sp, #15]	@ zero_extendqisi2
 6687              		strb	r3, [r8, #0]
 6688              		str	r7, [r6, #28]
 6689 0004 8569     	.L1010:
 6690              		.loc 1 1146 0
 6691              		ldrb	r3, [sp, #15]	@ zero_extendqisi2
 6692 0006 85B0     		tst	r3, #2
 6693              		bne	.L1018
 6694              		mov	r8, #1
 6695 0008 C769     	.LVL828:
 6696              		b	.L1020
 6697              	.LVL829:
 6698 000a 0C22     	.L1018:
 6699              		movs	r2, #0
 6700 000c 0646     	.L1021:
 6701              		uxth	r1, r2
 6702 000e 2946     	.LVL830:
 6703 0010 01A8     		.loc 1 1147 0
 6704              		ldrh	r3, [r7, r1, lsl #1]
 6705 0012 FFF7FEFF 		.loc 1 1146 0
 6706              		adds	r2, r2, #1
 6707 0016 9DF80F30 		.loc 1 1147 0
 6708 001a 13F02002 		cmp	r3, #0
 6709 001e 01D0     		bne	.L1021
 6710 0020 0620     		.loc 1 1148 0
 6711 0022 C8E0     		add	r3, r1, #25
 6712              		movs	r2, #13
 6713              		sdiv	r3, r3, r2
 6714 0024 13F0010F 		uxth	r8, r3
 6715 0028 1CD0     	.LVL831:
 6716              	.L1020:
 6717 002a EA72     		.loc 1 1154 0
 6718 002c 05F10B08 		mov	r0, r6
 6719 0030 F261     	.LVL832:
 6720 0032 0124     		movs	r1, #0
 6721              		bl	dir_sdi
 6722              		.loc 1 1155 0
 6723              		cmp	r0, #0
 6724 0034 2846     		bne	.L1009
 6725 0036 01A9     		mov	r4, r0
 6726 0038 3A46     	.LVL833:
 6727 003a 2346     		mov	r7, r0
 6728 003c FFF7FEFF 	.LVL834:
 6729              	.L1025:
 6730 0040 3046     		.loc 1 1158 0
 6731 0042 FFF7FEFF 		ldr	r0, [r6, #0]
 6732              		ldr	r1, [r6, #16]
 6733 0046 28B9     		bl	move_window
 6734              		.loc 1 1159 0
 6735 0048 631C     		mov	r5, r0
 6736 004a 9CB2     	.LVL835:
 6737 004c 642C     		cmp	r0, #0
 6738 004e F1D1     		bne	.L1026
 6739 0050 0730     		.loc 1 1160 0
 6740 0052 B0E0     		ldr	r3, [r6, #20]
 6741              		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 6742              	.LVL836:
 6743 0054 0428     		.loc 1 1161 0
 6744              		cmp	r3, #229
 6745 0056 40F0AE80 		beq	.L1028
 6746              		cbz	r3, .L1028
 6747 005a 9DF80F30 		mov	r7, r0
 6748 005e 88F80030 		b	.L1031
 6749 0062 F761     	.LVL837:
 6750              	.L1028:
 6751              		.loc 1 1162 0
 6752 0064 9DF80F30 		cbnz	r7, .L1032
 6753 0068 13F0020F 		ldrh	r4, [r6, #6]
 6754 006c 02D1     	.L1032:
 6755 006e 4FF00108 		.loc 1 1163 0
 6756              		adds	r3, r7, #1
 6757 0072 0DE0     	.LVL838:
 6758              		uxth	r7, r3
 6759              		cmp	r7, r8
 6760 0074 0022     		beq	.L1034
 6761              	.LVL839:
 6762 0076 91B2     	.L1031:
 6763              		.loc 1 1167 0
 6764              		mov	r0, r6
 6765 0078 37F81130 		movs	r1, #1
 6766              		bl	dir_next
 6767 007c 0132     	.LVL840:
 6768              		.loc 1 1168 0
 6769 007e 002B     		mov	r5, r0
 6770 0080 F9D1     		cmp	r0, #0
 6771              		beq	.L1025
 6772 0082 01F11903 		b	.L1026
 6773 0086 0D22     	.L1035:
 6774 0088 93FBF2F3 		.loc 1 1171 0
 6775 008c 1FFA83F8 		mov	r0, r6
 6776              		mov	r1, r4
 6777              		bl	dir_sdi
 6778              		.loc 1 1172 0
 6779 0090 3046     		mov	r5, r0
 6780              		cmp	r0, #0
 6781 0092 0021     		bne	.L1026
 6782 0094 FFF7FEFF 		.loc 1 1173 0
 6783              		ldr	r0, [r6, #24]
 6784 0098 0028     		bl	sum_sfn
 6785 009a 40F08C80 		.loc 1 1174 0
 6786 009e 0446     		add	r3, r8, #-1
 6787              		.loc 1 1173 0
 6788 00a0 0746     		mov	r9, r0
 6789              	.LVL841:
 6790              		.loc 1 1174 0
 6791              		uxth	r7, r3
 6792 00a2 3068     	.LVL842:
 6793 00a4 3169     	.L1037:
 6794 00a6 FFF7FEFF 		.loc 1 1176 0
 6795              		ldr	r0, [r6, #0]
 6796 00aa 0546     		ldr	r1, [r6, #16]
 6797              		bl	move_window
 6798 00ac 0028     		.loc 1 1177 0
 6799 00ae 7CD1     		mov	r5, r0
 6800              		cmp	r0, #0
 6801 00b0 7369     		bne	.L1026
 6802 00b2 1B78     		.loc 1 1178 0
 6803              		ldr	r4, [r6, #20]
 6804              	.LVL843:
 6805 00b4 E52B     	.LBB36:
 6806 00b6 02D0     	.LBB37:
 6807 00b8 0BB1     		.loc 1 907 0
 6808 00ba 0746     		movs	r3, #15
 6809 00bc 05E0     	.LBE37:
 6810              	.LBE36:
 6811              		.loc 1 1178 0
 6812              		ldr	r8, [r6, #28]
 6813 00be 07B9     		uxtb	r1, r7
 6814 00c0 F488     	.LVL844:
 6815              	.LBB39:
 6816              	.LBB38:
 6817 00c2 7B1C     		.loc 1 907 0
 6818              		strb	r3, [r4, #11]
 6819 00c4 9FB2     		.loc 1 911 0
 6820 00c6 4745     		movs	r3, #13
 6821 00c8 71D0     		mul	r3, r1, r3
 6822              		.loc 1 906 0
 6823              		strb	r9, [r4, #13]
 6824              		.loc 1 908 0
 6825 00ca 3046     		strb	r0, [r4, #12]
 6826 00cc 0121     		.loc 1 909 0
 6827 00ce FFF7FEFF 		strb	r0, [r4, #26]
 6828              		strb	r0, [r4, #27]
 6829              		.loc 1 911 0
 6830 00d2 0546     		sub	lr, r3, #13
 6831 00d4 0028     	.LVL845:
 6832 00d6 E4D0     	.L1039:
 6833 00d8 67E0     		.loc 1 914 0
 6834              		movw	ip, #65535
 6835              		.loc 1 915 0
 6836 00da 3046     		ldr	r3, .L1052
 6837 00dc 2146     		.loc 1 914 0
 6838 00de FFF7FEFF 		cmp	r5, ip
 6839              	.LVL846:
 6840 00e2 0546     		it	ne
 6841 00e4 0028     		ldrhne	r5, [r8, lr, lsl #1]
 6842 00e6 60D1     		.loc 1 915 0
 6843              		ldrb	r3, [r0, r3]	@ zero_extendqisi2
 6844 00e8 B069     	.LVL847:
 6845 00ea FFF7FEFF 		.loc 1 914 0
 6846              		it	ne
 6847 00ee 08F1FF33 		addne	lr, lr, #1
 6848              		.loc 1 917 0
 6849 00f2 8146     		adds	r0, r0, #1
 6850              	.LVL848:
 6851              		.loc 1 915 0
 6852 00f4 9FB2     		adds	r2, r4, r3
 6853              		strb	r5, [r4, r3]
 6854              		lsrs	r3, r5, #8
 6855              		.loc 1 916 0
 6856 00f6 3068     		cmp	r5, #0
 6857 00f8 3169     		it	eq
 6858 00fa FFF7FEFF 		moveq	r5, ip
 6859              		.loc 1 917 0
 6860 00fe 0546     		cmp	r0, #13
 6861 0100 0028     		.loc 1 915 0
 6862 0102 52D1     		strb	r3, [r2, #1]
 6863              		.loc 1 917 0
 6864 0104 7469     		bne	.L1039
 6865              		.loc 1 918 0
 6866              		cmp	r5, ip
 6867              		beq	.L1045
 6868              		ldrh	r3, [r8, lr, lsl #1]
 6869 0106 0F23     		cbnz	r3, .L1047
 6870              	.L1045:
 6871              		orr	r1, r1, #64
 6872              	.L1047:
 6873 0108 D6F81C80 		.loc 1 919 0
 6874 010c F9B2     		strb	r1, [r4, #0]
 6875              	.LBE38:
 6876              	.LBE39:
 6877              		.loc 1 1179 0
 6878              		ldr	r2, [r6, #0]
 6879 010e E372     		movs	r3, #1
 6880              		strb	r3, [r2, #4]
 6881 0110 0D23     		.loc 1 1180 0
 6882 0112 01FB03F3 		mov	r0, r6
 6883              	.LVL849:
 6884 0116 84F80D90 		movs	r1, #0
 6885              	.LVL850:
 6886 011a 2073     		bl	dir_next
 6887              	.LVL851:
 6888 011c A076     		.loc 1 1181 0
 6889 011e E076     		mov	r5, r0
 6890              	.LVL852:
 6891 0120 A3F10D0E 		cbnz	r0, .L1026
 6892              		subs	r3, r7, #1
 6893              		uxth	r7, r3
 6894              		cmp	r7, #0
 6895 0124 4FF6FF7C 		bne	.L1037
 6896              	.LVL853:
 6897 0128 244B     	.L1049:
 6898              		.loc 1 1199 0
 6899 012a 6545     		ldr	r0, [r6, #0]
 6900              		ldr	r1, [r6, #16]
 6901 012c 18BF     		bl	move_window
 6902 012e 38F81E50 		.loc 1 1200 0
 6903              		mov	r5, r0
 6904 0132 C35C     		cbnz	r0, .L1026
 6905              		.loc 1 1201 0
 6906              		ldr	r4, [r6, #20]
 6907 0134 18BF     	.LVL854:
 6908 0136 0EF1010E 		.loc 1 1202 0
 6909              		mov	r1, r5
 6910 013a 0130     		mov	r0, r4
 6911              		movs	r2, #32
 6912              		bl	mem_set
 6913 013c E218     		.loc 1 1203 0
 6914 013e E554     		movs	r2, #11
 6915 0140 2B0A     		mov	r0, r4
 6916              		ldr	r1, [r6, #24]
 6917 0142 002D     		bl	mem_cpy
 6918 0144 08BF     		.loc 1 1205 0
 6919 0146 6546     		ldr	r3, [r6, #24]
 6920              		ldrb	r3, [r3, #11]	@ zero_extendqisi2
 6921 0148 0D28     		and	r3, r3, #24
 6922              		strb	r3, [r4, #12]
 6923 014a 5370     		.loc 1 1207 0
 6924              		ldr	r2, [r6, #0]
 6925 014c EAD1     		movs	r3, #1
 6926              		strb	r3, [r2, #4]
 6927 014e 6545     	.LVL855:
 6928 0150 02D0     	.L1026:
 6929 0152 38F81E30 		.loc 1 1211 0
 6930 0156 0BB9     		mov	r0, r5
 6931              		b	.L1009
 6932 0158 41F04001 	.LVL856:
 6933              	.L1034:
 6934              		.loc 1 1170 0
 6935 015c 2170     		cmp	r8, #1
 6936              		bne	.L1035
 6937              		b	.L1049
 6938              	.LVL857:
 6939 015e 3268     	.L1009:
 6940 0160 0123     	.LVL858:
 6941 0162 1371     		.loc 1 1212 0
 6942              		add	sp, sp, #20
 6943 0164 3046     		pop	{r4, r5, r6, r7, r8, r9, pc}
 6944              	.L1053:
 6945 0166 0021     		.align	2
 6946              	.L1052:
 6947 0168 FFF7FEFF 		.word	.LANCHOR5
 6948              	.LFE22:
 6950 016c 0546     		.section	.text.f_rename,"ax",%progbits
 6951              		.align	2
 6952 016e E0B9     		.global	f_rename
 6953 0170 7B1E     		.thumb
 6954 0172 9FB2     		.thumb_func
 6956 0176 BED1     	f_rename:
 6957              	.LFB48:
 6958              		.loc 1 2994 0
 6959              		@ args = 0, pretend = 0, frame = 120
 6960 0178 3068     		@ frame_needed = 0, uses_anonymous_args = 0
 6961 017a 3169     	.LVL859:
 6962 017c FFF7FEFF 		push	{r4, r5, r6, r7, lr}
 6963              	.LCFI50:
 6964 0180 0546     		sub	sp, sp, #124
 6965 0182 90B9     	.LCFI51:
 6966              		.loc 1 3002 0
 6967 0184 7469     		add	r5, sp, #48
 6968              		.loc 1 2994 0
 6969              		str	r0, [sp, #4]
 6970 0186 2946     		mov	r7, r1
 6971 0188 2046     		.loc 1 3002 0
 6972 018a 2022     		add	r0, sp, #4
 6973 018c FFF7FEFF 	.LVL860:
 6974              		mov	r1, r5
 6975 0190 0B22     	.LVL861:
 6976 0192 2046     		movs	r2, #1
 6977 0194 B169     		bl	chk_mounted
 6978 0196 FFF7FEFF 		.loc 1 3003 0
 6979              		mov	r1, r0
 6980 019a B369     	.LVL862:
 6981 019c DB7A     		cmp	r0, #0
 6982 019e 03F01803 		bne	.L1055
 6983 01a2 2373     		.loc 1 3004 0
 6984              		ldr	r3, [sp, #48]
 6985 01a4 3268     		.loc 1 3006 0
 6986 01a6 0123     		ldr	r1, [sp, #4]
 6987 01a8 1371     	.LVL863:
 6988              		.loc 1 3004 0
 6989              		str	r3, [sp, #12]
 6990              		.loc 1 3005 0
 6991 01aa 2846     		add	r3, sp, #108
 6992 01ac 03E0     		str	r3, [sp, #72]
 6993              		ldr	r3, .L1079
 6994              		.loc 1 3006 0
 6995              		mov	r0, r5
 6996 01ae B8F1010F 		.loc 1 3005 0
 6997 01b2 92D1     		str	r3, [sp, #76]
 6998 01b4 E0E7     		.loc 1 3006 0
 6999              		bl	follow_path
 7000              		.loc 1 3007 0
 7001              		mov	r1, r0
 7002              	.LVL864:
 7003 01b6 05B0     		cmp	r0, #0
 7004 01b8 BDE8F083 		bne	.L1055
 7005              		ldr	r3, [sp, #72]
 7006              		ldrb	r3, [r3, #11]	@ zero_extendqisi2
 7007              		tst	r3, #32
 7008 01bc 00000000 		beq	.L1058
 7009              		movs	r1, #6
 7010              		b	.L1055
 7011              	.L1058:
 7012              		.loc 1 3013 0
 7013              		ldr	r1, [sp, #68]
 7014              	.LVL865:
 7015              		cbnz	r1, .L1060
 7016              		adds	r1, r1, #4
 7017              	.LVL866:
 7018              		b	.L1055
 7019              	.LVL867:
 7020              	.L1060:
 7021              		.loc 1 3016 0
 7022              		add	r6, sp, #87
 7023 0000 F0B5     		mov	r0, r6
 7024              		adds	r1, r1, #11
 7025 0002 9FB0     		movs	r2, #21
 7026              		.loc 1 3017 0
 7027              		add	r4, sp, #12
 7028 0004 0CAD     		.loc 1 3016 0
 7029              		bl	mem_cpy
 7030 0006 0190     		.loc 1 3017 0
 7031 0008 0F46     		mov	r0, r4
 7032              		mov	r1, r5
 7033 000a 01A8     		movs	r2, #36
 7034              		bl	mem_cpy
 7035 000c 2946     		.loc 1 3018 0
 7036              		mov	r1, r7
 7037 000e 0122     		mov	r0, r4
 7038 0010 FFF7FEFF 		bl	follow_path
 7039              		.loc 1 3019 0
 7040 0014 0146     		mov	r1, r0
 7041              	.LVL868:
 7042 0016 0028     		cbnz	r0, .L1062
 7043 0018 40F08580 		movs	r1, #8
 7044              		b	.L1055
 7045 001c 0C9B     	.L1062:
 7046              		.loc 1 3020 0
 7047 001e 0199     		cmp	r0, #4
 7048              		bne	.L1055
 7049              	.LVL869:
 7050 0020 0393     		.loc 1 3022 0
 7051              		mov	r0, r4
 7052 0022 1BAB     	.LVL870:
 7053 0024 1293     		bl	dir_register
 7054 0026 414B     	.LVL871:
 7055              		.loc 1 3023 0
 7056 0028 2846     		mov	r1, r0
 7057              	.LVL872:
 7058 002a 1393     		cmp	r0, #0
 7059              		bne	.L1055
 7060 002c FFF7FEFF 		.loc 1 3024 0
 7061              		ldr	r4, [sp, #32]
 7062 0030 0146     	.LVL873:
 7063              		.loc 1 3025 0
 7064 0032 0028     		movs	r2, #19
 7065 0034 77D1     		adds	r1, r6, #2
 7066 0036 129B     	.LVL874:
 7067 0038 DB7A     		add	r0, r4, #13
 7068 003a 13F0200F 		bl	mem_cpy
 7069 003e 01D0     		.loc 1 3026 0
 7070 0040 0621     		ldrb	r3, [sp, #87]	@ zero_extendqisi2
 7071 0042 70E0     		.loc 1 3027 0
 7072              		movs	r2, #1
 7073              		.loc 1 3026 0
 7074 0044 1199     		orr	r3, r3, #32
 7075              		strb	r3, [r4, #11]
 7076 0046 09B9     		.loc 1 3027 0
 7077 0048 0431     		ldr	r3, [sp, #48]
 7078              		strb	r2, [r3, #4]
 7079 004a 6CE0     		.loc 1 3028 0
 7080              		ldr	r2, [sp, #56]
 7081              		ldr	r3, [sp, #20]
 7082              		cmp	r2, r3
 7083 004c 0DF15706 		beq	.L1066
 7084 0050 3046     		ldrb	r3, [r4, #11]	@ zero_extendqisi2
 7085 0052 0B31     		tst	r3, #16
 7086 0054 1522     		beq	.L1066
 7087              		.loc 1 3029 0
 7088 0056 03AC     		ldrb	r2, [r4, #27]	@ zero_extendqisi2
 7089              		ldrb	r3, [r4, #26]	@ zero_extendqisi2
 7090 0058 FFF7FEFF 		ldrb	r1, [r4, #20]	@ zero_extendqisi2
 7091              		orr	r3, r3, r2, lsl #8
 7092 005c 2046     		ldrb	r2, [r4, #21]	@ zero_extendqisi2
 7093 005e 2946     		ldr	r5, [sp, #12]
 7094 0060 2422     		orr	r1, r1, r2, lsl #8
 7095 0062 FFF7FEFF 		orr	r1, r3, r1
 7096              		mov	r0, r5
 7097 0066 3946     		bl	clust2sect
 7098 0068 2046     		.loc 1 3030 0
 7099 006a FFF7FEFF 		mov	r1, r0
 7100              	.LVL875:
 7101 006e 0146     		cbnz	r0, .L1069
 7102              		movs	r1, #2
 7103 0070 08B9     	.LVL876:
 7104 0072 0821     		b	.L1055
 7105 0074 57E0     	.LVL877:
 7106              	.L1069:
 7107              		.loc 1 3033 0
 7108 0076 0428     		mov	r0, r5
 7109 0078 55D1     		bl	move_window
 7110              	.LVL878:
 7111              		.loc 1 3034 0
 7112 007a 2046     		ldr	r2, [sp, #12]
 7113              		.loc 1 3035 0
 7114 007c FFF7FEFF 		mov	r1, r0
 7115              	.LVL879:
 7116              		cbnz	r0, .L1055
 7117 0080 0146     		.loc 1 3034 0
 7118              		add	r4, r2, #84
 7119 0082 0028     	.LVL880:
 7120 0084 4FD1     		.loc 1 3035 0
 7121              		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 7122 0086 089C     		cmp	r3, #46
 7123              		bne	.L1066
 7124              		.loc 1 3036 0
 7125 0088 1322     		ldrb	r3, [r2, #0]	@ zero_extendqisi2
 7126 008a B11C     		cmp	r3, #3
 7127              		bne	.L1073
 7128 008c 04F10D00 		ldr	r2, [r2, #40]
 7129 0090 FFF7FEFF 		ldr	r3, [sp, #20]
 7130              		cmp	r3, r2
 7131 0094 9DF85730 		beq	.L1076
 7132              	.L1073:
 7133 0098 0122     		ldr	r0, [sp, #20]
 7134              	.LVL881:
 7135 009a 43F02003 	.L1076:
 7136 009e E372     		.loc 1 3037 0
 7137              		ubfx	r3, r0, #8, #8
 7138 00a0 0C9B     		strb	r3, [r4, #27]
 7139 00a2 1A71     		.loc 1 3038 0
 7140              		lsrs	r3, r0, #16
 7141 00a4 0E9A     		strb	r3, [r4, #20]
 7142 00a6 059B     		lsrs	r3, r3, #8
 7143 00a8 9A42     		.loc 1 3037 0
 7144 00aa 33D0     		strb	r0, [r4, #26]
 7145 00ac E37A     		.loc 1 3038 0
 7146 00ae 13F0100F 		strb	r3, [r4, #21]
 7147 00b2 2FD0     		.loc 1 3039 0
 7148              		ldr	r3, [sp, #12]
 7149 00b4 E27E     		movs	r2, #1
 7150 00b6 A37E     		strb	r2, [r3, #4]
 7151 00b8 217D     	.L1066:
 7152 00ba 43EA0223 		.loc 1 3044 0
 7153 00be 627D     		add	r0, sp, #48
 7154 00c0 039D     	.LVL882:
 7155 00c2 41EA0221 		bl	dir_remove
 7156 00c6 43EA0101 	.LVL883:
 7157 00ca 2846     		.loc 1 3045 0
 7158 00cc FFF7FEFF 		mov	r1, r0
 7159              	.LVL884:
 7160 00d0 0146     		cbnz	r0, .L1055
 7161              		.loc 1 3046 0
 7162 00d2 08B9     		ldr	r0, [sp, #48]
 7163 00d4 0221     		bl	sync
 7164              	.LVL885:
 7165 00d6 26E0     		mov	r1, r0
 7166              	.LVL886:
 7167              	.L1055:
 7168              		.loc 1 3056 0
 7169 00d8 2846     		mov	r0, r1
 7170 00da FFF7FEFF 		add	sp, sp, #124
 7171              		pop	{r4, r5, r6, r7, pc}
 7172              	.L1080:
 7173 00de 039A     		.align	2
 7174              	.L1079:
 7175 00e0 0146     		.word	.LANCHOR6
 7176              	.LFE48:
 7178              		.section	.text.f_mkdir,"ax",%progbits
 7179 00e4 02F15404 		.align	2
 7180              		.global	f_mkdir
 7181              		.thumb
 7182 00e8 6378     		.thumb_func
 7184 00ec 12D1     	f_mkdir:
 7185              	.LFB45:
 7186 00ee 1378     		.loc 1 2834 0
 7187 00f0 032B     		@ args = 0, pretend = 0, frame = 72
 7188 00f2 03D1     		@ frame_needed = 0, uses_anonymous_args = 0
 7189 00f4 926A     	.LVL887:
 7190 00f6 059B     		push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 7191 00f8 9342     	.LCFI52:
 7192 00fa 00D0     		sub	sp, sp, #76
 7193              	.LCFI53:
 7194 00fc 0598     		.loc 1 2834 0
 7195              		str	r0, [sp, #20]
 7196              		.loc 1 2838 0
 7197              		bl	get_fattime
 7198 00fe C0F30723 	.LVL888:
 7199 0102 E376     		.loc 1 2842 0
 7200              		add	r5, sp, #24
 7201 0104 030C     		.loc 1 2838 0
 7202 0106 2375     		mov	r7, r0
 7203 0108 1B0A     	.LVL889:
 7204              		.loc 1 2842 0
 7205 010a A076     		mov	r1, r5
 7206              		add	r0, sp, #20
 7207 010c 6375     		movs	r2, #1
 7208              		bl	chk_mounted
 7209 010e 039B     		.loc 1 2843 0
 7210 0110 0122     		mov	r4, r0
 7211 0112 1A71     	.LVL890:
 7212              		cmp	r0, #0
 7213              		bne	.L1082
 7214 0114 0CA8     		.loc 1 2844 0
 7215              		add	r3, sp, #60
 7216 0116 FFF7FEFF 		str	r3, [sp, #48]
 7217              		ldr	r3, .L1106
 7218              		.loc 1 2845 0
 7219 011a 0146     		mov	r0, r5
 7220              		ldr	r1, [sp, #20]
 7221 011c 18B9     		.loc 1 2844 0
 7222              		str	r3, [sp, #52]
 7223 011e 0C98     		.loc 1 2845 0
 7224 0120 FFF7FEFF 		bl	follow_path
 7225              		.loc 1 2846 0
 7226 0124 0146     		mov	r4, r0
 7227              		cbz	r0, .L1084
 7228              		.loc 1 2847 0
 7229              		cmp	r0, #4
 7230 0126 0846     		bne	.L1082
 7231 0128 1FB0     	.LVL891:
 7232 012a F0BD     		ldr	r3, [sp, #48]
 7233              		ldrb	r3, [r3, #11]	@ zero_extendqisi2
 7234              		ands	r4, r3, #32
 7235              		beq	.L1087
 7236 012c 00000000 		movs	r4, #6
 7237              	.LVL892:
 7238              		b	.L1082
 7239              	.L1084:
 7240              		movs	r4, #8
 7241              		b	.L1082
 7242              	.LVL893:
 7243              	.L1087:
 7244              		.loc 1 2850 0
 7245              		ldr	r0, [sp, #24]
 7246              	.LVL894:
 7247              		mov	r1, r4
 7248              		bl	create_chain
 7249              		.loc 1 2852 0
 7250              		mov	r6, r0
 7251 0000 2DE9F04F 	.LVL895:
 7252              		cbnz	r0, .L1089
 7253 0004 93B0     		movs	r4, #7
 7254              	.LVL896:
 7255              		b	.L1091
 7256 0006 0590     	.LVL897:
 7257              	.L1089:
 7258 0008 FFF7FEFF 		.loc 1 2853 0
 7259              		cmp	r0, #1
 7260              		bne	.L1092
 7261 000c 06AD     	.LVL898:
 7262              		movs	r4, #2
 7263 000e 0746     	.LVL899:
 7264              		b	.L1091
 7265              	.LVL900:
 7266 0010 2946     	.L1092:
 7267 0012 05A8     		.loc 1 2854 0
 7268 0014 0122     		cmp	r0, #-1
 7269 0016 FFF7FEFF 		beq	.L1094
 7270              		.loc 1 2856 0
 7271 001a 0446     		mov	r1, r4
 7272              		ldr	r0, [sp, #24]
 7273 001c 0028     	.LVL901:
 7274 001e 40F0C880 		bl	move_window
 7275              		.loc 1 2857 0
 7276 0022 0FAB     		mov	r4, r0
 7277 0024 0C93     	.LVL902:
 7278 0026 654B     		cmp	r0, #0
 7279              		bne	.L1091
 7280 0028 2846     		.loc 1 2858 0
 7281 002a 0599     		ldr	r5, [sp, #24]
 7282              		mov	r1, r6
 7283 002c 0D93     		mov	r0, r5
 7284              		bl	clust2sect
 7285 002e FFF7FEFF 		.loc 1 2859 0
 7286              		add	r8, r5, #52
 7287 0032 0446     	.LVL903:
 7288 0034 48B1     		.loc 1 2860 0
 7289              		mov	r1, r4
 7290 0036 0428     		mov	r2, #512
 7291 0038 40F0BB80 		.loc 1 2858 0
 7292              		mov	r9, r0
 7293 003c 0C9B     	.LVL904:
 7294 003e DB7A     		.loc 1 2860 0
 7295 0040 13F02004 		mov	r0, r8
 7296 0044 03D0     		bl	mem_set
 7297 0046 0624     		.loc 1 2861 0
 7298              		movs	r1, #32
 7299 0048 B3E0     		movs	r2, #11
 7300              		mov	r0, r8
 7301 004a 0824     		bl	mem_set
 7302 004c B1E0     		.loc 1 2863 0
 7303              		movs	r3, #16
 7304              		strb	r3, [r5, #63]
 7305              		.loc 1 2864 0
 7306 004e 0698     		uxtb	r2, r7
 7307              		ubfx	r3, r7, #8, #8
 7308 0050 2146     		.loc 1 2862 0
 7309 0052 FFF7FEFF 		movs	r4, #46
 7310              	.LVL905:
 7311 0056 0646     		strb	r4, [r5, #52]
 7312              		.loc 1 2864 0
 7313 0058 08B9     		str	r2, [sp, #0]
 7314 005a 0724     		strb	r2, [r5, #74]
 7315              		str	r3, [sp, #4]
 7316 005c 81E0     		ubfx	r2, r7, #16, #8
 7317              		strb	r3, [r5, #75]
 7318              		lsrs	r7, r7, #24
 7319              	.LVL906:
 7320 005e 0128     		.loc 1 2865 0
 7321 0060 01D1     		uxtb	r3, r6
 7322              		.loc 1 2864 0
 7323 0062 0224     		str	r2, [sp, #8]
 7324              		strb	r2, [r5, #76]
 7325 0064 7DE0     		str	r7, [sp, #12]
 7326              		strb	r7, [r5, #77]
 7327              		.loc 1 2865 0
 7328              		str	r3, [sp, #16]
 7329 0066 B0F1FF3F 		strb	r3, [r5, #78]
 7330 006a 00F09980 		.loc 1 2866 0
 7331              		lsrs	r3, r6, #16
 7332 006e 2146     		lsrs	r7, r3, #8
 7333 0070 0698     		uxtb	sl, r3
 7334              		.loc 1 2865 0
 7335 0072 FFF7FEFF 		ubfx	fp, r6, #8, #8
 7336              		.loc 1 2867 0
 7337 0076 0446     		movs	r2, #32
 7338              		mov	r1, r8
 7339 0078 0028     		.loc 1 2865 0
 7340 007a 72D1     		strb	fp, [r5, #79]
 7341              		.loc 1 2866 0
 7342 007c 069D     		strb	sl, [r5, #72]
 7343 007e 3146     		strb	r7, [r5, #73]
 7344 0080 2846     		.loc 1 2867 0
 7345 0082 FFF7FEFF 		add	r0, r5, #84
 7346              		bl	mem_cpy
 7347 0086 05F13408 		.loc 1 2868 0
 7348              		strb	r4, [r5, #85]
 7349              		.loc 1 2869 0
 7350 008a 2146     		ldr	r1, [sp, #24]
 7351 008c 4FF40072 		.loc 1 2868 0
 7352              		ldr	r2, [sp, #32]
 7353 0090 8146     	.LVL907:
 7354              		.loc 1 2869 0
 7355              		ldrb	r3, [r1, #0]	@ zero_extendqisi2
 7356 0092 4046     		cmp	r3, #3
 7357 0094 FFF7FEFF 		bne	.L1097
 7358              		ldr	r3, [r1, #40]
 7359 0098 2021     		cmp	r2, r3
 7360 009a 0B22     		it	eq
 7361 009c 4046     		moveq	r2, #0
 7362 009e FFF7FEFF 	.L1097:
 7363              		.loc 1 2871 0
 7364 00a2 1023     		ubfx	r3, r2, #8, #8
 7365 00a4 85F83F30 		strb	r3, [r5, #111]
 7366              		.loc 1 2872 0
 7367 00a8 FAB2     		lsrs	r3, r2, #16
 7368 00aa C7F30723 		strb	r3, [r5, #104]
 7369              		lsrs	r3, r3, #8
 7370 00ae 2E24     		.loc 1 2871 0
 7371              		strb	r2, [r5, #110]
 7372 00b0 85F83440 		.loc 1 2872 0
 7373              		strb	r3, [r5, #105]
 7374 00b4 0092     		.loc 1 2873 0
 7375 00b6 85F84A20 		ldr	r3, [sp, #24]
 7376 00ba 0193     		ldrb	r5, [r3, #2]	@ zero_extendqisi2
 7377 00bc C7F30742 	.LVL908:
 7378 00c0 85F84B30 		b	.L1100
 7379 00c4 3F0E     	.LVL909:
 7380              	.L1101:
 7381              		.loc 1 2874 0
 7382 00c6 F3B2     		ldr	r2, [sp, #24]
 7383              	.LVL910:
 7384 00c8 0292     		.loc 1 2875 0
 7385 00ca 85F84C20 		movs	r3, #1
 7386 00ce 0397     		strb	r3, [r2, #4]
 7387 00d0 85F84D70 		.loc 1 2874 0
 7388              		str	r9, [r2, #48]
 7389 00d4 0493     		.loc 1 2876 0
 7390 00d6 85F84E30 		ldr	r0, [sp, #24]
 7391              		movs	r1, #0
 7392 00da 330C     		bl	move_window
 7393 00dc 1F0A     		.loc 1 2877 0
 7394 00de 5FFA83FA 		mov	r4, r0
 7395              		cbnz	r0, .L1091
 7396 00e2 C6F3072B 		.loc 1 2878 0
 7397              		mov	r0, r8
 7398 00e6 2022     		mov	r1, r4
 7399 00e8 4146     		mov	r2, #512
 7400              		bl	mem_set
 7401 00ea 85F84FB0 		.loc 1 2873 0
 7402              		subs	r3, r5, #1
 7403 00ee 85F848A0 		.loc 1 2874 0
 7404 00f2 85F84970 		add	r9, r9, #1
 7405              		.loc 1 2873 0
 7406 00f6 05F15400 		uxtb	r5, r3
 7407 00fa FFF7FEFF 	.LVL911:
 7408              	.L1100:
 7409 00fe 85F85540 		cmp	r5, #0
 7410              		bne	.L1101
 7411 0102 0699     		b	.L1103
 7412              	.LVL912:
 7413 0104 089A     	.L1091:
 7414              		.loc 1 2883 0
 7415              		ldr	r0, [sp, #24]
 7416 0106 0B78     		mov	r1, r6
 7417 0108 032B     		bl	remove_chain
 7418 010a 03D1     		b	.L1082
 7419 010c 8B6A     	.LVL913:
 7420 010e 9A42     	.L1104:
 7421 0110 08BF     		.loc 1 2885 0
 7422 0112 0022     		ldr	r3, [sp, #44]
 7423              	.LVL914:
 7424              		.loc 1 2886 0
 7425 0114 C2F30723 		movs	r2, #16
 7426 0118 85F86F30 		strb	r2, [r3, #11]
 7427              		.loc 1 2887 0
 7428 011c 130C     		ldr	r2, [sp, #0]
 7429 011e 85F86830 		strb	r2, [r3, #22]
 7430 0122 1B0A     		ldr	r2, [sp, #4]
 7431              		strb	r2, [r3, #23]
 7432 0124 85F86E20 		ldr	r2, [sp, #8]
 7433              		strb	r2, [r3, #24]
 7434 0128 85F86930 		ldr	r2, [sp, #12]
 7435              		strb	r2, [r3, #25]
 7436 012c 069B     		.loc 1 2888 0
 7437 012e 9D78     		ldr	r2, [sp, #16]
 7438              		strb	fp, [r3, #27]
 7439 0130 14E0     		strb	r2, [r3, #26]
 7440              		.loc 1 2889 0
 7441              		strb	sl, [r3, #20]
 7442              		strb	r7, [r3, #21]
 7443 0132 069A     		.loc 1 2890 0
 7444              		ldr	r3, [sp, #24]
 7445              	.LVL915:
 7446 0134 0123     		movs	r2, #1
 7447 0136 1371     		strb	r2, [r3, #4]
 7448              		.loc 1 2891 0
 7449 0138 C2F83090 		ldr	r0, [sp, #24]
 7450              		bl	sync
 7451 013c 0698     		mov	r4, r0
 7452 013e 0021     		b	.L1082
 7453 0140 FFF7FEFF 	.LVL916:
 7454              	.L1094:
 7455 0144 0446     		movs	r4, #1
 7456 0146 60B9     	.LVL917:
 7457              		b	.L1091
 7458 0148 4046     	.LVL918:
 7459 014a 2146     	.L1103:
 7460 014c 4FF40072 		.loc 1 2881 0
 7461 0150 FFF7FEFF 		add	r0, sp, #24
 7462              		bl	dir_register
 7463 0154 6B1E     	.LVL919:
 7464              		.loc 1 2882 0
 7465 0156 09F10109 		mov	r4, r0
 7466              		cmp	r0, #0
 7467 015a DDB2     		bne	.L1091
 7468              		b	.L1104
 7469              	.LVL920:
 7470 015c 002D     	.L1082:
 7471 015e E8D1     		.loc 1 2898 0
 7472 0160 20E0     		mov	r0, r4
 7473              		add	sp, sp, #76
 7474              		pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 7475              	.L1107:
 7476 0162 0698     		.align	2
 7477 0164 3146     	.L1106:
 7478 0166 FFF7FEFF 		.word	.LANCHOR6
 7479 016a 22E0     	.LFE45:
 7481              		.section	.text.f_open,"ax",%progbits
 7482              		.align	2
 7483 016c 0B9B     		.global	f_open
 7484              		.thumb
 7485              		.thumb_func
 7487 0170 DA72     	f_open:
 7488              	.LFB31:
 7489 0172 009A     		.loc 1 1891 0
 7490 0174 9A75     		@ args = 0, pretend = 0, frame = 56
 7491 0176 019A     		@ frame_needed = 0, uses_anonymous_args = 0
 7492 0178 DA75     	.LVL921:
 7493 017a 029A     		push	{r4, r5, r6, r7, r8, lr}
 7494 017c 1A76     	.LCFI54:
 7495 017e 039A     		sub	sp, sp, #56
 7496 0180 5A76     	.LCFI55:
 7497              		.loc 1 1898 0
 7498 0182 049A     		movs	r3, #0
 7499 0184 83F81BB0 		.loc 1 1902 0
 7500 0188 9A76     		add	r8, sp, #8
 7501              		.loc 1 1898 0
 7502 018a 83F814A0 		str	r3, [r0, #0]
 7503 018e 5F75     		.loc 1 1891 0
 7504              		str	r1, [sp, #4]
 7505 0190 069B     		mov	r6, r0
 7506              		mov	r5, r2
 7507 0192 0122     		.loc 1 1901 0
 7508 0194 1A71     		and	r7, r2, #31
 7509              	.LVL922:
 7510 0196 0698     		.loc 1 1902 0
 7511 0198 FFF7FEFF 		add	r0, sp, #4
 7512 019c 0446     	.LVL923:
 7513 019e 08E0     		mov	r1, r8
 7514              	.LVL924:
 7515              		and	r2, r2, #30
 7516 01a0 0124     		bl	chk_mounted
 7517              		.loc 1 1907 0
 7518 01a2 DEE7     		add	r3, sp, #44
 7519              		str	r3, [sp, #32]
 7520              		ldr	r3, .L1138
 7521              		str	r3, [sp, #36]
 7522 01a4 06A8     		.loc 1 1908 0
 7523 01a6 FFF7FEFF 		mov	r3, r0
 7524              	.LVL925:
 7525              		cbnz	r0, .L1109
 7526 01aa 0446     		.loc 1 1909 0
 7527 01ac 0028     		mov	r0, r8
 7528 01ae D8D1     		ldr	r1, [sp, #4]
 7529 01b0 DCE7     		bl	follow_path
 7530              	.LVL926:
 7531              		mov	r3, r0
 7532              	.LVL927:
 7533 01b2 2046     	.L1109:
 7534 01b4 13B0     		.loc 1 1910 0
 7535 01b6 BDE8F08F 		ldr	r4, [sp, #28]
 7536              	.LVL928:
 7537 01ba C046     		.loc 1 1913 0
 7538              		cbnz	r3, .L1111
 7539 01bc 00000000 		.loc 1 1914 0
 7540              		cmp	r4, #0
 7541              		ite	eq
 7542              		moveq	r3, #6
 7543              		movne	r3, #0
 7544              	.L1111:
 7545              		.loc 1 1922 0
 7546              		tst	r5, #28
 7547              		beq	.L1114
 7548              	.LVL929:
 7549              	.LBB40:
 7550              		.loc 1 1925 0
 7551              		cbz	r3, .L1116
 7552              		.loc 1 1926 0
 7553              		cmp	r3, #4
 7554 0000 2DE9F041 		bne	.L1118
 7555              		.loc 1 1930 0
 7556 0004 8EB0     		mov	r0, r8
 7557              		bl	dir_register
 7558              	.LVL930:
 7559 0006 0023     		mov	r3, r0
 7560              	.LVL931:
 7561 0008 0DF10808 	.L1118:
 7562              		.loc 1 1933 0
 7563 000c 0360     		ldr	r4, [sp, #28]
 7564              		.loc 1 1943 0
 7565 000e 0191     		cmp	r3, #0
 7566 0010 0646     		bne	.L1120
 7567 0012 1546     		.loc 1 1932 0
 7568              		orr	r7, r7, #8
 7569 0014 02F01F07 	.LVL932:
 7570              		b	.L1122
 7571              	.LVL933:
 7572 0018 01A8     	.L1116:
 7573              		.loc 1 1936 0
 7574 001a 4146     		tst	r5, #4
 7575              		beq	.L1123
 7576 001c 02F01E02 		movs	r3, #8
 7577 0020 FFF7FEFF 		b	.L1120
 7578              	.L1123:
 7579 0024 0BAB     		.loc 1 1939 0
 7580 0026 0893     		ldrb	r3, [r4, #11]	@ zero_extendqisi2
 7581 0028 4C4B     	.LVL934:
 7582 002a 0993     		tst	r3, #17
 7583              		bne	.L1134
 7584 002c 0346     	.LVL935:
 7585              	.L1122:
 7586 002e 20B9     		.loc 1 1943 0
 7587              		tst	r7, #8
 7588 0030 4046     		beq	.L1126
 7589 0032 0199     		.loc 1 1944 0
 7590 0034 FFF7FEFF 		bl	get_fattime
 7591              	.LVL936:
 7592 0038 0346     		.loc 1 1945 0
 7593              		ubfx	r3, r0, #8, #8
 7594              	.LVL937:
 7595              		strb	r0, [r4, #14]
 7596 003a 079C     		strb	r3, [r4, #15]
 7597              		lsrs	r3, r0, #16
 7598              		lsrs	r0, r0, #24
 7599 003c 1BB9     	.LVL938:
 7600              		.loc 1 1948 0
 7601 003e 002C     		ldrb	r2, [r4, #21]	@ zero_extendqisi2
 7602 0040 0CBF     		.loc 1 1945 0
 7603 0042 0623     		strb	r0, [r4, #17]
 7604 0044 0023     		.loc 1 1948 0
 7605              		ldrb	r0, [r4, #20]	@ zero_extendqisi2
 7606              		ldrb	r1, [r4, #27]	@ zero_extendqisi2
 7607 0046 15F01C0F 		.loc 1 1945 0
 7608 004a 4CD0     		strb	r3, [r4, #16]
 7609              		.loc 1 1948 0
 7610              		orr	r0, r0, r2, lsl #8
 7611              		.loc 1 1946 0
 7612 004c 5BB1     		movs	r3, #0
 7613              		.loc 1 1948 0
 7614 004e 042B     		ldrb	r2, [r4, #26]	@ zero_extendqisi2
 7615 0050 03D1     		.loc 1 1946 0
 7616              		strb	r3, [r4, #11]
 7617 0052 4046     		.loc 1 1947 0
 7618 0054 FFF7FEFF 		strb	r3, [r4, #28]
 7619              		strb	r3, [r4, #29]
 7620 0058 0346     		strb	r3, [r4, #30]
 7621              		strb	r3, [r4, #31]
 7622              		.loc 1 1949 0
 7623              		strb	r3, [r4, #20]
 7624 005a 079C     		strb	r3, [r4, #21]
 7625              		.loc 1 1950 0
 7626 005c 002B     		strb	r3, [r4, #26]
 7627 005e 78D1     		strb	r3, [r4, #27]
 7628              		.loc 1 1948 0
 7629 0060 47F00807 		orr	r2, r2, r1, lsl #8
 7630              		.loc 1 1951 0
 7631 0064 08E0     		ldr	r3, [sp, #8]
 7632              		movs	r1, #1
 7633              		.loc 1 1952 0
 7634              		orrs	r5, r2, r0, lsl #16
 7635 0066 15F0040F 	.LVL939:
 7636 006a 01D0     		.loc 1 1951 0
 7637 006c 0823     		strb	r1, [r3, #4]
 7638 006e 70E0     		.loc 1 1952 0
 7639              		beq	.L1126
 7640              		.loc 1 1953 0
 7641 0070 E37A     		ldr	r0, [sp, #8]
 7642              		.loc 1 1954 0
 7643 0072 13F0110F 		mov	r1, r5
 7644 0076 6BD1     		.loc 1 1953 0
 7645              		ldr	r8, [r0, #48]
 7646              	.LVL940:
 7647              		.loc 1 1954 0
 7648 0078 17F0080F 		bl	remove_chain
 7649 007c 41D0     		.loc 1 1955 0
 7650              		mov	r3, r0
 7651 007e FFF7FEFF 	.LVL941:
 7652              		cmp	r0, #0
 7653              		bne	.L1120
 7654 0082 C0F30723 		.loc 1 1956 0
 7655              		ldr	r0, [sp, #8]
 7656 0086 A073     		subs	r3, r5, #1
 7657 0088 E373     	.LVL942:
 7658 008a 030C     		str	r3, [r0, #12]
 7659 008c 000E     		.loc 1 1957 0
 7660              		mov	r1, r8
 7661              		bl	move_window
 7662 008e 627D     	.LBE40:
 7663              		.loc 1 1972 0
 7664 0090 6074     		mov	r3, r0
 7665              	.LVL943:
 7666 0092 207D     		cbz	r0, .L1126
 7667 0094 E17E     		b	.L1120
 7668              	.LVL944:
 7669 0096 2374     	.L1114:
 7670              		.loc 1 1963 0
 7671 0098 40EA0220 		cmp	r3, #0
 7672              		bne	.L1120
 7673 009c 0023     		.loc 1 1964 0
 7674              		ldrb	r3, [r4, #11]	@ zero_extendqisi2
 7675 009e A27E     	.LVL945:
 7676              		tst	r3, #16
 7677 00a0 E372     		beq	.L1131
 7678              		movs	r3, #4
 7679 00a2 2377     	.LVL946:
 7680 00a4 6377     		b	.L1120
 7681 00a6 A377     	.LVL947:
 7682 00a8 E377     	.L1131:
 7683              		.loc 1 1967 0
 7684 00aa 2375     		tst	r5, #2
 7685 00ac 6375     		beq	.L1126
 7686              		tst	r3, #1
 7687 00ae A376     		bne	.L1134
 7688 00b0 E376     	.LVL948:
 7689              	.L1126:
 7690 00b2 42EA0122 		.loc 1 1975 0
 7691              		ldr	r0, [sp, #8]
 7692 00b6 029B     		.loc 1 1973 0
 7693 00b8 0121     		tst	r7, #30
 7694              		.loc 1 1975 0
 7695 00ba 52EA0045 		ldr	r3, [r0, #48]
 7696              	.LVL949:
 7697              		.loc 1 1974 0
 7698 00be 1971     		it	ne
 7699              		orrne	r7, r7, #32
 7700 00c0 1FD0     		.loc 1 1996 0
 7701              		strb	r7, [r6, #6]
 7702 00c2 0298     		.loc 1 1975 0
 7703              		str	r3, [r6, #28]
 7704 00c4 2946     		.loc 1 1976 0
 7705              		str	r4, [r6, #32]
 7706 00c6 D0F83080 		.loc 1 1997 0
 7707              		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 7708              		ldrb	r2, [r4, #20]	@ zero_extendqisi2
 7709 00ca FFF7FEFF 		ldrb	r1, [r4, #27]	@ zero_extendqisi2
 7710              		orr	r2, r2, r3, lsl #8
 7711 00ce 0346     		ldrb	r3, [r4, #26]	@ zero_extendqisi2
 7712              		orr	r3, r3, r1, lsl #8
 7713 00d0 0028     		orr	r3, r3, r2, lsl #16
 7714 00d2 3ED1     		str	r3, [r6, #16]
 7715              		.loc 1 1999 0
 7716 00d4 0298     		ldrb	r3, [r4, #30]	@ zero_extendqisi2
 7717 00d6 6B1E     		ldrb	r2, [r4, #31]	@ zero_extendqisi2
 7718              		lsls	r3, r3, #16
 7719 00d8 C360     		orr	r3, r3, r2, lsl #24
 7720              		ldrb	r2, [r4, #28]	@ zero_extendqisi2
 7721 00da 4146     		orrs	r3, r3, r2
 7722 00dc FFF7FEFF 		ldrb	r2, [r4, #29]	@ zero_extendqisi2
 7723              		.loc 1 2005 0
 7724              		str	r0, [r6, #0]
 7725 00e0 0346     		.loc 1 1999 0
 7726              		orr	r3, r3, r2, lsl #8
 7727 00e2 70B1     		.loc 1 2005 0
 7728 00e4 35E0     		ldrh	r0, [r0, #6]
 7729              		.loc 1 1999 0
 7730              		str	r3, [r6, #12]
 7731              		.loc 1 2000 0
 7732 00e6 002B     		movs	r3, #0
 7733 00e8 33D1     		str	r3, [r6, #8]
 7734              		.loc 1 2001 0
 7735 00ea E37A     		str	r3, [r6, #24]
 7736              		.loc 1 2005 0
 7737 00ec 13F0100F 		strh	r0, [r6, #4]	@ movhi
 7738 00f0 01D0     		b	.L1120
 7739 00f2 0423     	.LVL950:
 7740              	.L1134:
 7741 00f4 2DE0     		movs	r3, #7
 7742              	.LVL951:
 7743              	.LVL952:
 7744              	.L1120:
 7745 00f6 15F0020F 		.loc 1 2009 0
 7746 00fa 02D0     		mov	r0, r3
 7747 00fc 13F0010F 		add	sp, sp, #56
 7748 0100 26D1     		pop	{r4, r5, r6, r7, r8, pc}
 7749              	.L1139:
 7750              		.align	2
 7751              	.L1138:
 7752 0102 0298     		.word	.LANCHOR6
 7753              	.LFE31:
 7755              		.section	.rodata.cst.4013,"a",%progbits
 7756 0108 036B     		.align	1
 7757              		.set	.LANCHOR3,. + 0
 7760 010c 47F02007 	cst.4013:
 7761              		.short	-32768
 7762 0110 B771     		.short	16384
 7763              		.short	8192
 7764 0112 F361     		.short	4096
 7765              		.short	2048
 7766 0114 3462     		.short	16384
 7767              		.short	8192
 7768 0116 637D     		.short	4096
 7769 0118 227D     		.short	2048
 7770 011a E17E     		.short	1024
 7771 011c 42EA0322 		.short	512
 7772 0120 A37E     		.section	.rodata.excvt.2606,"a",%progbits
 7773 0122 43EA0123 		.set	.LANCHOR7,. + 0
 7776              	excvt.2606:
 7777 012c A37F     		.byte	-128
 7778 012e E27F     		.byte	-127
 7779 0130 1B04     		.byte	-126
 7780 0132 43EA0263 		.byte	-125
 7781 0136 227F     		.byte	-124
 7782 0138 1343     		.byte	-123
 7783 013a 627F     		.byte	-122
 7784              		.byte	-121
 7785 013c 3060     		.byte	-120
 7786              		.byte	-119
 7787 013e 43EA0223 		.byte	-118
 7788              		.byte	-117
 7789 0142 C088     		.byte	-116
 7790              		.byte	-115
 7791 0144 F360     		.byte	-114
 7792              		.byte	-113
 7793 0146 0023     		.byte	-112
 7794 0148 B360     		.byte	-111
 7795              		.byte	-110
 7796 014a B361     		.byte	-109
 7797              		.byte	-108
 7798 014c B080     		.byte	-107
 7799 014e 00E0     		.byte	-106
 7800              		.byte	-105
 7801              		.byte	-104
 7802 0150 0723     		.byte	-103
 7803              		.byte	-83
 7804              		.byte	-101
 7805              		.byte	-116
 7806              		.byte	-99
 7807 0152 1846     		.byte	-82
 7808 0154 0EB0     		.byte	-97
 7809 0156 BDE8F081 		.byte	-96
 7810              		.byte	33
 7811 015a C046     		.byte	-94
 7812              		.byte	-93
 7813 015c 00000000 		.byte	-92
 7814              		.byte	-91
 7815              		.byte	-90
 7816              		.byte	-89
 7817              		.byte	-88
 7818              		.byte	-87
 7819              		.byte	-86
 7820              		.byte	-85
 7821              		.byte	-84
 7822 0000 0080     		.byte	-83
 7823 0002 0040     		.byte	-82
 7824 0004 0020     		.byte	-81
 7825 0006 0010     		.byte	-80
 7826 0008 0008     		.byte	-79
 7827 000a 0040     		.byte	-78
 7828 000c 0020     		.byte	-77
 7829 000e 0010     		.byte	-76
 7830 0010 0008     		.byte	-75
 7831 0012 0004     		.byte	-74
 7832 0014 0002     		.byte	-73
 7833              		.byte	-72
 7834              		.byte	-71
 7835              		.byte	-70
 7836              		.byte	-69
 7837              		.byte	-68
 7838 0000 80       		.byte	-67
 7839 0001 81       		.byte	-66
 7840 0002 82       		.byte	-65
 7841 0003 83       		.byte	-64
 7842 0004 84       		.byte	-63
 7843 0005 85       		.byte	-62
 7844 0006 86       		.byte	-61
 7845 0007 87       		.byte	-60
 7846 0008 88       		.byte	-59
 7847 0009 89       		.byte	-58
 7848 000a 8A       		.byte	-57
 7849 000b 8B       		.byte	-56
 7850 000c 8C       		.byte	-55
 7851 000d 8D       		.byte	-54
 7852 000e 8E       		.byte	-53
 7853 000f 8F       		.byte	-52
 7854 0010 90       		.byte	-51
 7855 0011 91       		.byte	-50
 7856 0012 92       		.byte	-49
 7857 0013 93       		.byte	-48
 7858 0014 94       		.byte	-47
 7859 0015 95       		.byte	-46
 7860 0016 96       		.byte	-45
 7861 0017 97       		.byte	-44
 7862 0018 98       		.byte	-43
 7863 0019 99       		.byte	-42
 7864 001a AD       		.byte	-41
 7865 001b 9B       		.byte	-40
 7866 001c 8C       		.byte	-39
 7867 001d 9D       		.byte	-38
 7868 001e AE       		.byte	-37
 7869 001f 9F       		.byte	-36
 7870 0020 A0       		.byte	-35
 7871 0021 21       		.byte	-34
 7872 0022 A2       		.byte	-33
 7873 0023 A3       		.byte	-64
 7874 0024 A4       		.byte	-63
 7875 0025 A5       		.byte	-62
 7876 0026 A6       		.byte	-61
 7877 0027 A7       		.byte	-60
 7878 0028 A8       		.byte	-59
 7879 0029 A9       		.byte	-58
 7880 002a AA       		.byte	-57
 7881 002b AB       		.byte	-56
 7882 002c AC       		.byte	-55
 7883 002d AD       		.byte	-54
 7884 002e AE       		.byte	-53
 7885 002f AF       		.byte	-52
 7886 0030 B0       		.byte	-51
 7887 0031 B1       		.byte	-50
 7888 0032 B2       		.byte	-49
 7889 0033 B3       		.byte	-48
 7890 0034 B4       		.byte	-47
 7891 0035 B5       		.byte	-46
 7892 0036 B6       		.byte	-45
 7893 0037 B7       		.byte	-44
 7894 0038 B8       		.byte	-43
 7895 0039 B9       		.byte	-42
 7896 003a BA       		.byte	-9
 7897 003b BB       		.byte	-40
 7898 003c BC       		.byte	-39
 7899 003d BD       		.byte	-38
 7900 003e BE       		.byte	-37
 7901 003f BF       		.byte	-36
 7902 0040 C0       		.byte	-35
 7903 0041 C1       		.byte	-34
 7904 0042 C2       		.byte	-97
 7905 0043 C3       		.section	.rodata.str1.1,"aMS",%progbits,1
 7906 0044 C4       	.LC0:
 7907 0045 C5       		.ascii	"NO NAME    FAT32   \000"
 7908 0046 C6       	.LC1:
 7909 0047 C7       		.ascii	"NO NAME    FAT     \000"
 7910 0048 C8       	.LC2:
 7911 0049 C9       		.ascii	"\"*:<>?|\177\000"
 7912 004a CA       	.LC3:
 7913 004b CB       		.ascii	"+,;=[]\000"
 7914 004c CC       		.section	.bss.Fsid,"aw",%nobits
 7915 004d CD       		.align	1
 7916 004e CE       		.set	.LANCHOR4,. + 0
 7919 0051 D1       	Fsid:
 7920 0052 D2       		.space	2
 7921 0053 D3       		.section	.bss.Drive,"aw",%nobits
 7922 0054 D4       		.set	.LANCHOR1,. + 0
 7925 0057 D7       	Drive:
 7926 0058 D8       		.space	1
 7927 0059 D9       		.section	.bss.LfnBuf,"aw",%nobits
 7928 005a DA       		.align	1
 7929 005b DB       		.set	.LANCHOR6,. + 0
 7932 005e DE       	LfnBuf:
 7933 005f DF       		.space	512
 7934 0060 C0       		.section	.rodata.LfnOfs,"a",%progbits
 7935 0061 C1       		.set	.LANCHOR5,. + 0
 7938 0064 C4       	LfnOfs:
 7939 0065 C5       		.byte	1
 7940 0066 C6       		.byte	3
 7941 0067 C7       		.byte	5
 7942 0068 C8       		.byte	7
 7943 0069 C9       		.byte	9
 7944 006a CA       		.byte	14
 7945 006b CB       		.byte	16
 7946 006c CC       		.byte	18
 7947 006d CD       		.byte	20
 7948 006e CE       		.byte	22
 7949 006f CF       		.byte	24
 7950 0070 D0       		.byte	28
 7951 0071 D1       		.byte	30
 7952 0072 D2       		.section	.rodata.vst.4012,"a",%progbits
 7953 0073 D3       		.align	1
 7954 0074 D4       		.set	.LANCHOR2,. + 0
 7957 0077 F7       	vst.4012:
 7958 0078 D8       		.short	1024
 7959 0079 D9       		.short	512
 7960 007a DA       		.short	256
 7961 007b DB       		.short	128
 7962 007c DC       		.short	64
 7963 007d DD       		.short	32
 7964 007e DE       		.short	16
 7965 007f 9F       		.short	8
 7966              		.short	4
 7967              		.short	2
 7968 0000 4E4F204E 		.short	0
 7968      414D4520 
 7968      20202046 
 7968      41543332 
 7968      20202000 
 7969              		.section	.bss.FatFs,"aw",%nobits
 7970 0014 4E4F204E 		.align	2
 7970      414D4520 
 7970      20202046 
 7970      41542020 
 7970      20202000 
 7971              		.set	.LANCHOR0,. + 0
 7974 0031 2B2C3B3D 	FatFs:
 7974      5B5D00
 7975              		.space	8
 7976              		.section	.debug_frame,"",%progbits
 7977              	.Lframe0:
 7978              		.4byte	.LECIE0-.LSCIE0
 7979              	.LSCIE0:
 7980              		.4byte	0xffffffff
 7981 0000 0000     		.byte	0x1
 7982              		.ascii	"\000"
 7983              		.uleb128 0x1
 7984              		.sleb128 -4
 7985              		.byte	0xe
 7986              		.byte	0xc
 7987 0000 00       		.uleb128 0xd
 7988              		.uleb128 0x0
 7989              		.align	2
 7990              	.LECIE0:
 7991              	.LSFDE0:
 7992              		.4byte	.LEFDE0-.LASFDE0
 7993              	.LASFDE0:
 7994 0000 00000000 		.4byte	.Lframe0
 7994      00000000 
 7994      00000000 
 7994      00000000 
 7994      00000000 
 7995              		.4byte	.LFB2
 7996              		.4byte	.LFE2-.LFB2
 7997              		.byte	0x4
 7998              		.4byte	.LCFI0-.LFB2
 7999              		.byte	0xe
 8000 0000 01       		.uleb128 0x4
 8001 0001 03       		.byte	0x8e
 8002 0002 05       		.uleb128 0x1
 8003 0003 07       		.align	2
 8004 0004 09       	.LEFDE0:
 8005 0005 0E       	.LSFDE2:
 8006 0006 10       		.4byte	.LEFDE2-.LASFDE2
 8007 0007 12       	.LASFDE2:
 8008 0008 14       		.4byte	.Lframe0
 8009 0009 16       		.4byte	.LFB3
 8010 000a 18       		.4byte	.LFE3-.LFB3
 8011 000b 1C       		.align	2
 8012 000c 1E       	.LEFDE2:
 8013              	.LSFDE4:
 8014              		.4byte	.LEFDE4-.LASFDE4
 8015              	.LASFDE4:
 8016              		.4byte	.Lframe0
 8017              		.4byte	.LFB5
 8018              		.4byte	.LFE5-.LFB5
 8019 0000 0004     		.align	2
 8020 0002 0002     	.LEFDE4:
 8021 0004 0001     	.LSFDE6:
 8022 0006 8000     		.4byte	.LEFDE6-.LASFDE6
 8023 0008 4000     	.LASFDE6:
 8024 000a 2000     		.4byte	.Lframe0
 8025 000c 1000     		.4byte	.LFB12
 8026 000e 0800     		.4byte	.LFE12-.LFB12
 8027 0010 0400     		.align	2
 8028 0012 0200     	.LEFDE6:
 8029 0014 0000     	.LSFDE8:
 8030              		.4byte	.LEFDE8-.LASFDE8
 8031              	.LASFDE8:
 8032              		.4byte	.Lframe0
 8033              		.4byte	.LFB18
 8034              		.4byte	.LFE18-.LFB18
 8035              		.byte	0x4
 8036 0000 00000000 		.4byte	.LCFI1-.LFB18
 8036      00000000 
 9129              		.byte	0x56
DEFINED SYMBOLS
                            *ABS*:00000000 ff.c
                            .text:00000000 $t
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:24     .text.mem_cpy:00000000 $t
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:27     .text.mem_cpy:00000000 mem_cpy
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:56     .text.mem_set:00000000 $t
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:59     .text.mem_set:00000000 mem_set
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:86     .text.chk_chr:00000000 $t
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:89     .text.chk_chr:00000000 chk_chr
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:121    .text.clust2sect:00000000 clust2sect
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:118    .text.clust2sect:00000000 $t
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:161    .text.gen_numname:00000000 gen_numname
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:158    .text.gen_numname:00000000 $t
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:264    .text.sum_sfn:00000000 $t
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:267    .text.sum_sfn:00000000 sum_sfn
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:300    .text.f_mount:00000000 f_mount
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:297    .text.f_mount:00000000 $t
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:344    .text.f_mount:00000024 $d
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:353    .text.f_chdrive:00000000 f_chdrive
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:350    .text.f_chdrive:00000000 $t
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:382    .text.f_chdrive:00000010 $d
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:391    .text.f_mkfs:00000000 f_mkfs
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:388    .text.f_mkfs:00000000 $t
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:818    .text.f_mkfs:000002a8 $d
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:824    .text.f_mkfs:000002b8 $t
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:1216   .text.f_mkfs:000005a0 $d
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:1224   .text.validate:00000000 $t
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:1227   .text.validate:00000000 validate
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:1262   .text.check_fs:00000000 $t
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:1265   .text.check_fs:00000000 check_fs
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:1333   .text.check_fs:00000084 $d
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:1338   .text.chk_mounted:00000000 $t
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:1341   .text.chk_mounted:00000000 chk_mounted
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:1804   .text.chk_mounted:00000308 $d
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:1811   .text.chk_mounted:0000031c $t
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:1820   .text.move_window:00000000 $t
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:1823   .text.move_window:00000000 move_window
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:1920   .text.put_fat:00000000 put_fat
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:1917   .text.put_fat:00000000 $t
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:2113   .text.get_fat:00000000 get_fat
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:2110   .text.get_fat:00000000 $t
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:2262   .text.f_getfree:00000000 f_getfree
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:2259   .text.f_getfree:00000000 $t
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:2442   .text.f_read:00000000 f_read
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:2439   .text.f_read:00000000 $t
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:2696   .text.f_gets:00000000 f_gets
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:2693   .text.f_gets:00000000 $t
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:2764   .text.dir_sdi:00000000 $t
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:2767   .text.dir_sdi:00000000 dir_sdi
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:2885   .text.create_chain:00000000 $t
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:2888   .text.create_chain:00000000 create_chain
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:3032   .text.f_lseek:00000000 f_lseek
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:3029   .text.f_lseek:00000000 $t
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:3304   .text.f_write:00000000 f_write
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:3301   .text.f_write:00000000 $t
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:3597   .text.f_putc:00000000 f_putc
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:3594   .text.f_putc:00000000 $t
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:3635   .text.f_puts:00000000 f_puts
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:3632   .text.f_puts:00000000 $t
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:3679   .text.f_printf:00000000 f_printf
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:3676   .text.f_printf:00000000 $t
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:4046   .text.dir_next:00000000 $t
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:4049   .text.dir_next:00000000 dir_next
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:4235   .text.dir_remove:00000000 $t
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:4238   .text.dir_remove:00000000 dir_remove
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:4313   .text.dir_read:00000000 $t
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:4316   .text.dir_read:00000000 dir_read
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:4524   .text.dir_read:00000100 $d
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:4529   .text.remove_chain:00000000 $t
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:4532   .text.remove_chain:00000000 remove_chain
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:4626   .text.f_truncate:00000000 f_truncate
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:4623   .text.f_truncate:00000000 $t
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:4743   .text.sync:00000000 $t
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:4746   .text.sync:00000000 sync
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:4858   .text.f_sync:00000000 f_sync
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:4855   .text.f_sync:00000000 $t
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:4984   .text.f_close:00000000 f_close
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:4981   .text.f_close:00000000 $t
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:5009   .text.get_fileinfo:00000000 $t
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:5012   .text.get_fileinfo:00000000 get_fileinfo
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:5202   .text.f_readdir:00000000 f_readdir
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:5199   .text.f_readdir:00000000 $t
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:5283   .text.f_readdir:00000058 $d
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:5288   .text.dir_find:00000000 $t
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:5291   .text.dir_find:00000000 dir_find
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:5532   .text.dir_find:0000012c $d
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:5537   .text.follow_path:00000000 $t
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:5540   .text.follow_path:00000000 follow_path
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:6027   .text.follow_path:000002b0 $d
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:6038   .text.f_utime:00000000 f_utime
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:6035   .text.f_utime:00000000 $t
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:6125   .text.f_utime:00000068 $d
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:6134   .text.f_chmod:00000000 f_chmod
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:6131   .text.f_chmod:00000000 $t
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:6223   .text.f_chmod:00000064 $d
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:6232   .text.f_unlink:00000000 f_unlink
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:6229   .text.f_unlink:00000000 $t
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:6402   .text.f_unlink:000000dc $d
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:6411   .text.f_stat:00000000 f_stat
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:6408   .text.f_stat:00000000 $t
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:6469   .text.f_stat:00000044 $d
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:6478   .text.f_opendir:00000000 f_opendir
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:6475   .text.f_opendir:00000000 $t
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:6575   .text.f_opendir:0000006c $d
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:6584   .text.f_chdir:00000000 f_chdir
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:6581   .text.f_chdir:00000000 $t
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:6672   .text.f_chdir:0000006c $d
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:6677   .text.dir_register:00000000 $t
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:6680   .text.dir_register:00000000 dir_register
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:7008   .text.dir_register:000001bc $d
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:7017   .text.f_rename:00000000 f_rename
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:7014   .text.f_rename:00000000 $t
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:7236   .text.f_rename:0000012c $d
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:7245   .text.f_mkdir:00000000 f_mkdir
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:7242   .text.f_mkdir:00000000 $t
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:7539   .text.f_mkdir:000001bc $d
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:7548   .text.f_open:00000000 f_open
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:7545   .text.f_open:00000000 $t
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:7813   .text.f_open:0000015c $d
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:7821   .rodata.cst.4013:00000000 cst.4013
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:7822   .rodata.cst.4013:00000000 $d
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:7837   .rodata.excvt.2606:00000000 excvt.2606
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:7838   .rodata.excvt.2606:00000000 $d
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:7980   .bss.Fsid:00000000 Fsid
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:7986   .bss.Drive:00000000 Drive
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:7993   .bss.LfnBuf:00000000 LfnBuf
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:7999   .rodata.LfnOfs:00000000 LfnOfs
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:8000   .rodata.LfnOfs:00000000 $d
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:8018   .rodata.vst.4012:00000000 vst.4012
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:8019   .rodata.vst.4012:00000000 $d
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:8035   .bss.FatFs:00000000 FatFs
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:8039   .debug_frame:00000000 $d
C:\Users\KVIN~1\AppData\Local\Temp/cc2Vcaaa.s:9133   .debug_loc:00000000 $d

UNDEFINED SYMBOLS
disk_initialize
disk_ioctl
disk_write
get_fattime
disk_status
disk_read
ff_convert
ff_wtoupper
