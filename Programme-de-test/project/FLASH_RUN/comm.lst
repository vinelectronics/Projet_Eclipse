   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 18, 4
  12              		.thumb
  13              		.file	"comm.c"
  21              	.Ltext0:
  22              		.section	.text.UART_IntErr,"ax",%progbits
  23              		.align	2
  24              		.thumb
  25              		.thumb_func
  27              	UART_IntErr:
  28              	.LFB34:
  29              		.file 1 "comm.c"
   1:comm.c        **** /**
   2:comm.c        ****  * @file	: comm.c
   3:comm.c        ****  * @purpose	: UART using interrupt mode to test the UART driver
   4:comm.c        ****  * @version	: 1.0
   5:comm.c        ****  * @date	: 18. Mar. 2009 (NXP), July 2010 (mthomas)
   6:comm.c        ****  * @author	: HieuNguyen (NXP example), Martin Thomas (adapted as "library")
   7:comm.c        ****  *----------------------------------------------------------------------------
   8:comm.c        ****  * Software that is described herein is for illustrative purposes only
   9:comm.c        ****  * which provides customers with programming information regarding the
  10:comm.c        ****  * products. This software is supplied "AS IS" without any warranties.
  11:comm.c        ****  * NXP Semiconductors assumes no responsibility or liability for the
  12:comm.c        ****  * use of the software, conveys no license or title under any patent,
  13:comm.c        ****  * copyright, or mask work right to the product. NXP Semiconductors
  14:comm.c        ****  * reserves the right to make changes in the software without
  15:comm.c        ****  * notification. NXP Semiconductors also make no representation or
  16:comm.c        ****  * warranty that such application will be suitable for the specified
  17:comm.c        ****  * use without further testing or modification.
  18:comm.c        ****  **********************************************************************/
  19:comm.c        **** 
  20:comm.c        **** #include "lpc17xx.h"
  21:comm.c        **** #include "lpc17xx_uart.h"
  22:comm.c        **** #include "lpc17xx_nvic.h"
  23:comm.c        **** #include "lpc17xx_pinsel.h"
  24:comm.c        **** 
  25:comm.c        **** #include "comm.h"
  26:comm.c        **** 
  27:comm.c        **** #define UART_PORT 0
  28:comm.c        **** 
  29:comm.c        **** #if (UART_PORT == 0)
  30:comm.c        **** #define TEST_UART LPC_UART0
  31:comm.c        **** #elif (UART_PORT == 1)
  32:comm.c        **** #define TEST_UART LPC_UART1
  33:comm.c        **** #endif
  34:comm.c        **** 
  35:comm.c        **** /************************** PRIVATE MACROS *************************/
  36:comm.c        **** 
  37:comm.c        **** /* buffer size definition */
  38:comm.c        **** #define UART_RING_BUFSIZE 256
  39:comm.c        **** 
  40:comm.c        **** /* Buf mask */
  41:comm.c        **** #define __BUF_MASK (UART_RING_BUFSIZE-1)
  42:comm.c        **** /* Check buf is full or not */
  43:comm.c        **** #define __BUF_IS_FULL(head, tail) ((tail&__BUF_MASK)==((head+1)&__BUF_MASK))
  44:comm.c        **** /* Check buf will be full in next receiving or not */
  45:comm.c        **** #define __BUF_WILL_FULL(head, tail) ((tail&__BUF_MASK)==((head+2)&__BUF_MASK))
  46:comm.c        **** /* Check buf is empty */
  47:comm.c        **** #define __BUF_IS_EMPTY(head, tail) ((head&__BUF_MASK)==(tail&__BUF_MASK))
  48:comm.c        **** /* Reset buf */
  49:comm.c        **** #define __BUF_RESET(bufidx)	(bufidx=0)
  50:comm.c        **** #define __BUF_INCR(bufidx)	(bufidx=(bufidx+1)&__BUF_MASK)
  51:comm.c        **** 
  52:comm.c        **** /************************** PRIVATE TYPES *************************/
  53:comm.c        **** 
  54:comm.c        **** /** @brief UART Ring buffer structure */
  55:comm.c        **** typedef struct
  56:comm.c        **** {
  57:comm.c        **** 	__IO uint32_t tx_head; /*!< UART Tx ring buffer head index */
  58:comm.c        **** 	__IO uint32_t tx_tail; /*!< UART Tx ring buffer tail index */
  59:comm.c        **** 	__IO uint32_t rx_head; /*!< UART Rx ring buffer head index */
  60:comm.c        **** 	__IO uint32_t rx_tail; /*!< UART Rx ring buffer tail index */
  61:comm.c        **** 	/*__IO*/ uint8_t tx[UART_RING_BUFSIZE]; /*!< UART Tx data ring buffer */
  62:comm.c        **** 	__IO uint8_t rx[UART_RING_BUFSIZE]; /*!< UART Rx data ring buffer */
  63:comm.c        **** } UART_RING_BUFFER_T;
  64:comm.c        **** 
  65:comm.c        **** /************************** PRIVATE VARIABLES *************************/
  66:comm.c        **** // UART Ring buffer
  67:comm.c        **** static UART_RING_BUFFER_T rb;
  68:comm.c        **** // Current Tx Interrupt enable state
  69:comm.c        **** static __IO FlagStatus TxIntStat;
  70:comm.c        **** 
  71:comm.c        **** /************************** PRIVATE FUNCTIONS *************************/
  72:comm.c        **** #if (UART_PORT == 0)
  73:comm.c        **** void UART0_IRQHandler(void);
  74:comm.c        **** #elif (UART_PORT == 1)
  75:comm.c        **** void UART1_IRQHandler(void);
  76:comm.c        **** #endif
  77:comm.c        **** 
  78:comm.c        **** static void UART_IntTransmit(void);
  79:comm.c        **** static void UART_IntReceive(void);
  80:comm.c        **** static uint32_t UARTReceive(LPC_UART_TypeDef *UARTPort, uint8_t *rxbuf, uint8_t buflen);
  81:comm.c        **** static uint32_t UARTSend(LPC_UART_TypeDef *UARTPort, uint8_t *txbuf, uint8_t buflen);
  82:comm.c        **** 
  83:comm.c        **** #if (UART_PORT == 0)
  84:comm.c        **** /*********************************************************************//**
  85:comm.c        ****  * @brief	UART0 interrupt handler sub-routine reference, just to call the
  86:comm.c        ****  * 				standard interrupt handler in uart driver
  87:comm.c        ****  * @param	None
  88:comm.c        ****  * @return	None
  89:comm.c        ****  **********************************************************************/
  90:comm.c        **** void UART0_IRQHandler(void)
  91:comm.c        **** {
  92:comm.c        **** 	// Call Standard UART 0 interrupt handler
  93:comm.c        **** 	UART0_StdIntHandler();
  94:comm.c        **** }
  95:comm.c        **** #endif
  96:comm.c        **** 
  97:comm.c        **** #if (UART_PORT == 1)
  98:comm.c        **** /*********************************************************************//**
  99:comm.c        ****  * @brief	UART1 interrupt handler sub-routine reference, just to call the
 100:comm.c        ****  * 				standard interrupt handler in uart driver
 101:comm.c        ****  * @param	None
 102:comm.c        ****  * @return	None
 103:comm.c        ****  **********************************************************************/
 104:comm.c        **** static void UART1_IRQHandler(void)
 105:comm.c        **** {
 106:comm.c        **** 	// Call Standard UART 0 interrupt handler
 107:comm.c        **** 	UART1_StdIntHandler();
 108:comm.c        **** }
 109:comm.c        **** #endif
 110:comm.c        **** 
 111:comm.c        **** /********************************************************************//**
 112:comm.c        ****  * @brief 		UART receive function (ring buffer used)
 113:comm.c        ****  * @param[in]	None
 114:comm.c        ****  * @return 		None
 115:comm.c        ****  *********************************************************************/
 116:comm.c        **** static void UART_IntReceive(void)
 117:comm.c        **** {
 118:comm.c        **** 	uint8_t tmpc;
 119:comm.c        **** 	uint32_t rLen;
 120:comm.c        **** 
 121:comm.c        **** 	while (1)
 122:comm.c        **** 	{
 123:comm.c        **** 		// Call UART read function in UART driver
 124:comm.c        **** 		rLen = UART_Receive(TEST_UART, &tmpc, 1, NONE_BLOCKING);
 125:comm.c        **** 		// If data received
 126:comm.c        **** 		if (rLen)
 127:comm.c        **** 		{
 128:comm.c        **** 			/* Check if buffer is more space
 129:comm.c        **** 			 * If no more space, remaining character will be trimmed out
 130:comm.c        **** 			 */
 131:comm.c        **** 			if (!__BUF_IS_FULL(rb.rx_head,rb.rx_tail))
 132:comm.c        **** 			{
 133:comm.c        **** 				rb.rx[rb.rx_head] = tmpc;
 134:comm.c        **** 				__BUF_INCR(rb.rx_head);
 135:comm.c        **** 			}
 136:comm.c        **** 		}
 137:comm.c        **** 		// no more data
 138:comm.c        **** 		else
 139:comm.c        **** 		{
 140:comm.c        **** 			break;
 141:comm.c        **** 		}
 142:comm.c        **** 	}
 143:comm.c        **** }
 144:comm.c        **** 
 145:comm.c        **** /********************************************************************//**
 146:comm.c        ****  * @brief 		UART transmit function (ring buffer used)
 147:comm.c        ****  * @param[in]	None
 148:comm.c        ****  * @return 		None
 149:comm.c        ****  *********************************************************************/
 150:comm.c        **** static void UART_IntTransmit(void)
 151:comm.c        **** {
 152:comm.c        **** 	// Disable THRE interrupt
 153:comm.c        **** 	UART_IntConfig(TEST_UART, UART_INTCFG_THRE, DISABLE);
 154:comm.c        **** 
 155:comm.c        **** 	/* Wait for FIFO buffer empty, transfer UART_TX_FIFO_SIZE bytes
 156:comm.c        **** 	 * of data or break whenever ring buffers are empty */
 157:comm.c        **** 	/* Wait until THR empty */
 158:comm.c        **** 	while (UART_CheckBusy(TEST_UART) == SET)
 159:comm.c        **** 		;
 160:comm.c        **** 
 161:comm.c        **** 	while (!__BUF_IS_EMPTY(rb.tx_head,rb.tx_tail))
 162:comm.c        **** 	{
 163:comm.c        **** 		/* Move a piece of data into the transmit FIFO */
 164:comm.c        **** 		if (UART_Send(TEST_UART, (uint8_t *) &rb.tx[rb.tx_tail], 1,
 165:comm.c        **** 				NONE_BLOCKING))
 166:comm.c        **** 		{
 167:comm.c        **** 			/* Update transmit ring FIFO tail pointer */
 168:comm.c        **** 			__BUF_INCR(rb.tx_tail);
 169:comm.c        **** 		}
 170:comm.c        **** 		else
 171:comm.c        **** 		{
 172:comm.c        **** 			break;
 173:comm.c        **** 		}
 174:comm.c        **** 	}
 175:comm.c        **** 
 176:comm.c        **** 	/* If there is no more data to send, disable the transmit
 177:comm.c        **** 	 interrupt - else enable it or keep it enabled */
 178:comm.c        **** 	if (__BUF_IS_EMPTY(rb.tx_head, rb.tx_tail))
 179:comm.c        **** 	{
 180:comm.c        **** 		UART_IntConfig(TEST_UART, UART_INTCFG_THRE, DISABLE);
 181:comm.c        **** 		// Reset Tx Interrupt state
 182:comm.c        **** 		TxIntStat = RESET;
 183:comm.c        **** 	}
 184:comm.c        **** 	else
 185:comm.c        **** 	{
 186:comm.c        **** 		// Set Tx Interrupt state
 187:comm.c        **** 		TxIntStat = SET;
 188:comm.c        **** 		UART_IntConfig(TEST_UART, UART_INTCFG_THRE, ENABLE);
 189:comm.c        **** 	}
 190:comm.c        **** }
 191:comm.c        **** 
 192:comm.c        **** /*********************************************************************//**
 193:comm.c        ****  * @brief		UART Line Status Error callback
 194:comm.c        ****  * @param[in]	bLSErrType	UART Line Status Error Type
 195:comm.c        ****  * @return		None
 196:comm.c        ****  **********************************************************************/
 197:comm.c        **** static void UART_IntErr(uint8_t bLSErrType)
 198:comm.c        **** {
  30              	etend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33              	.LVL0:
  34              		@ lr needed for prologue
  35              	.L3:
  36              		.loc 1 205 0
 199:comm.c        **** 	uint8_t test;
 200:comm.c        **** 	// Loop forever
 201:comm.c        **** 	while (1)
 202:comm.c        **** 	{
 203:comm.c        **** 		// For testing purpose
 204:comm.c        **** 		test = bLSErrType;
 205:comm.c        **** 	}
  37              	.LFE34:
  39              		.section	.text.comm_test,"ax",%progbits
  40              		.align	2
  41 0002 C046     		.global	comm_test
  42              		.thumb
  43              		.thumb_func
  45              	comm_test:
  46              	.LFB38:
  47              		.loc 1 417 0
  48              		@ args = 0, pretend = 0, frame = 0
 206:comm.c        **** }
 207:comm.c        **** 
 208:comm.c        **** /*********************************************************************//**
 209:comm.c        ****  * @brief		UART transmit function for interrupt mode (using ring buffers)
 210:comm.c        ****  * @param[in]	UARTPort	Selected UART peripheral used to send data,
 211:comm.c        ****  * 				should be UART0
 212:comm.c        ****  * @param[out]	txbuf Pointer to Transmit buffer
 213:comm.c        ****  * @param[in]	buflen Length of Transmit buffer
 214:comm.c        ****  * @return 		Number of bytes actually sent to the ring buffer
 215:comm.c        ****  **********************************************************************/
 216:comm.c        **** static uint32_t UARTSend(LPC_UART_TypeDef *UARTPort, uint8_t txbuf[], uint8_t buflen)
 217:comm.c        **** {
 218:comm.c        **** 	uint8_t* data = &txbuf[0];
 219:comm.c        **** 	uint32_t bytes = 0;
 220:comm.c        **** 
 221:comm.c        **** 	/* Temporarily lock out UART transmit interrupts during this
 222:comm.c        **** 	 read so the UART transmit interrupt won't cause problems
 223:comm.c        **** 	 with the index values */
 224:comm.c        **** 	UART_IntConfig(UARTPort, UART_INTCFG_THRE, DISABLE);
 225:comm.c        **** 
 226:comm.c        **** 	/* Loop until transmit run buffer is full or until n_bytes
 227:comm.c        **** 	 expires */
 228:comm.c        **** 	while ((buflen > 0) && (!__BUF_IS_FULL(rb.tx_head, rb.tx_tail)))
 229:comm.c        **** 	{
 230:comm.c        **** 		/* Write data from buffer into ring buffer */
 231:comm.c        **** 		rb.tx[rb.tx_head] = *data;
 232:comm.c        **** 		data++;
 233:comm.c        **** 
 234:comm.c        **** 		/* Increment head pointer */
 235:comm.c        **** 		__BUF_INCR(rb.tx_head);
 236:comm.c        **** 
 237:comm.c        **** 		/* Increment data count and decrement buffer size count */
 238:comm.c        **** 		bytes++;
 239:comm.c        **** 		buflen--;
 240:comm.c        **** 	}
 241:comm.c        **** 
 242:comm.c        **** 	/*
 243:comm.c        **** 	 * Check if current Tx interrupt enable is reset,
 244:comm.c        **** 	 * that means the Tx interrupt must be re-enabled
 245:comm.c        **** 	 * due to call UART_IntTransmit() function to trigger
 246:comm.c        **** 	 * this interrupt type
 247:comm.c        **** 	 */
 248:comm.c        **** 	if (TxIntStat == RESET)
 249:comm.c        **** 	{
 250:comm.c        **** 		UART_IntTransmit();
 251:comm.c        **** 	}
 252:comm.c        **** 	/*
 253:comm.c        **** 	 * Otherwise, re-enables Tx Interrupt
 254:comm.c        **** 	 */
 255:comm.c        **** 	else
 256:comm.c        **** 	{
 257:comm.c        **** 		UART_IntConfig(UARTPort, UART_INTCFG_THRE, ENABLE);
 258:comm.c        **** 	}
 259:comm.c        **** 
 260:comm.c        **** 	return bytes;
 261:comm.c        **** }
 262:comm.c        **** 
 263:comm.c        **** /*********************************************************************//**
 264:comm.c        ****  * @brief		UART read function for interrupt mode (using ring buffers)
 265:comm.c        ****  * @param[in]	UARTPort	Selected UART peripheral used to send data,
 266:comm.c        ****  * 				should be UART0
 267:comm.c        ****  * @param[out]	rxbuf Pointer to Received buffer
 268:comm.c        ****  * @param[in]	buflen Length of Received buffer
 269:comm.c        ****  * @return 		Number of bytes actually read from the ring buffer
 270:comm.c        ****  **********************************************************************/
 271:comm.c        **** static uint32_t UARTReceive(LPC_UART_TypeDef *UARTPort, uint8_t *rxbuf, uint8_t buflen)
 272:comm.c        **** {
 273:comm.c        **** 	uint8_t *data = (uint8_t *) rxbuf;
 274:comm.c        **** 	uint32_t bytes = 0;
 275:comm.c        **** 
 276:comm.c        **** 	/* Temporarily lock out UART receive interrupts during this
 277:comm.c        **** 	 read so the UART receive interrupt won't cause problems
 278:comm.c        **** 	 with the index values */
 279:comm.c        **** 	UART_IntConfig(UARTPort, UART_INTCFG_RBR, DISABLE);
 280:comm.c        **** 
 281:comm.c        **** 	/* Loop until receive buffer ring is empty or
 282:comm.c        **** 	 until max_bytes expires */
 283:comm.c        **** 	while ((buflen > 0) && (!(__BUF_IS_EMPTY(rb.rx_head, rb.rx_tail))))
 284:comm.c        **** 	{
 285:comm.c        **** 		/* Read data from ring buffer into user buffer */
 286:comm.c        **** 		*data = rb.rx[rb.rx_tail];
 287:comm.c        **** 		data++;
 288:comm.c        **** 
 289:comm.c        **** 		/* Update tail pointer */
 290:comm.c        **** 		__BUF_INCR(rb.rx_tail);
 291:comm.c        **** 
 292:comm.c        **** 		/* Increment data count and decrement buffer size count */
 293:comm.c        **** 		bytes++;
 294:comm.c        **** 		buflen--;
 295:comm.c        **** 	}
 296:comm.c        **** 
 297:comm.c        **** 	/* Re-enable UART interrupts */
 298:comm.c        **** 	UART_IntConfig(UARTPort, UART_INTCFG_RBR, ENABLE);
 299:comm.c        **** 
 300:comm.c        **** 	return bytes;
 301:comm.c        **** }
 302:comm.c        **** 
 303:comm.c        **** /*********************************************************************//**
 304:comm.c        ****  * @brief	UART init sub-routine
 305:comm.c        ****  **********************************************************************/
 306:comm.c        **** static int uart_init_intern(void)
 307:comm.c        **** {
 308:comm.c        **** 	// UART Configuration structure variable
 309:comm.c        **** 	UART_CFG_Type UARTConfigStruct;
 310:comm.c        **** 	// UART FIFO configuration Struct variable
 311:comm.c        **** 	UART_FIFO_CFG_Type UARTFIFOConfigStruct;
 312:comm.c        **** 	// Pin configuration for UART0
 313:comm.c        **** 	PINSEL_CFG_Type PinCfg;
 314:comm.c        **** 
 315:comm.c        **** #if (UART_PORT == 0)
 316:comm.c        **** 	/*
 317:comm.c        **** 	 * Initialize UART0 pin connect
 318:comm.c        **** 	 */
 319:comm.c        **** 	PinCfg.Funcnum = 1;
 320:comm.c        **** 	PinCfg.OpenDrain = 0;
 321:comm.c        **** 	PinCfg.Pinmode = 0;
 322:comm.c        **** 	PinCfg.Pinnum = 2;
 323:comm.c        **** 	PinCfg.Portnum = 0;
 324:comm.c        **** 	PINSEL_ConfigPin(&PinCfg);
 325:comm.c        **** 	PinCfg.Pinnum = 3;
 326:comm.c        **** 	PINSEL_ConfigPin(&PinCfg);
 327:comm.c        **** #endif
 328:comm.c        **** 
 329:comm.c        **** #if (UART_PORT == 1)
 330:comm.c        **** 	/*
 331:comm.c        **** 	 * Initialize UART1 pin connect
 332:comm.c        **** 	 */
 333:comm.c        **** 	PinCfg.Funcnum = 2;
 334:comm.c        **** 	PinCfg.OpenDrain = 0;
 335:comm.c        **** 	PinCfg.Pinmode = 0;
 336:comm.c        **** 	PinCfg.Pinnum = 0;
 337:comm.c        **** 	PinCfg.Portnum = 2;
 338:comm.c        **** 	PINSEL_ConfigPin(&PinCfg);
 339:comm.c        **** 	PinCfg.Pinnum = 1;
 340:comm.c        **** 	PINSEL_ConfigPin(&PinCfg);
 341:comm.c        **** #endif
 342:comm.c        **** 
 343:comm.c        **** 	/* Initialize UART Configuration parameter structure to default state:
 344:comm.c        **** 	 * Baudrate = 9600bps
 345:comm.c        **** 	 * 8 data bit
 346:comm.c        **** 	 * 1 Stop bit
 347:comm.c        **** 	 * None parity
 348:comm.c        **** 	 */
 349:comm.c        **** 	UART_ConfigStructInit(&UARTConfigStruct);
 350:comm.c        **** 	// Re-configure baud-rate to 115200bps
 351:comm.c        **** 	UARTConfigStruct.Baud_rate = 115200;
 352:comm.c        **** 
 353:comm.c        **** 	// Initialize UART0 peripheral with given to corresponding parameter
 354:comm.c        **** 	UART_Init(TEST_UART, &UARTConfigStruct);
 355:comm.c        **** 
 356:comm.c        **** 	/* Initialize FIFOConfigStruct to default state:
 357:comm.c        **** 	 * 				- FIFO_DMAMode = DISABLE
 358:comm.c        **** 	 * 				- FIFO_Level = UART_FIFO_TRGLEV0
 359:comm.c        **** 	 * 				- FIFO_ResetRxBuf = ENABLE
 360:comm.c        **** 	 * 				- FIFO_ResetTxBuf = ENABLE
 361:comm.c        **** 	 * 				- FIFO_State = ENABLE
 362:comm.c        **** 	 */
 363:comm.c        **** 	UART_FIFOConfigStructInit(&UARTFIFOConfigStruct);
 364:comm.c        **** 
 365:comm.c        **** 	// Initialize FIFO for UART0 peripheral
 366:comm.c        **** 	UART_FIFOConfig(TEST_UART, &UARTFIFOConfigStruct);
 367:comm.c        **** 
 368:comm.c        **** 	// Setup callback ---------------
 369:comm.c        **** 	// Receive callback
 370:comm.c        **** 	UART_SetupCbs(TEST_UART, 0, (void *) UART_IntReceive);
 371:comm.c        **** 	// Transmit callback
 372:comm.c        **** 	UART_SetupCbs(TEST_UART, 1, (void *) UART_IntTransmit);
 373:comm.c        **** 	// Line Status Error callback
 374:comm.c        **** 	UART_SetupCbs(TEST_UART, 3, (void *) UART_IntErr);
 375:comm.c        **** 
 376:comm.c        **** 	// Enable UART Transmit
 377:comm.c        **** 	UART_TxCmd(TEST_UART, ENABLE);
 378:comm.c        **** 
 379:comm.c        **** 	/* Enable UART Rx interrupt */
 380:comm.c        **** 	UART_IntConfig(TEST_UART, UART_INTCFG_RBR, ENABLE);
 381:comm.c        **** 	/* Enable UART line status interrupt */
 382:comm.c        **** 	UART_IntConfig(TEST_UART, UART_INTCFG_RLS, ENABLE);
 383:comm.c        **** 	/*
 384:comm.c        **** 	 * Do not enable transmit interrupt here, since it is handled by
 385:comm.c        **** 	 * UART_Send() function, just to reset Tx Interrupt state for the
 386:comm.c        **** 	 * first time
 387:comm.c        **** 	 */
 388:comm.c        **** 	TxIntStat = RESET;
 389:comm.c        **** 
 390:comm.c        **** 	// Reset ring buf head and tail idx
 391:comm.c        **** 	__BUF_RESET(rb.rx_head);
 392:comm.c        **** 	__BUF_RESET(rb.rx_tail);
 393:comm.c        **** 	__BUF_RESET(rb.tx_head);
 394:comm.c        **** 	__BUF_RESET(rb.tx_tail);
 395:comm.c        **** 
 396:comm.c        **** #if (UART_PORT == 0)
 397:comm.c        **** 	/* preemption = 1, sub-priority = 1 */
 398:comm.c        **** 	NVIC_SetPriority(UART0_IRQn, ((0x01 << 3) | 0x01));
 399:comm.c        **** 	/* Enable Interrupt for UART0 channel */
 400:comm.c        **** 	NVIC_EnableIRQ(UART0_IRQn);
 401:comm.c        **** #endif
 402:comm.c        **** 
 403:comm.c        **** #if (UART_PORT == 1)
 404:comm.c        **** 	/* preemption = 1, sub-priority = 1 */
 405:comm.c        **** 	NVIC_SetPriority(UART1_IRQn, ((0x01<<3)|0x01));
 406:comm.c        **** 	/* Enable Interrupt for UART0 channel */
 407:comm.c        **** 	NVIC_EnableIRQ(UART1_IRQn);
 408:comm.c        **** #endif
 409:comm.c        **** 
 410:comm.c        **** 	return 0;
 411:comm.c        **** }
 412:comm.c        **** 
 413:comm.c        **** 
 414:comm.c        **** /************************** term_io - Interface  *************************/
 415:comm.c        **** 
 416:comm.c        **** int comm_test(void)
 417:comm.c        **** {
  49              	ded = 0, uses_anonymous_args = 0
  50              		@ link register save eliminated.
  51              		.loc 1 418 0
  52              		ldr	r2, .L7
 418:comm.c        **** 	return ( __BUF_IS_EMPTY(rb.rx_head, rb.rx_tail) ) ? 0 : 1;
  53              	c 1 417 0
  54 0000 054A     		@ lr needed for prologue
  55              		.loc 1 418 0
  56              		ldr	r3, [r2, #8]
  57              		ldr	r0, [r2, #12]
  58 0002 9368     		and	r3, r3, #255
  59 0004 D068     		and	r0, r0, #255
  60 0006 03F0FF03 		.loc 1 419 0
  61 000a 00F0FF00 		subs	r0, r3, r0
 419:comm.c        **** }
  62              	ovne	r0, #1
  63 000e 181A     		bx	lr
  64 0010 18BF     	.L8:
  65 0012 0120     		.align	2
  66 0014 7047     	.L7:
  67              		.word	.LANCHOR0
  68 0016 C046     	.LFE38:
  70 0018 00000000 		.section	.text.comm_txbusy,"ax",%progbits
  71              		.align	2
  72              		.global	comm_txbusy
  73              		.thumb
  74              		.thumb_func
  76              	comm_txbusy:
  77              	.LFB43:
  78              		.loc 1 450 0
  79              		@ args = 0, pretend = 0, frame = 0
  80              		@ frame_needed = 0, uses_anonymous_args = 0
 420:comm.c        **** 
 421:comm.c        **** char comm_get(void)
 422:comm.c        **** {
 423:comm.c        **** 	uint8_t buf[] = {'\0', '\0' };
 424:comm.c        **** 	while ( UARTReceive(TEST_UART, buf, 1) < 1 ) { ; }
 425:comm.c        **** 	return (char)buf[0];
 426:comm.c        **** }
 427:comm.c        **** 
 428:comm.c        **** void comm_put(char d)
 429:comm.c        **** {
 430:comm.c        **** 	uint8_t buf[2];
 431:comm.c        **** 
 432:comm.c        **** 	buf[0] = (uint8_t)d;
 433:comm.c        **** 	while ( UARTSend(TEST_UART, buf, 1) < 1 ) { ; }
 434:comm.c        **** }
 435:comm.c        **** 
 436:comm.c        **** void comm_puts(const char* s)
 437:comm.c        **** {
 438:comm.c        **** 	char c;
 439:comm.c        **** 	while ( ( c = *s++ ) != '\0' ) {
 440:comm.c        **** 		comm_put(c);
 441:comm.c        **** 	}
 442:comm.c        **** }
 443:comm.c        **** 
 444:comm.c        **** void comm_init(void)
 445:comm.c        **** {
 446:comm.c        **** 	uart_init_intern();
 447:comm.c        **** }
 448:comm.c        **** 
 449:comm.c        **** int comm_txbusy(void)
 450:comm.c        **** {
  81              	I0:
  82              		.loc 1 451 0
  83              		ldr	r0, .L11
  84 0000 10B5     		bl	UART_CheckBusy
  85              		.loc 1 452 0
 451:comm.c        **** 	return ( UART_CheckBusy(TEST_UART) == SET ) ? 1 : 0;
  86              	r0, #1
  87 0002 0448     		ite	ne
  88 0004 FFF7FEFF 		movne	r0, #0
 452:comm.c        **** }
  89              	veq	r0, #1
  90 0008 0128     		pop	{r4, pc}
  91 000a 14BF     	.L12:
  92 000c 0020     		.align	2
  93 000e 0120     	.L11:
  94 0010 10BD     		.word	1073790976
  95              	.LFE43:
  97              		.section	.text.comm_init,"ax",%progbits
  98 0014 00C00040 		.align	2
  99              		.global	comm_init
 100              		.thumb
 101              		.thumb_func
 103              	comm_init:
 104              	.LFB42:
 105              		.loc 1 445 0
 106              		@ args = 0, pretend = 0, frame = 24
 107              		@ frame_needed = 0, uses_anonymous_args = 0
 108              		push	{r4, r5, r6, r8, r9, sl, lr}
 109              	.LCFI1:
 110              		sub	sp, sp, #28
 111              	.LCFI2:
 112 0000 2DE97047 	.LBB8:
 113              	.LBB9:
 114 0004 87B0     		.loc 1 324 0
 115              		add	r4, sp, #15
 116              		.loc 1 320 0
 117              		movs	r6, #0
 118              		.loc 1 319 0
 119 0006 0DF10F04 		mov	r8, #1
 120              		.loc 1 324 0
 121 000a 0026     		mov	r0, r4
 122              		.loc 1 322 0
 123 000c 4FF00108 		mov	sl, #2
 124              		.loc 1 349 0
 125 0010 2046     		add	r5, sp, #4
 126              		.loc 1 325 0
 127 0012 4FF0020A 		mov	r9, #3
 128              		.loc 1 319 0
 129 0016 01AD     		strb	r8, [sp, #17]
 130              		.loc 1 320 0
 131 0018 4FF00309 		strb	r6, [sp, #19]
 132              		.loc 1 321 0
 133 001c 8DF81180 		strb	r6, [sp, #18]
 134              		.loc 1 322 0
 135 0020 8DF81360 		strb	sl, [sp, #16]
 136              		.loc 1 323 0
 137 0024 8DF81260 		strb	r6, [sp, #15]
 138              		.loc 1 324 0
 139 0028 8DF810A0 		bl	PINSEL_ConfigPin
 140              		.loc 1 326 0
 141 002c 8DF80F60 		mov	r0, r4
 142              		.loc 1 354 0
 143 0030 FFF7FEFF 		ldr	r4, .L15
 144              		.loc 1 325 0
 145 0034 2046     		strb	r9, [sp, #16]
 146              		.loc 1 326 0
 147 0036 224C     		bl	PINSEL_ConfigPin
 148              		.loc 1 349 0
 149 0038 8DF81090 		mov	r0, r5
 150              		bl	UART_ConfigStructInit
 151 003c FFF7FEFF 		.loc 1 351 0
 152              		mov	r3, #115200
 153 0040 2846     		.loc 1 354 0
 154 0042 FFF7FEFF 		mov	r1, r5
 155              		mov	r0, r4
 156 0046 4FF4E133 		.loc 1 363 0
 157              		add	r5, sp, #20
 158 004a 2946     		.loc 1 351 0
 159 004c 2046     		str	r3, [sp, #4]
 160              		.loc 1 354 0
 161 004e 05AD     		bl	UART_Init
 162              		.loc 1 363 0
 163 0050 0193     		mov	r0, r5
 164              		bl	UART_FIFOConfigStructInit
 165 0052 FFF7FEFF 		.loc 1 366 0
 166              		mov	r0, r4
 167 0056 2846     		mov	r1, r5
 168 0058 FFF7FEFF 		bl	UART_FIFOConfig
 169              		.loc 1 370 0
 170 005c 2046     		mov	r0, r4
 171 005e 2946     		mov	r1, r6
 172 0060 FFF7FEFF 		ldr	r2, .L15+4
 173              		bl	UART_SetupCbs
 174 0064 2046     		.loc 1 372 0
 175 0066 3146     		mov	r0, r4
 176 0068 164A     		mov	r1, r8
 177 006a FFF7FEFF 		ldr	r2, .L15+8
 178              		bl	UART_SetupCbs
 179 006e 2046     		.loc 1 374 0
 180 0070 4146     		ldr	r2, .L15+12
 181 0072 154A     		mov	r0, r4
 182 0074 FFF7FEFF 		mov	r1, r9
 183              		bl	UART_SetupCbs
 184 0078 144A     		.loc 1 377 0
 185 007a 2046     		mov	r0, r4
 186 007c 4946     		mov	r1, r8
 187 007e FFF7FEFF 		bl	UART_TxCmd
 188              		.loc 1 380 0
 189 0082 2046     		mov	r0, r4
 190 0084 4146     		mov	r1, r6
 191 0086 FFF7FEFF 		mov	r2, r8
 192              		bl	UART_IntConfig
 193 008a 2046     		.loc 1 382 0
 194 008c 3146     		mov	r2, r8
 195 008e 4246     		mov	r0, r4
 196 0090 FFF7FEFF 		mov	r1, sl
 197              		bl	UART_IntConfig
 198 0094 4246     		.loc 1 388 0
 199 0096 2046     		ldr	r3, .L15+16
 200 0098 5146     	.LBB10:
 201 009a FFF7FEFF 	.LBB11:
 202              		.file 2 "./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h"
 203 009e 0C4B     		.loc 2 1591 0
 204              		ldr	r2, .L15+20
 205              	.LBE11:
 206              	.LBE10:
   1:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**************************************************************************//**
   2:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @file     core_cm3.h
   3:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief    CMSIS Cortex-M3 Core Peripheral Access Layer Header File
   4:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @version  V1.30
   5:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @date     30. October 2009
   6:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
   7:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @note
   8:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Copyright (C) 2009 ARM Limited. All rights reserved.
   9:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
  10:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @par
  11:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M
  12:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * processor based microcontrollers.  This file can be freely distributed
  13:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * within development tools that are supporting such ARM based processors.
  14:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
  15:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @par
  16:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
  22:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  ******************************************************************************/
  23:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
  24:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #ifndef __CM3_CORE_H__
  25:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define __CM3_CORE_H__
  26:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
  27:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /** @addtogroup CMSIS_CM3_core_LintCinfiguration CMSIS CM3 Core Lint Configuration
  28:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
  29:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * List of Lint messages which will be suppressed and not shown:
  30:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *   - Error 10: \n
  31:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *     register uint32_t __regBasePri         __asm("basepri"); \n
  32:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *     Error 10: Expecting ';'
  33:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * .
  34:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *   - Error 530: \n
  35:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *     return(__regBasePri); \n
  36:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *     Warning 530: Symbol '__regBasePri' (line 264) not initialized
  37:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * .
  38:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *   - Error 550: \n
  39:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *     __regBasePri = (basePri & 0x1ff); \n
  40:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *     Warning 550: Symbol '__regBasePri' (line 271) not accessed
  41:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * .
  42:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *   - Error 754: \n
  43:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *     uint32_t RESERVED0[24]; \n
  44:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *     Info 754: local structure member '<some, not used in the HAL>' (line 109, file ./cm3_core.h)
  45:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * .
  46:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *   - Error 750: \n
  47:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *     #define __CM3_CORE_H__ \n
  48:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *     Info 750: local macro '__CM3_CORE_H__' (line 43, file./cm3_core.h) not referenced
  49:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * .
  50:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *   - Error 528: \n
  51:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *     static __INLINE void NVIC_DisableIRQ(uint32_t IRQn) \n
  52:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *     Warning 528: Symbol 'NVIC_DisableIRQ(unsigned int)' (line 419, file ./cm3_core.h) not refere
  53:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * .
  54:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *   - Error 751: \n
  55:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *     } InterruptType_Type; \n
  56:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *     Info 751: local typedef 'InterruptType_Type' (line 170, file ./cm3_core.h) not referenced
  57:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * .
  58:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Note:  To re-enable a Message, insert a space before 'lint' *
  59:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
  60:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
  61:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
  62:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /*lint -save */
  63:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /*lint -e10  */
  64:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /*lint -e530 */
  65:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /*lint -e550 */
  66:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /*lint -e754 */
  67:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /*lint -e750 */
  68:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /*lint -e528 */
  69:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /*lint -e751 */
  70:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
  71:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
  72:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /** @addtogroup CMSIS_CM3_core_definitions CM3 Core Definitions
  73:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   This file defines all structures and symbols for CMSIS core:
  74:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****     - CMSIS version number
  75:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****     - Cortex-M core registers and bitfields
  76:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****     - Cortex-M core peripheral base address
  77:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   @{
  78:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
  79:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
  80:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #ifdef __cplusplus
  81:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  extern "C" {
  82:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #endif
  83:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
  84:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define __CM3_CMSIS_VERSION_MAIN  (0x01)                                                       /*!<
  85:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define __CM3_CMSIS_VERSION_SUB   (0x30)                                                       /*!<
  86:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define __CM3_CMSIS_VERSION       ((__CM3_CMSIS_VERSION_MAIN << 16) | __CM3_CMSIS_VERSION_SUB) /*!<
  87:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
  88:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define __CORTEX_M                (0x03)                                                       /*!<
  89:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
  90:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #include <stdint.h>                           /* Include standard types */
  91:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
  92:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #if defined (__ICCARM__)
  93:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   #include <intrinsics.h>                     /* IAR Intrinsics   */
  94:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #endif
  95:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
  96:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
  97:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #ifndef __NVIC_PRIO_BITS
  98:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   #define __NVIC_PRIO_BITS    4               /*!< standard definition for NVIC Priority Bits */
  99:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #endif
 100:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 101:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 102:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 103:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 104:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
 105:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * IO definitions
 106:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 107:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * define access restrictions to peripheral registers
 108:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
 109:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 110:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #ifdef __cplusplus
 111:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   #define     __I     volatile                /*!< defines 'read only' permissions      */
 112:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #else
 113:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   #define     __I     volatile const          /*!< defines 'read only' permissions      */
 114:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #endif
 115:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define     __O     volatile                  /*!< defines 'write only' permissions     */
 116:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define     __IO    volatile                  /*!< defines 'read / write' permissions   */
 117:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 118:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 119:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 120:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /*******************************************************************************
 121:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *                 Register Abstraction
 122:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  ******************************************************************************/
 123:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /** @addtogroup CMSIS_CM3_core_register CMSIS CM3 Core Register
 124:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  @{
 125:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** */
 126:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 127:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 128:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /** @addtogroup CMSIS_CM3_NVIC CMSIS CM3 NVIC
 129:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   memory mapped structure for Nested Vectored Interrupt Controller (NVIC)
 130:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   @{
 131:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
 132:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** typedef struct
 133:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** {
 134:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t ISER[8];                      /*!< Offset: 0x000  Interrupt Set Enable Register    
 135:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****        uint32_t RESERVED0[24];
 136:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t ICER[8];                      /*!< Offset: 0x080  Interrupt Clear Enable Register  
 137:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****        uint32_t RSERVED1[24];
 138:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t ISPR[8];                      /*!< Offset: 0x100  Interrupt Set Pending Register   
 139:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****        uint32_t RESERVED2[24];
 140:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t ICPR[8];                      /*!< Offset: 0x180  Interrupt Clear Pending Register 
 141:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****        uint32_t RESERVED3[24];
 142:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t IABR[8];                      /*!< Offset: 0x200  Interrupt Active bit Register    
 143:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****        uint32_t RESERVED4[56];
 144:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint8_t  IP[240];                      /*!< Offset: 0x300  Interrupt Priority Register (8Bit
 145:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****        uint32_t RESERVED5[644];
 146:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __O  uint32_t STIR;                         /*!< Offset: 0xE00  Software Trigger Interrupt Regist
 147:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** }  NVIC_Type;
 148:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_NVIC */
 149:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 150:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 151:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /** @addtogroup CMSIS_CM3_SCB CMSIS CM3 SCB
 152:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   memory mapped structure for System Control Block (SCB)
 153:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   @{
 154:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
 155:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** typedef struct
 156:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** {
 157:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __I  uint32_t CPUID;                        /*!< Offset: 0x00  CPU ID Base Register              
 158:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t ICSR;                         /*!< Offset: 0x04  Interrupt Control State Register  
 159:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t VTOR;                         /*!< Offset: 0x08  Vector Table Offset Register      
 160:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t AIRCR;                        /*!< Offset: 0x0C  Application Interrupt / Reset Cont
 161:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t SCR;                          /*!< Offset: 0x10  System Control Register           
 162:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t CCR;                          /*!< Offset: 0x14  Configuration Control Register    
 163:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint8_t  SHP[12];                      /*!< Offset: 0x18  System Handlers Priority Registers
 164:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t SHCSR;                        /*!< Offset: 0x24  System Handler Control and State R
 165:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t CFSR;                         /*!< Offset: 0x28  Configurable Fault Status Register
 166:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t HFSR;                         /*!< Offset: 0x2C  Hard Fault Status Register        
 167:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t DFSR;                         /*!< Offset: 0x30  Debug Fault Status Register       
 168:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t MMFAR;                        /*!< Offset: 0x34  Mem Manage Address Register       
 169:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t BFAR;                         /*!< Offset: 0x38  Bus Fault Address Register        
 170:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t AFSR;                         /*!< Offset: 0x3C  Auxiliary Fault Status Register   
 171:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __I  uint32_t PFR[2];                       /*!< Offset: 0x40  Processor Feature Register        
 172:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __I  uint32_t DFR;                          /*!< Offset: 0x48  Debug Feature Register            
 173:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __I  uint32_t ADR;                          /*!< Offset: 0x4C  Auxiliary Feature Register        
 174:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __I  uint32_t MMFR[4];                      /*!< Offset: 0x50  Memory Model Feature Register     
 175:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __I  uint32_t ISAR[5];                      /*!< Offset: 0x60  ISA Feature Register              
 176:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** } SCB_Type;
 177:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 178:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* SCB CPUID Register Definitions */
 179:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24                                             /*!< SCB 
 180:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFul << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 181:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 182:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_CPUID_VARIANT_Pos              20                                             /*!< SCB 
 183:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_CPUID_VARIANT_Msk              (0xFul << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 184:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 185:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_CPUID_PARTNO_Pos                4                                             /*!< SCB 
 186:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFul << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 187:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 188:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_CPUID_REVISION_Pos              0                                             /*!< SCB 
 189:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_CPUID_REVISION_Msk             (0xFul << SCB_CPUID_REVISION_Pos)              /*!< SCB 
 190:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 191:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* SCB Interrupt Control State Register Definitions */
 192:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_ICSR_NMIPENDSET_Pos            31                                             /*!< SCB 
 193:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1ul << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 194:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 195:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_ICSR_PENDSVSET_Pos             28                                             /*!< SCB 
 196:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_ICSR_PENDSVSET_Msk             (1ul << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 197:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 198:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_ICSR_PENDSVCLR_Pos             27                                             /*!< SCB 
 199:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1ul << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 200:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 201:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_ICSR_PENDSTSET_Pos             26                                             /*!< SCB 
 202:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_ICSR_PENDSTSET_Msk             (1ul << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 203:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 204:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_ICSR_PENDSTCLR_Pos             25                                             /*!< SCB 
 205:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1ul << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 206:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 207:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23                                             /*!< SCB 
 208:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1ul << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 209:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 210:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_ICSR_ISRPENDING_Pos            22                                             /*!< SCB 
 211:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_ICSR_ISRPENDING_Msk            (1ul << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 212:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 213:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_ICSR_VECTPENDING_Pos           12                                             /*!< SCB 
 214:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFul << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 215:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 216:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_ICSR_RETTOBASE_Pos             11                                             /*!< SCB 
 217:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_ICSR_RETTOBASE_Msk             (1ul << SCB_ICSR_RETTOBASE_Pos)                /*!< SCB 
 218:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 219:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_ICSR_VECTACTIVE_Pos             0                                             /*!< SCB 
 220:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFul << SCB_ICSR_VECTACTIVE_Pos)           /*!< SCB 
 221:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 222:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* SCB Interrupt Control State Register Definitions */
 223:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_VTOR_TBLBASE_Pos               29                                             /*!< SCB 
 224:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_VTOR_TBLBASE_Msk               (0x1FFul << SCB_VTOR_TBLBASE_Pos)              /*!< SCB 
 225:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 226:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_VTOR_TBLOFF_Pos                 7                                             /*!< SCB 
 227:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_VTOR_TBLOFF_Msk                (0x3FFFFFul << SCB_VTOR_TBLOFF_Pos)            /*!< SCB 
 228:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 229:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 230:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_AIRCR_VECTKEY_Pos              16                                             /*!< SCB 
 231:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFul << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 232:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 233:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16                                             /*!< SCB 
 234:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFul << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 235:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 236:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_AIRCR_ENDIANESS_Pos            15                                             /*!< SCB 
 237:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1ul << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 238:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 239:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_AIRCR_PRIGROUP_Pos              8                                             /*!< SCB 
 240:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_AIRCR_PRIGROUP_Msk             (7ul << SCB_AIRCR_PRIGROUP_Pos)                /*!< SCB 
 241:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 242:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2                                             /*!< SCB 
 243:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1ul << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 244:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 245:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1                                             /*!< SCB 
 246:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1ul << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 247:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 248:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_AIRCR_VECTRESET_Pos             0                                             /*!< SCB 
 249:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_AIRCR_VECTRESET_Msk            (1ul << SCB_AIRCR_VECTRESET_Pos)               /*!< SCB 
 250:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 251:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* SCB System Control Register Definitions */
 252:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SCR_SEVONPEND_Pos               4                                             /*!< SCB 
 253:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SCR_SEVONPEND_Msk              (1ul << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 254:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 255:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SCR_SLEEPDEEP_Pos               2                                             /*!< SCB 
 256:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1ul << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 257:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 258:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1                                             /*!< SCB 
 259:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1ul << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 260:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 261:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* SCB Configuration Control Register Definitions */
 262:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_CCR_STKALIGN_Pos                9                                             /*!< SCB 
 263:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_CCR_STKALIGN_Msk               (1ul << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 264:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 265:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_CCR_BFHFNMIGN_Pos               8                                             /*!< SCB 
 266:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_CCR_BFHFNMIGN_Msk              (1ul << SCB_CCR_BFHFNMIGN_Pos)                 /*!< SCB 
 267:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 268:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_CCR_DIV_0_TRP_Pos               4                                             /*!< SCB 
 269:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_CCR_DIV_0_TRP_Msk              (1ul << SCB_CCR_DIV_0_TRP_Pos)                 /*!< SCB 
 270:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 271:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3                                             /*!< SCB 
 272:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1ul << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 273:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 274:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_CCR_USERSETMPEND_Pos            1                                             /*!< SCB 
 275:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_CCR_USERSETMPEND_Msk           (1ul << SCB_CCR_USERSETMPEND_Pos)              /*!< SCB 
 276:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 277:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_CCR_NONBASETHRDENA_Pos          0                                             /*!< SCB 
 278:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_CCR_NONBASETHRDENA_Msk         (1ul << SCB_CCR_NONBASETHRDENA_Pos)            /*!< SCB 
 279:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 280:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* SCB System Handler Control and State Register Definitions */
 281:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_USGFAULTENA_Pos          18                                             /*!< SCB 
 282:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_USGFAULTENA_Msk          (1ul << SCB_SHCSR_USGFAULTENA_Pos)             /*!< SCB 
 283:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 284:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_BUSFAULTENA_Pos          17                                             /*!< SCB 
 285:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_BUSFAULTENA_Msk          (1ul << SCB_SHCSR_BUSFAULTENA_Pos)             /*!< SCB 
 286:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 287:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_MEMFAULTENA_Pos          16                                             /*!< SCB 
 288:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_MEMFAULTENA_Msk          (1ul << SCB_SHCSR_MEMFAULTENA_Pos)             /*!< SCB 
 289:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 290:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15                                             /*!< SCB 
 291:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1ul << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 292:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 293:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_BUSFAULTPENDED_Pos       14                                             /*!< SCB 
 294:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_BUSFAULTPENDED_Msk       (1ul << SCB_SHCSR_BUSFAULTPENDED_Pos)          /*!< SCB 
 295:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 296:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_MEMFAULTPENDED_Pos       13                                             /*!< SCB 
 297:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_MEMFAULTPENDED_Msk       (1ul << SCB_SHCSR_MEMFAULTPENDED_Pos)          /*!< SCB 
 298:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 299:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_USGFAULTPENDED_Pos       12                                             /*!< SCB 
 300:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_USGFAULTPENDED_Msk       (1ul << SCB_SHCSR_USGFAULTPENDED_Pos)          /*!< SCB 
 301:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 302:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_SYSTICKACT_Pos           11                                             /*!< SCB 
 303:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_SYSTICKACT_Msk           (1ul << SCB_SHCSR_SYSTICKACT_Pos)              /*!< SCB 
 304:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 305:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_PENDSVACT_Pos            10                                             /*!< SCB 
 306:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_PENDSVACT_Msk            (1ul << SCB_SHCSR_PENDSVACT_Pos)               /*!< SCB 
 307:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 308:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_MONITORACT_Pos            8                                             /*!< SCB 
 309:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_MONITORACT_Msk           (1ul << SCB_SHCSR_MONITORACT_Pos)              /*!< SCB 
 310:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 311:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_SVCALLACT_Pos             7                                             /*!< SCB 
 312:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_SVCALLACT_Msk            (1ul << SCB_SHCSR_SVCALLACT_Pos)               /*!< SCB 
 313:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 314:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_USGFAULTACT_Pos           3                                             /*!< SCB 
 315:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_USGFAULTACT_Msk          (1ul << SCB_SHCSR_USGFAULTACT_Pos)             /*!< SCB 
 316:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 317:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_BUSFAULTACT_Pos           1                                             /*!< SCB 
 318:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_BUSFAULTACT_Msk          (1ul << SCB_SHCSR_BUSFAULTACT_Pos)             /*!< SCB 
 319:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 320:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_MEMFAULTACT_Pos           0                                             /*!< SCB 
 321:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_MEMFAULTACT_Msk          (1ul << SCB_SHCSR_MEMFAULTACT_Pos)             /*!< SCB 
 322:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 323:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* SCB Configurable Fault Status Registers Definitions */
 324:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_CFSR_USGFAULTSR_Pos            16                                             /*!< SCB 
 325:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_CFSR_USGFAULTSR_Msk            (0xFFFFul << SCB_CFSR_USGFAULTSR_Pos)          /*!< SCB 
 326:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 327:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_CFSR_BUSFAULTSR_Pos             8                                             /*!< SCB 
 328:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_CFSR_BUSFAULTSR_Msk            (0xFFul << SCB_CFSR_BUSFAULTSR_Pos)            /*!< SCB 
 329:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 330:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_CFSR_MEMFAULTSR_Pos             0                                             /*!< SCB 
 331:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_CFSR_MEMFAULTSR_Msk            (0xFFul << SCB_CFSR_MEMFAULTSR_Pos)            /*!< SCB 
 332:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 333:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* SCB Hard Fault Status Registers Definitions */
 334:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_HFSR_DEBUGEVT_Pos              31                                             /*!< SCB 
 335:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_HFSR_DEBUGEVT_Msk              (1ul << SCB_HFSR_DEBUGEVT_Pos)                 /*!< SCB 
 336:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 337:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_HFSR_FORCED_Pos                30                                             /*!< SCB 
 338:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_HFSR_FORCED_Msk                (1ul << SCB_HFSR_FORCED_Pos)                   /*!< SCB 
 339:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 340:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_HFSR_VECTTBL_Pos                1                                             /*!< SCB 
 341:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_HFSR_VECTTBL_Msk               (1ul << SCB_HFSR_VECTTBL_Pos)                  /*!< SCB 
 342:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 343:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* SCB Debug Fault Status Register Definitions */
 344:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_DFSR_EXTERNAL_Pos               4                                             /*!< SCB 
 345:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_DFSR_EXTERNAL_Msk              (1ul << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 346:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 347:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_DFSR_VCATCH_Pos                 3                                             /*!< SCB 
 348:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_DFSR_VCATCH_Msk                (1ul << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 349:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 350:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_DFSR_DWTTRAP_Pos                2                                             /*!< SCB 
 351:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_DFSR_DWTTRAP_Msk               (1ul << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 352:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 353:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_DFSR_BKPT_Pos                   1                                             /*!< SCB 
 354:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_DFSR_BKPT_Msk                  (1ul << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
 355:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 356:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_DFSR_HALTED_Pos                 0                                             /*!< SCB 
 357:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_DFSR_HALTED_Msk                (1ul << SCB_DFSR_HALTED_Pos)                   /*!< SCB 
 358:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_SCB */
 359:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 360:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 361:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /** @addtogroup CMSIS_CM3_SysTick CMSIS CM3 SysTick
 362:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   memory mapped structure for SysTick
 363:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   @{
 364:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
 365:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** typedef struct
 366:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** {
 367:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t CTRL;                         /*!< Offset: 0x00  SysTick Control and Status Registe
 368:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t LOAD;                         /*!< Offset: 0x04  SysTick Reload Value Register     
 369:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t VAL;                          /*!< Offset: 0x08  SysTick Current Value Register    
 370:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __I  uint32_t CALIB;                        /*!< Offset: 0x0C  SysTick Calibration Register      
 371:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** } SysTick_Type;
 372:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 373:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* SysTick Control / Status Register Definitions */
 374:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16                                             /*!< SysT
 375:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1ul << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 376:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 377:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2                                             /*!< SysT
 378:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1ul << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 379:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 380:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SysTick_CTRL_TICKINT_Pos            1                                             /*!< SysT
 381:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SysTick_CTRL_TICKINT_Msk           (1ul << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 382:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 383:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SysTick_CTRL_ENABLE_Pos             0                                             /*!< SysT
 384:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SysTick_CTRL_ENABLE_Msk            (1ul << SysTick_CTRL_ENABLE_Pos)               /*!< SysT
 385:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 386:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* SysTick Reload Register Definitions */
 387:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SysTick_LOAD_RELOAD_Pos             0                                             /*!< SysT
 388:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFul << SysTick_LOAD_RELOAD_Pos)        /*!< SysT
 389:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 390:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* SysTick Current Register Definitions */
 391:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SysTick_VAL_CURRENT_Pos             0                                             /*!< SysT
 392:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFul << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 393:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 394:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* SysTick Calibration Register Definitions */
 395:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SysTick_CALIB_NOREF_Pos            31                                             /*!< SysT
 396:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SysTick_CALIB_NOREF_Msk            (1ul << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 397:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 398:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SysTick_CALIB_SKEW_Pos             30                                             /*!< SysT
 399:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SysTick_CALIB_SKEW_Msk             (1ul << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 400:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 401:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SysTick_CALIB_TENMS_Pos             0                                             /*!< SysT
 402:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFul << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 403:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_SysTick */
 404:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 405:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 406:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /** @addtogroup CMSIS_CM3_ITM CMSIS CM3 ITM
 407:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   memory mapped structure for Instrumentation Trace Macrocell (ITM)
 408:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   @{
 409:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
 410:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** typedef struct
 411:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** {
 412:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __O  union
 413:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   {
 414:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****     __O  uint8_t    u8;                       /*!< Offset:       ITM Stimulus Port 8-bit           
 415:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****     __O  uint16_t   u16;                      /*!< Offset:       ITM Stimulus Port 16-bit          
 416:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****     __O  uint32_t   u32;                      /*!< Offset:       ITM Stimulus Port 32-bit          
 417:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   }  PORT [32];                               /*!< Offset: 0x00  ITM Stimulus Port Registers       
 418:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****        uint32_t RESERVED0[864];
 419:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t TER;                          /*!< Offset:       ITM Trace Enable Register         
 420:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****        uint32_t RESERVED1[15];
 421:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t TPR;                          /*!< Offset:       ITM Trace Privilege Register      
 422:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****        uint32_t RESERVED2[15];
 423:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t TCR;                          /*!< Offset:       ITM Trace Control Register        
 424:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****        uint32_t RESERVED3[29];
 425:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t IWR;                          /*!< Offset:       ITM Integration Write Register    
 426:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t IRR;                          /*!< Offset:       ITM Integration Read Register     
 427:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t IMCR;                         /*!< Offset:       ITM Integration Mode Control Regis
 428:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****        uint32_t RESERVED4[43];
 429:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t LAR;                          /*!< Offset:       ITM Lock Access Register          
 430:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t LSR;                          /*!< Offset:       ITM Lock Status Register          
 431:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****        uint32_t RESERVED5[6];
 432:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __I  uint32_t PID4;                         /*!< Offset:       ITM Peripheral Identification Regi
 433:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __I  uint32_t PID5;                         /*!< Offset:       ITM Peripheral Identification Regi
 434:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __I  uint32_t PID6;                         /*!< Offset:       ITM Peripheral Identification Regi
 435:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __I  uint32_t PID7;                         /*!< Offset:       ITM Peripheral Identification Regi
 436:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __I  uint32_t PID0;                         /*!< Offset:       ITM Peripheral Identification Regi
 437:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __I  uint32_t PID1;                         /*!< Offset:       ITM Peripheral Identification Regi
 438:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __I  uint32_t PID2;                         /*!< Offset:       ITM Peripheral Identification Regi
 439:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __I  uint32_t PID3;                         /*!< Offset:       ITM Peripheral Identification Regi
 440:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __I  uint32_t CID0;                         /*!< Offset:       ITM Component  Identification Regi
 441:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __I  uint32_t CID1;                         /*!< Offset:       ITM Component  Identification Regi
 442:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __I  uint32_t CID2;                         /*!< Offset:       ITM Component  Identification Regi
 443:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __I  uint32_t CID3;                         /*!< Offset:       ITM Component  Identification Regi
 444:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** } ITM_Type;
 445:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 446:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* ITM Trace Privilege Register Definitions */
 447:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM_TPR_PRIVMASK_Pos                0                                             /*!< ITM 
 448:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM_TPR_PRIVMASK_Msk               (0xFul << ITM_TPR_PRIVMASK_Pos)                /*!< ITM 
 449:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 450:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* ITM Trace Control Register Definitions */
 451:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM_TCR_BUSY_Pos                   23                                             /*!< ITM 
 452:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM_TCR_BUSY_Msk                   (1ul << ITM_TCR_BUSY_Pos)                      /*!< ITM 
 453:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 454:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM_TCR_ATBID_Pos                  16                                             /*!< ITM 
 455:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM_TCR_ATBID_Msk                  (0x7Ful << ITM_TCR_ATBID_Pos)                  /*!< ITM 
 456:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 457:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM_TCR_TSPrescale_Pos              8                                             /*!< ITM 
 458:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM_TCR_TSPrescale_Msk             (3ul << ITM_TCR_TSPrescale_Pos)                /*!< ITM 
 459:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 460:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM_TCR_SWOENA_Pos                  4                                             /*!< ITM 
 461:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM_TCR_SWOENA_Msk                 (1ul << ITM_TCR_SWOENA_Pos)                    /*!< ITM 
 462:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 463:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM_TCR_DWTENA_Pos                  3                                             /*!< ITM 
 464:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM_TCR_DWTENA_Msk                 (1ul << ITM_TCR_DWTENA_Pos)                    /*!< ITM 
 465:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 466:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM_TCR_SYNCENA_Pos                 2                                             /*!< ITM 
 467:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM_TCR_SYNCENA_Msk                (1ul << ITM_TCR_SYNCENA_Pos)                   /*!< ITM 
 468:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 469:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM_TCR_TSENA_Pos                   1                                             /*!< ITM 
 470:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM_TCR_TSENA_Msk                  (1ul << ITM_TCR_TSENA_Pos)                     /*!< ITM 
 471:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 472:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM_TCR_ITMENA_Pos                  0                                             /*!< ITM 
 473:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM_TCR_ITMENA_Msk                 (1ul << ITM_TCR_ITMENA_Pos)                    /*!< ITM 
 474:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 475:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* ITM Integration Write Register Definitions */
 476:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM_IWR_ATVALIDM_Pos                0                                             /*!< ITM 
 477:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM_IWR_ATVALIDM_Msk               (1ul << ITM_IWR_ATVALIDM_Pos)                  /*!< ITM 
 478:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 479:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* ITM Integration Read Register Definitions */
 480:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM_IRR_ATREADYM_Pos                0                                             /*!< ITM 
 481:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM_IRR_ATREADYM_Msk               (1ul << ITM_IRR_ATREADYM_Pos)                  /*!< ITM 
 482:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 483:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* ITM Integration Mode Control Register Definitions */
 484:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM_IMCR_INTEGRATION_Pos            0                                             /*!< ITM 
 485:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM_IMCR_INTEGRATION_Msk           (1ul << ITM_IMCR_INTEGRATION_Pos)              /*!< ITM 
 486:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 487:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* ITM Lock Status Register Definitions */
 488:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM_LSR_ByteAcc_Pos                 2                                             /*!< ITM 
 489:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM_LSR_ByteAcc_Msk                (1ul << ITM_LSR_ByteAcc_Pos)                   /*!< ITM 
 490:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 491:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM_LSR_Access_Pos                  1                                             /*!< ITM 
 492:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM_LSR_Access_Msk                 (1ul << ITM_LSR_Access_Pos)                    /*!< ITM 
 493:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 494:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM_LSR_Present_Pos                 0                                             /*!< ITM 
 495:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM_LSR_Present_Msk                (1ul << ITM_LSR_Present_Pos)                   /*!< ITM 
 496:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_ITM */
 497:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 498:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 499:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /** @addtogroup CMSIS_CM3_InterruptType CMSIS CM3 Interrupt Type
 500:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   memory mapped structure for Interrupt Type
 501:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   @{
 502:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
 503:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** typedef struct
 504:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** {
 505:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****        uint32_t RESERVED0;
 506:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __I  uint32_t ICTR;                         /*!< Offset: 0x04  Interrupt Control Type Register */
 507:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #if ((defined __CM3_REV) && (__CM3_REV >= 0x200))
 508:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t ACTLR;                        /*!< Offset: 0x08  Auxiliary Control Register      */
 509:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #else
 510:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****        uint32_t RESERVED1;
 511:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #endif
 512:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** } InterruptType_Type;
 513:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 514:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* Interrupt Controller Type Register Definitions */
 515:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define InterruptType_ICTR_INTLINESNUM_Pos  0                                             /*!< Inte
 516:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define InterruptType_ICTR_INTLINESNUM_Msk (0x1Ful << InterruptType_ICTR_INTLINESNUM_Pos) /*!< Inte
 517:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 518:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* Auxiliary Control Register Definitions */
 519:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define InterruptType_ACTLR_DISFOLD_Pos     2                                             /*!< Inte
 520:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define InterruptType_ACTLR_DISFOLD_Msk    (1ul << InterruptType_ACTLR_DISFOLD_Pos)       /*!< Inte
 521:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 522:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define InterruptType_ACTLR_DISDEFWBUF_Pos  1                                             /*!< Inte
 523:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define InterruptType_ACTLR_DISDEFWBUF_Msk (1ul << InterruptType_ACTLR_DISDEFWBUF_Pos)    /*!< Inte
 524:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 525:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define InterruptType_ACTLR_DISMCYCINT_Pos  0                                             /*!< Inte
 526:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define InterruptType_ACTLR_DISMCYCINT_Msk (1ul << InterruptType_ACTLR_DISMCYCINT_Pos)    /*!< Inte
 527:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_InterruptType */
 528:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 529:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 530:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1)
 531:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /** @addtogroup CMSIS_CM3_MPU CMSIS CM3 MPU
 532:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   memory mapped structure for Memory Protection Unit (MPU)
 533:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   @{
 534:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
 535:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** typedef struct
 536:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** {
 537:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __I  uint32_t TYPE;                         /*!< Offset: 0x00  MPU Type Register                 
 538:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t CTRL;                         /*!< Offset: 0x04  MPU Control Register              
 539:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t RNR;                          /*!< Offset: 0x08  MPU Region RNRber Register        
 540:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t RBAR;                         /*!< Offset: 0x0C  MPU Region Base Address Register  
 541:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t RASR;                         /*!< Offset: 0x10  MPU Region Attribute and Size Regi
 542:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t RBAR_A1;                      /*!< Offset: 0x14  MPU Alias 1 Region Base Address Re
 543:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t RASR_A1;                      /*!< Offset: 0x18  MPU Alias 1 Region Attribute and S
 544:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t RBAR_A2;                      /*!< Offset: 0x1C  MPU Alias 2 Region Base Address Re
 545:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t RASR_A2;                      /*!< Offset: 0x20  MPU Alias 2 Region Attribute and S
 546:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t RBAR_A3;                      /*!< Offset: 0x24  MPU Alias 3 Region Base Address Re
 547:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t RASR_A3;                      /*!< Offset: 0x28  MPU Alias 3 Region Attribute and S
 548:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** } MPU_Type;
 549:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 550:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* MPU Type Register */
 551:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_TYPE_IREGION_Pos               16                                             /*!< MPU 
 552:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_TYPE_IREGION_Msk               (0xFFul << MPU_TYPE_IREGION_Pos)               /*!< MPU 
 553:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 554:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_TYPE_DREGION_Pos                8                                             /*!< MPU 
 555:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_TYPE_DREGION_Msk               (0xFFul << MPU_TYPE_DREGION_Pos)               /*!< MPU 
 556:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 557:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_TYPE_SEPARATE_Pos               0                                             /*!< MPU 
 558:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_TYPE_SEPARATE_Msk              (1ul << MPU_TYPE_SEPARATE_Pos)                 /*!< MPU 
 559:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 560:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* MPU Control Register */
 561:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_CTRL_PRIVDEFENA_Pos             2                                             /*!< MPU 
 562:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_CTRL_PRIVDEFENA_Msk            (1ul << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU 
 563:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 564:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_CTRL_HFNMIENA_Pos               1                                             /*!< MPU 
 565:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_CTRL_HFNMIENA_Msk              (1ul << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU 
 566:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 567:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_CTRL_ENABLE_Pos                 0                                             /*!< MPU 
 568:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_CTRL_ENABLE_Msk                (1ul << MPU_CTRL_ENABLE_Pos)                   /*!< MPU 
 569:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 570:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* MPU Region Number Register */
 571:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_RNR_REGION_Pos                  0                                             /*!< MPU 
 572:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_RNR_REGION_Msk                 (0xFFul << MPU_RNR_REGION_Pos)                 /*!< MPU 
 573:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 574:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* MPU Region Base Address Register */
 575:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_RBAR_ADDR_Pos                   5                                             /*!< MPU 
 576:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_RBAR_ADDR_Msk                  (0x7FFFFFFul << MPU_RBAR_ADDR_Pos)             /*!< MPU 
 577:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 578:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_RBAR_VALID_Pos                  4                                             /*!< MPU 
 579:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_RBAR_VALID_Msk                 (1ul << MPU_RBAR_VALID_Pos)                    /*!< MPU 
 580:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 581:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_RBAR_REGION_Pos                 0                                             /*!< MPU 
 582:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_RBAR_REGION_Msk                (0xFul << MPU_RBAR_REGION_Pos)                 /*!< MPU 
 583:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 584:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* MPU Region Attribute and Size Register */
 585:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_RASR_XN_Pos                    28                                             /*!< MPU 
 586:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_RASR_XN_Msk                    (1ul << MPU_RASR_XN_Pos)                       /*!< MPU 
 587:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 588:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_RASR_AP_Pos                    24                                             /*!< MPU 
 589:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_RASR_AP_Msk                    (7ul << MPU_RASR_AP_Pos)                       /*!< MPU 
 590:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 591:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_RASR_TEX_Pos                   19                                             /*!< MPU 
 592:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_RASR_TEX_Msk                   (7ul << MPU_RASR_TEX_Pos)                      /*!< MPU 
 593:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 594:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_RASR_S_Pos                     18                                             /*!< MPU 
 595:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_RASR_S_Msk                     (1ul << MPU_RASR_S_Pos)                        /*!< MPU 
 596:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 597:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_RASR_C_Pos                     17                                             /*!< MPU 
 598:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_RASR_C_Msk                     (1ul << MPU_RASR_C_Pos)                        /*!< MPU 
 599:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 600:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_RASR_B_Pos                     16                                             /*!< MPU 
 601:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_RASR_B_Msk                     (1ul << MPU_RASR_B_Pos)                        /*!< MPU 
 602:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 603:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_RASR_SRD_Pos                    8                                             /*!< MPU 
 604:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_RASR_SRD_Msk                   (0xFFul << MPU_RASR_SRD_Pos)                   /*!< MPU 
 605:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 606:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_RASR_SIZE_Pos                   1                                             /*!< MPU 
 607:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_RASR_SIZE_Msk                  (0x1Ful << MPU_RASR_SIZE_Pos)                  /*!< MPU 
 608:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 609:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_RASR_ENA_Pos                     0                                            /*!< MPU 
 610:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define MPU_RASR_ENA_Msk                    (0x1Ful << MPU_RASR_ENA_Pos)                  /*!< MPU 
 611:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 612:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_MPU */
 613:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #endif
 614:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 615:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 616:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /** @addtogroup CMSIS_CM3_CoreDebug CMSIS CM3 Core Debug
 617:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   memory mapped structure for Core Debug Register
 618:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   @{
 619:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
 620:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** typedef struct
 621:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** {
 622:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t DHCSR;                        /*!< Offset: 0x00  Debug Halting Control and Status R
 623:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __O  uint32_t DCRSR;                        /*!< Offset: 0x04  Debug Core Register Selector Regis
 624:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t DCRDR;                        /*!< Offset: 0x08  Debug Core Register Data Register 
 625:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t DEMCR;                        /*!< Offset: 0x0C  Debug Exception and Monitor Contro
 626:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** } CoreDebug_Type;
 627:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 628:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* Debug Halting Control and Status Register */
 629:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DHCSR_DBGKEY_Pos         16                                             /*!< Core
 630:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFul << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< Core
 631:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 632:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     25                                             /*!< Core
 633:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1ul << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< Core
 634:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 635:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24                                             /*!< Core
 636:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1ul << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< Core
 637:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 638:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       19                                             /*!< Core
 639:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       (1ul << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< Core
 640:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 641:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DHCSR_S_SLEEP_Pos        18                                             /*!< Core
 642:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DHCSR_S_SLEEP_Msk        (1ul << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< Core
 643:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 644:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DHCSR_S_HALT_Pos         17                                             /*!< Core
 645:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DHCSR_S_HALT_Msk         (1ul << CoreDebug_DHCSR_S_HALT_Pos)            /*!< Core
 646:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 647:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DHCSR_S_REGRDY_Pos       16                                             /*!< Core
 648:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DHCSR_S_REGRDY_Msk       (1ul << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< Core
 649:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 650:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Pos     5                                             /*!< Core
 651:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Msk    (1ul << CoreDebug_DHCSR_C_SNAPSTALL_Pos)       /*!< Core
 652:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 653:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DHCSR_C_MASKINTS_Pos      3                                             /*!< Core
 654:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     (1ul << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< Core
 655:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 656:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DHCSR_C_STEP_Pos          2                                             /*!< Core
 657:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DHCSR_C_STEP_Msk         (1ul << CoreDebug_DHCSR_C_STEP_Pos)            /*!< Core
 658:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 659:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DHCSR_C_HALT_Pos          1                                             /*!< Core
 660:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DHCSR_C_HALT_Msk         (1ul << CoreDebug_DHCSR_C_HALT_Pos)            /*!< Core
 661:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 662:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos       0                                             /*!< Core
 663:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1ul << CoreDebug_DHCSR_C_DEBUGEN_Pos)         /*!< Core
 664:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 665:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* Debug Core Register Selector Register */
 666:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DCRSR_REGWnR_Pos         16                                             /*!< Core
 667:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DCRSR_REGWnR_Msk         (1ul << CoreDebug_DCRSR_REGWnR_Pos)            /*!< Core
 668:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 669:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DCRSR_REGSEL_Pos          0                                             /*!< Core
 670:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DCRSR_REGSEL_Msk         (0x1Ful << CoreDebug_DCRSR_REGSEL_Pos)         /*!< Core
 671:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 672:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* Debug Exception and Monitor Control Register */
 673:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_TRCENA_Pos         24                                             /*!< Core
 674:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_TRCENA_Msk         (1ul << CoreDebug_DEMCR_TRCENA_Pos)            /*!< Core
 675:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 676:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_MON_REQ_Pos        19                                             /*!< Core
 677:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_MON_REQ_Msk        (1ul << CoreDebug_DEMCR_MON_REQ_Pos)           /*!< Core
 678:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 679:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_MON_STEP_Pos       18                                             /*!< Core
 680:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_MON_STEP_Msk       (1ul << CoreDebug_DEMCR_MON_STEP_Pos)          /*!< Core
 681:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 682:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_MON_PEND_Pos       17                                             /*!< Core
 683:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_MON_PEND_Msk       (1ul << CoreDebug_DEMCR_MON_PEND_Pos)          /*!< Core
 684:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 685:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_MON_EN_Pos         16                                             /*!< Core
 686:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_MON_EN_Msk         (1ul << CoreDebug_DEMCR_MON_EN_Pos)            /*!< Core
 687:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 688:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     10                                             /*!< Core
 689:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     (1ul << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< Core
 690:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 691:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_VC_INTERR_Pos       9                                             /*!< Core
 692:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_VC_INTERR_Msk      (1ul << CoreDebug_DEMCR_VC_INTERR_Pos)         /*!< Core
 693:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 694:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_VC_BUSERR_Pos       8                                             /*!< Core
 695:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_VC_BUSERR_Msk      (1ul << CoreDebug_DEMCR_VC_BUSERR_Pos)         /*!< Core
 696:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 697:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_VC_STATERR_Pos      7                                             /*!< Core
 698:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_VC_STATERR_Msk     (1ul << CoreDebug_DEMCR_VC_STATERR_Pos)        /*!< Core
 699:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 700:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_VC_CHKERR_Pos       6                                             /*!< Core
 701:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_VC_CHKERR_Msk      (1ul << CoreDebug_DEMCR_VC_CHKERR_Pos)         /*!< Core
 702:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 703:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Pos      5                                             /*!< Core
 704:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Msk     (1ul << CoreDebug_DEMCR_VC_NOCPERR_Pos)        /*!< Core
 705:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 706:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_VC_MMERR_Pos        4                                             /*!< Core
 707:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_VC_MMERR_Msk       (1ul << CoreDebug_DEMCR_VC_MMERR_Pos)          /*!< Core
 708:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 709:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_VC_CORERESET_Pos    0                                             /*!< Core
 710:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1ul << CoreDebug_DEMCR_VC_CORERESET_Pos)      /*!< Core
 711:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_CoreDebug */
 712:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 713:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 714:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* Memory mapping of Cortex-M3 Hardware */
 715:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCS_BASE            (0xE000E000)                              /*!< System Control Space Bas
 716:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM_BASE            (0xE0000000)                              /*!< ITM Base Address        
 717:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_BASE      (0xE000EDF0)                              /*!< Core Debug Base Address 
 718:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SysTick_BASE        (SCS_BASE +  0x0010)                      /*!< SysTick Base Address    
 719:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define NVIC_BASE           (SCS_BASE +  0x0100)                      /*!< NVIC Base Address       
 720:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB_BASE            (SCS_BASE +  0x0D00)                      /*!< System Control Block Bas
 721:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 722:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define InterruptType       ((InterruptType_Type *) SCS_BASE)         /*!< Interrupt Type Register 
 723:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SCB                 ((SCB_Type *)           SCB_BASE)         /*!< SCB configuration struct
 724:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define SysTick             ((SysTick_Type *)       SysTick_BASE)     /*!< SysTick configuration st
 725:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define NVIC                ((NVIC_Type *)          NVIC_BASE)        /*!< NVIC configuration struc
 726:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define ITM                 ((ITM_Type *)           ITM_BASE)         /*!< ITM configuration struct
 727:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
 728:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 729:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1)
 730:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   #define MPU_BASE          (SCS_BASE +  0x0D90)                      /*!< Memory Protection Unit  
 731:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   #define MPU               ((MPU_Type*)            MPU_BASE)         /*!< Memory Protection Unit  
 732:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #endif
 733:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 734:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_core_register */
 735:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 736:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 737:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /*******************************************************************************
 738:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *                Hardware Abstraction Layer
 739:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  ******************************************************************************/
 740:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 741:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #if defined ( __CC_ARM   )
 742:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
 743:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
 744:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 745:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #elif defined ( __ICCARM__ )
 746:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   #define __ASM           __asm                                       /*!< asm keyword for IAR Comp
 747:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   #define __INLINE        inline                                      /*!< inline keyword for IAR C
 748:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 749:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #elif defined   (  __GNUC__  )
 750:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
 751:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
 752:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 753:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #elif defined   (  __TASKING__  )
 754:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
 755:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
 756:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 757:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #endif
 758:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 759:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 760:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* ###################  Compiler specific Intrinsics  ########################### */
 761:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 762:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #if defined ( __CC_ARM   ) /*------------------RealView Compiler -----------------*/
 763:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* ARM armcc specific functions */
 764:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 765:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define __enable_fault_irq                __enable_fiq
 766:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define __disable_fault_irq               __disable_fiq
 767:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 768:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define __NOP                             __nop
 769:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define __WFI                             __wfi
 770:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define __WFE                             __wfe
 771:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define __SEV                             __sev
 772:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define __ISB()                           __isb(0)
 773:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define __DSB()                           __dsb(0)
 774:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define __DMB()                           __dmb(0)
 775:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define __REV                             __rev
 776:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define __RBIT                            __rbit
 777:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define __LDREXB(ptr)                     ((unsigned char ) __ldrex(ptr))
 778:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define __LDREXH(ptr)                     ((unsigned short) __ldrex(ptr))
 779:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define __LDREXW(ptr)                     ((unsigned int  ) __ldrex(ptr))
 780:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 781:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 782:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 783:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 784:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 785:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* intrinsic unsigned long long __ldrexd(volatile void *ptr) */
 786:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* intrinsic int __strexd(unsigned long long val, volatile void *ptr) */
 787:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* intrinsic void __enable_irq();     */
 788:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* intrinsic void __disable_irq();    */
 789:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 790:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 791:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
 792:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Return the Process Stack Pointer
 793:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 794:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return ProcessStackPointer
 795:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 796:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Return the actual process stack pointer
 797:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
 798:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern uint32_t __get_PSP(void);
 799:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 800:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
 801:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Set the Process Stack Pointer
 802:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 803:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  topOfProcStack  Process Stack Pointer
 804:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 805:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Assign the value ProcessStackPointer to the MSP
 806:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * (process stack pointer) Cortex processor register
 807:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
 808:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern void __set_PSP(uint32_t topOfProcStack);
 809:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 810:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
 811:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Return the Main Stack Pointer
 812:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 813:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return Main Stack Pointer
 814:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 815:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Return the current value of the MSP (main stack pointer)
 816:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Cortex processor register
 817:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
 818:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern uint32_t __get_MSP(void);
 819:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 820:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
 821:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Set the Main Stack Pointer
 822:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 823:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  topOfMainStack  Main Stack Pointer
 824:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 825:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Assign the value mainStackPointer to the MSP
 826:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * (main stack pointer) Cortex processor register
 827:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
 828:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern void __set_MSP(uint32_t topOfMainStack);
 829:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 830:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
 831:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Reverse byte order in unsigned short value
 832:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 833:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param   value  value to reverse
 834:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return         reversed value
 835:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 836:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Reverse byte order in unsigned short value
 837:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
 838:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern uint32_t __REV16(uint16_t value);
 839:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 840:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
 841:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Reverse byte order in signed short value with sign extension to integer
 842:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 843:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param   value  value to reverse
 844:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return         reversed value
 845:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 846:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Reverse byte order in signed short value with sign extension to integer
 847:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
 848:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern int32_t __REVSH(int16_t value);
 849:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 850:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 851:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #if (__ARMCC_VERSION < 400000)
 852:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 853:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
 854:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Remove the exclusive lock created by ldrex
 855:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 856:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Removes the exclusive lock which is created by ldrex.
 857:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
 858:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern void __CLREX(void);
 859:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 860:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
 861:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Return the Base Priority value
 862:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 863:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return BasePriority
 864:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 865:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Return the content of the base priority register
 866:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
 867:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern uint32_t __get_BASEPRI(void);
 868:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 869:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
 870:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Set the Base Priority value
 871:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 872:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  basePri  BasePriority
 873:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 874:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Set the base priority register
 875:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
 876:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern void __set_BASEPRI(uint32_t basePri);
 877:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 878:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
 879:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Return the Priority Mask value
 880:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 881:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return PriMask
 882:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 883:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Return state of the priority mask bit from the priority mask register
 884:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
 885:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern uint32_t __get_PRIMASK(void);
 886:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 887:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
 888:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Set the Priority Mask value
 889:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 890:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param   priMask  PriMask
 891:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 892:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Set the priority mask bit in the priority mask register
 893:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
 894:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern void __set_PRIMASK(uint32_t priMask);
 895:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 896:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
 897:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Return the Fault Mask value
 898:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 899:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return FaultMask
 900:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 901:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Return the content of the fault mask register
 902:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
 903:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern uint32_t __get_FAULTMASK(void);
 904:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 905:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
 906:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Set the Fault Mask value
 907:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 908:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  faultMask faultMask value
 909:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 910:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Set the fault mask register
 911:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
 912:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern void __set_FAULTMASK(uint32_t faultMask);
 913:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 914:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
 915:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Return the Control Register value
 916:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 917:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return Control value
 918:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 919:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Return the content of the control register
 920:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
 921:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern uint32_t __get_CONTROL(void);
 922:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 923:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
 924:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Set the Control Register value
 925:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 926:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  control  Control value
 927:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 928:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Set the control register
 929:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
 930:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern void __set_CONTROL(uint32_t control);
 931:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 932:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #else  /* (__ARMCC_VERSION >= 400000)  */
 933:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 934:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
 935:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Remove the exclusive lock created by ldrex
 936:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 937:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Removes the exclusive lock which is created by ldrex.
 938:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
 939:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define __CLREX                           __clrex
 940:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 941:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
 942:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Return the Base Priority value
 943:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 944:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return BasePriority
 945:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 946:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Return the content of the base priority register
 947:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
 948:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** static __INLINE uint32_t  __get_BASEPRI(void)
 949:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** {
 950:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   register uint32_t __regBasePri         __ASM("basepri");
 951:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   return(__regBasePri);
 952:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** }
 953:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 954:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
 955:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Set the Base Priority value
 956:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 957:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  basePri  BasePriority
 958:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 959:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Set the base priority register
 960:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
 961:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** static __INLINE void __set_BASEPRI(uint32_t basePri)
 962:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** {
 963:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   register uint32_t __regBasePri         __ASM("basepri");
 964:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __regBasePri = (basePri & 0xff);
 965:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** }
 966:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 967:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
 968:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Return the Priority Mask value
 969:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 970:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return PriMask
 971:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 972:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Return state of the priority mask bit from the priority mask register
 973:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
 974:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** static __INLINE uint32_t __get_PRIMASK(void)
 975:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** {
 976:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   register uint32_t __regPriMask         __ASM("primask");
 977:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   return(__regPriMask);
 978:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** }
 979:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 980:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
 981:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Set the Priority Mask value
 982:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 983:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  priMask  PriMask
 984:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 985:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Set the priority mask bit in the priority mask register
 986:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
 987:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** static __INLINE void __set_PRIMASK(uint32_t priMask)
 988:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** {
 989:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   register uint32_t __regPriMask         __ASM("primask");
 990:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __regPriMask = (priMask);
 991:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** }
 992:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
 993:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
 994:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Return the Fault Mask value
 995:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 996:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return FaultMask
 997:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
 998:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Return the content of the fault mask register
 999:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1000:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** static __INLINE uint32_t __get_FAULTMASK(void)
1001:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** {
1002:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   register uint32_t __regFaultMask       __ASM("faultmask");
1003:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   return(__regFaultMask);
1004:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** }
1005:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1006:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1007:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Set the Fault Mask value
1008:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1009:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  faultMask  faultMask value
1010:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1011:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Set the fault mask register
1012:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1013:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** static __INLINE void __set_FAULTMASK(uint32_t faultMask)
1014:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** {
1015:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   register uint32_t __regFaultMask       __ASM("faultmask");
1016:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __regFaultMask = (faultMask & 1);
1017:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** }
1018:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1019:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1020:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Return the Control Register value
1021:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1022:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return Control value
1023:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1024:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Return the content of the control register
1025:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1026:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** static __INLINE uint32_t __get_CONTROL(void)
1027:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** {
1028:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   register uint32_t __regControl         __ASM("control");
1029:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   return(__regControl);
1030:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** }
1031:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1032:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1033:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Set the Control Register value
1034:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1035:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  control  Control value
1036:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1037:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Set the control register
1038:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1039:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** static __INLINE void __set_CONTROL(uint32_t control)
1040:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** {
1041:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   register uint32_t __regControl         __ASM("control");
1042:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   __regControl = control;
1043:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** }
1044:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1045:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #endif /* __ARMCC_VERSION  */
1046:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1047:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1048:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1049:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #elif (defined (__ICCARM__)) /*------------------ ICC Compiler -------------------*/
1050:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* IAR iccarm specific functions */
1051:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1052:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define __enable_irq                              __enable_interrupt        /*!< global Interrupt e
1053:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define __disable_irq                             __disable_interrupt       /*!< global Interrupt d
1054:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1055:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** static __INLINE void __enable_fault_irq()         { __ASM ("cpsie f"); }
1056:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** static __INLINE void __disable_fault_irq()        { __ASM ("cpsid f"); }
1057:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1058:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #define __NOP                                     __no_operation            /*!< no operation intri
1059:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** static __INLINE  void __WFI()                     { __ASM ("wfi"); }
1060:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** static __INLINE  void __WFE()                     { __ASM ("wfe"); }
1061:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** static __INLINE  void __SEV()                     { __ASM ("sev"); }
1062:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** static __INLINE  void __CLREX()                   { __ASM ("clrex"); }
1063:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1064:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* intrinsic void __ISB(void)                                     */
1065:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* intrinsic void __DSB(void)                                     */
1066:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* intrinsic void __DMB(void)                                     */
1067:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* intrinsic void __set_PRIMASK();                                */
1068:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* intrinsic void __get_PRIMASK();                                */
1069:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* intrinsic void __set_FAULTMASK();                              */
1070:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* intrinsic void __get_FAULTMASK();                              */
1071:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* intrinsic uint32_t __REV(uint32_t value);                      */
1072:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* intrinsic uint32_t __REVSH(uint32_t value);                    */
1073:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* intrinsic unsigned long __STREX(unsigned long, unsigned long); */
1074:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* intrinsic unsigned long __LDREX(unsigned long *);              */
1075:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1076:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1077:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1078:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Return the Process Stack Pointer
1079:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1080:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return ProcessStackPointer
1081:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1082:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Return the actual process stack pointer
1083:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1084:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern uint32_t __get_PSP(void);
1085:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1086:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1087:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Set the Process Stack Pointer
1088:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1089:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  topOfProcStack  Process Stack Pointer
1090:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1091:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Assign the value ProcessStackPointer to the MSP
1092:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * (process stack pointer) Cortex processor register
1093:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1094:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern void __set_PSP(uint32_t topOfProcStack);
1095:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1096:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1097:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Return the Main Stack Pointer
1098:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1099:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return Main Stack Pointer
1100:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1101:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Return the current value of the MSP (main stack pointer)
1102:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Cortex processor register
1103:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1104:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern uint32_t __get_MSP(void);
1105:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1106:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1107:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Set the Main Stack Pointer
1108:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1109:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  topOfMainStack  Main Stack Pointer
1110:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1111:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Assign the value mainStackPointer to the MSP
1112:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * (main stack pointer) Cortex processor register
1113:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1114:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern void __set_MSP(uint32_t topOfMainStack);
1115:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1116:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1117:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Reverse byte order in unsigned short value
1118:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1119:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  value  value to reverse
1120:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return        reversed value
1121:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1122:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Reverse byte order in unsigned short value
1123:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1124:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern uint32_t __REV16(uint16_t value);
1125:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1126:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1127:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Reverse bit order of value
1128:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1129:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  value  value to reverse
1130:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return        reversed value
1131:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1132:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Reverse bit order of value
1133:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1134:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern uint32_t __RBIT(uint32_t value);
1135:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1136:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1137:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  LDR Exclusive (8 bit)
1138:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1139:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  *addr  address pointer
1140:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return        value of (*address)
1141:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1142:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Exclusive LDR command for 8 bit values)
1143:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1144:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern uint8_t __LDREXB(uint8_t *addr);
1145:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1146:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1147:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  LDR Exclusive (16 bit)
1148:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1149:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  *addr  address pointer
1150:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return        value of (*address)
1151:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1152:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Exclusive LDR command for 16 bit values
1153:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1154:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern uint16_t __LDREXH(uint16_t *addr);
1155:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1156:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1157:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  LDR Exclusive (32 bit)
1158:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1159:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  *addr  address pointer
1160:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return        value of (*address)
1161:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1162:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Exclusive LDR command for 32 bit values
1163:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1164:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern uint32_t __LDREXW(uint32_t *addr);
1165:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1166:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1167:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  STR Exclusive (8 bit)
1168:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1169:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  value  value to store
1170:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  *addr  address pointer
1171:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return        successful / failed
1172:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1173:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Exclusive STR command for 8 bit values
1174:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1175:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern uint32_t __STREXB(uint8_t value, uint8_t *addr);
1176:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1177:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1178:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  STR Exclusive (16 bit)
1179:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1180:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  value  value to store
1181:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  *addr  address pointer
1182:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return        successful / failed
1183:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1184:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Exclusive STR command for 16 bit values
1185:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1186:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern uint32_t __STREXH(uint16_t value, uint16_t *addr);
1187:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1188:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1189:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  STR Exclusive (32 bit)
1190:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1191:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  value  value to store
1192:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  *addr  address pointer
1193:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return        successful / failed
1194:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1195:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Exclusive STR command for 32 bit values
1196:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1197:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern uint32_t __STREXW(uint32_t value, uint32_t *addr);
1198:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1199:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1200:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1201:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #elif (defined (__GNUC__)) /*------------------ GNU Compiler ---------------------*/
1202:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* GNU gcc specific functions */
1203:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1204:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** static __INLINE void __enable_irq()               { __ASM volatile ("cpsie i"); }
1205:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** static __INLINE void __disable_irq()              { __ASM volatile ("cpsid i"); }
1206:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1207:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** static __INLINE void __enable_fault_irq()         { __ASM volatile ("cpsie f"); }
1208:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** static __INLINE void __disable_fault_irq()        { __ASM volatile ("cpsid f"); }
1209:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1210:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** static __INLINE void __NOP()                      { __ASM volatile ("nop"); }
1211:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** static __INLINE void __WFI()                      { __ASM volatile ("wfi"); }
1212:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** static __INLINE void __WFE()                      { __ASM volatile ("wfe"); }
1213:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** static __INLINE void __SEV()                      { __ASM volatile ("sev"); }
1214:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** static __INLINE void __ISB()                      { __ASM volatile ("isb"); }
1215:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** static __INLINE void __DSB()                      { __ASM volatile ("dsb"); }
1216:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** static __INLINE void __DMB()                      { __ASM volatile ("dmb"); }
1217:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** static __INLINE void __CLREX()                    { __ASM volatile ("clrex"); }
1218:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1219:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1220:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1221:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Return the Process Stack Pointer
1222:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1223:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return ProcessStackPointer
1224:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1225:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Return the actual process stack pointer
1226:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1227:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern uint32_t __get_PSP(void);
1228:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1229:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1230:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Set the Process Stack Pointer
1231:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1232:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  topOfProcStack  Process Stack Pointer
1233:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1234:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Assign the value ProcessStackPointer to the MSP
1235:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * (process stack pointer) Cortex processor register
1236:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1237:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern void __set_PSP(uint32_t topOfProcStack);
1238:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1239:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1240:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Return the Main Stack Pointer
1241:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1242:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return Main Stack Pointer
1243:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1244:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Return the current value of the MSP (main stack pointer)
1245:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Cortex processor register
1246:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1247:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern uint32_t __get_MSP(void);
1248:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1249:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1250:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Set the Main Stack Pointer
1251:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1252:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  topOfMainStack  Main Stack Pointer
1253:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1254:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Assign the value mainStackPointer to the MSP
1255:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * (main stack pointer) Cortex processor register
1256:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1257:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern void __set_MSP(uint32_t topOfMainStack);
1258:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1259:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1260:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Return the Base Priority value
1261:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1262:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return BasePriority
1263:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1264:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Return the content of the base priority register
1265:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1266:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern uint32_t __get_BASEPRI(void);
1267:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1268:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1269:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Set the Base Priority value
1270:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1271:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  basePri  BasePriority
1272:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1273:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Set the base priority register
1274:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1275:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern void __set_BASEPRI(uint32_t basePri);
1276:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1277:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1278:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Return the Priority Mask value
1279:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1280:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return PriMask
1281:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1282:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Return state of the priority mask bit from the priority mask register
1283:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1284:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern uint32_t  __get_PRIMASK(void);
1285:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1286:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1287:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Set the Priority Mask value
1288:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1289:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  priMask  PriMask
1290:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1291:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Set the priority mask bit in the priority mask register
1292:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1293:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern void __set_PRIMASK(uint32_t priMask);
1294:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1295:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1296:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Return the Fault Mask value
1297:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1298:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return FaultMask
1299:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1300:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Return the content of the fault mask register
1301:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1302:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern uint32_t __get_FAULTMASK(void);
1303:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1304:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1305:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Set the Fault Mask value
1306:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1307:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  faultMask  faultMask value
1308:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1309:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Set the fault mask register
1310:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1311:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern void __set_FAULTMASK(uint32_t faultMask);
1312:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1313:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1314:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Return the Control Register value
1315:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** *
1316:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** *  @return Control value
1317:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1318:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Return the content of the control register
1319:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1320:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern uint32_t __get_CONTROL(void);
1321:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1322:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1323:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Set the Control Register value
1324:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1325:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  control  Control value
1326:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1327:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Set the control register
1328:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1329:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern void __set_CONTROL(uint32_t control);
1330:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1331:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1332:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Reverse byte order in integer value
1333:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1334:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  value  value to reverse
1335:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return        reversed value
1336:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1337:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Reverse byte order in integer value
1338:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1339:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern uint32_t __REV(uint32_t value);
1340:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1341:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1342:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Reverse byte order in unsigned short value
1343:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1344:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  value  value to reverse
1345:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return        reversed value
1346:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1347:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Reverse byte order in unsigned short value
1348:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1349:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern uint32_t __REV16(uint16_t value);
1350:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1351:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1352:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Reverse byte order in signed short value with sign extension to integer
1353:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1354:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  value  value to reverse
1355:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return        reversed value
1356:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1357:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Reverse byte order in signed short value with sign extension to integer
1358:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1359:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern int32_t __REVSH(int16_t value);
1360:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1361:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1362:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Reverse bit order of value
1363:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1364:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  value  value to reverse
1365:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return        reversed value
1366:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1367:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Reverse bit order of value
1368:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1369:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern uint32_t __RBIT(uint32_t value);
1370:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1371:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1372:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  LDR Exclusive (8 bit)
1373:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1374:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  *addr  address pointer
1375:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return        value of (*address)
1376:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1377:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Exclusive LDR command for 8 bit value
1378:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1379:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern uint8_t __LDREXB(uint8_t *addr);
1380:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1381:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1382:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  LDR Exclusive (16 bit)
1383:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1384:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  *addr  address pointer
1385:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return        value of (*address)
1386:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1387:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Exclusive LDR command for 16 bit values
1388:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1389:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern uint16_t __LDREXH(uint16_t *addr);
1390:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1391:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1392:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  LDR Exclusive (32 bit)
1393:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1394:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  *addr  address pointer
1395:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return        value of (*address)
1396:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1397:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Exclusive LDR command for 32 bit values
1398:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1399:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern uint32_t __LDREXW(uint32_t *addr);
1400:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1401:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1402:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  STR Exclusive (8 bit)
1403:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1404:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  value  value to store
1405:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  *addr  address pointer
1406:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return        successful / failed
1407:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1408:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Exclusive STR command for 8 bit values
1409:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1410:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern uint32_t __STREXB(uint8_t value, uint8_t *addr);
1411:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1412:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1413:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  STR Exclusive (16 bit)
1414:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1415:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  value  value to store
1416:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  *addr  address pointer
1417:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return        successful / failed
1418:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1419:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Exclusive STR command for 16 bit values
1420:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1421:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern uint32_t __STREXH(uint16_t value, uint16_t *addr);
1422:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1423:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1424:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  STR Exclusive (32 bit)
1425:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1426:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  value  value to store
1427:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  *addr  address pointer
1428:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return        successful / failed
1429:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1430:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Exclusive STR command for 32 bit values
1431:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1432:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** extern uint32_t __STREXW(uint32_t value, uint32_t *addr);
1433:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1434:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1435:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #elif (defined (__TASKING__)) /*------------------ TASKING Compiler ---------------------*/
1436:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* TASKING carm specific functions */
1437:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1438:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /*
1439:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * The CMSIS functions have been implemented as intrinsics in the compiler.
1440:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Please use "carm -?i" to get an up to date list of all instrinsics,
1441:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Including the CMSIS ones.
1442:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1443:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1444:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** #endif
1445:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1446:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1447:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /** @addtogroup CMSIS_CM3_Core_FunctionInterface CMSIS CM3 Core Function Interface
1448:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   Core  Function Interface containing:
1449:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   - Core NVIC Functions
1450:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   - Core SysTick Functions
1451:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   - Core Reset Functions
1452:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** */
1453:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /*@{*/
1454:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1455:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /* ##########################   NVIC functions  #################################### */
1456:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1457:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1458:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Set the Priority Grouping in NVIC Interrupt Controller
1459:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1460:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  PriorityGroup is priority grouping field
1461:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1462:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Set the priority grouping field using the required unlock sequence.
1463:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * The parameter priority_grouping is assigned to the field
1464:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * SCB->AIRCR [10:8] PRIGROUP field. Only values from 0..7 are used.
1465:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * In case of a conflict between priority grouping and available
1466:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.
1467:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1468:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** static __INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
1469:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** {
1470:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   uint32_t reg_value;
1471:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);                         /* only values 0..7 a
1472:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1473:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   reg_value  =  SCB->AIRCR;                                                   /* read old register 
1474:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to chan
1475:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   reg_value  =  (reg_value                       |
1476:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****                 (0x5FA << SCB_AIRCR_VECTKEY_Pos) |
1477:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****                 (PriorityGroupTmp << 8));                                     /* Insert write key a
1478:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   SCB->AIRCR =  reg_value;
1479:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** }
1480:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1481:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1482:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Get the Priority Grouping from NVIC Interrupt Controller
1483:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1484:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return priority grouping field
1485:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1486:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Get the priority grouping from NVIC Interrupt Controller.
1487:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * priority grouping is SCB->AIRCR [10:8] PRIGROUP field.
1488:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1489:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** static __INLINE uint32_t NVIC_GetPriorityGrouping(void)
1490:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** {
1491:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   return ((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos);   /* read priority grou
1492:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** }
1493:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1494:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1495:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Enable Interrupt in NVIC Interrupt Controller
1496:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1497:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  IRQn   The positive number of the external interrupt to enable
1498:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1499:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Enable a device specific interupt in the NVIC interrupt controller.
1500:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * The interrupt number cannot be a negative value.
1501:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1502:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
1503:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** {
1504:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
1505:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** }
1506:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1507:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1508:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Disable the interrupt line for external interrupt specified
1509:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1510:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  IRQn   The positive number of the external interrupt to disable
1511:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1512:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Disable a device specific interupt in the NVIC interrupt controller.
1513:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * The interrupt number cannot be a negative value.
1514:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1515:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
1516:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** {
1517:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
1518:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** }
1519:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1520:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1521:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Read the interrupt pending bit for a device specific interrupt source
1522:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1523:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  IRQn    The number of the device specifc interrupt
1524:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return         1 = interrupt pending, 0 = interrupt not pending
1525:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1526:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Read the pending register in NVIC and return 1 if its status is pending,
1527:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * otherwise it returns 0
1528:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1529:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** static __INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
1530:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** {
1531:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   return((uint32_t) ((NVIC->ISPR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); 
1532:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** }
1533:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1534:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1535:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Set the pending bit for an external interrupt
1536:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1537:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  IRQn    The number of the interrupt for set pending
1538:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1539:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Set the pending bit for the specified interrupt.
1540:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * The interrupt number cannot be a negative value.
1541:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1542:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** static __INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
1543:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** {
1544:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   NVIC->ISPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* set interrupt pending 
1545:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** }
1546:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1547:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1548:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Clear the pending bit for an external interrupt
1549:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1550:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  IRQn    The number of the interrupt for clear pending
1551:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1552:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Clear the pending bit for the specified interrupt.
1553:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * The interrupt number cannot be a negative value.
1554:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1555:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
1556:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** {
1557:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrup
1558:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** }
1559:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1560:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1561:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Read the active bit for an external interrupt
1562:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1563:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  IRQn    The number of the interrupt for read active bit
1564:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @return         1 = interrupt active, 0 = interrupt not active
1565:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1566:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Read the active register in NVIC and returns 1 if its status is active,
1567:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * otherwise it returns 0.
1568:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1569:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** static __INLINE uint32_t NVIC_GetActive(IRQn_Type IRQn)
1570:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** {
1571:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   return((uint32_t)((NVIC->IABR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); /
1572:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** }
1573:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** 
1574:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** /**
1575:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @brief  Set the priority for an interrupt
1576:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1577:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  IRQn      The number of the interrupt for set priority
1578:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * @param  priority  The priority to set
1579:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1580:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Set the priority for the specified interrupt. The interrupt
1581:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * number can be positive to specify an external (device specific)
1582:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * interrupt, or negative to specify an internal (core) interrupt.
1583:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  *
1584:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  * Note: The priority cannot be set for every core interrupt.
1585:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****  */
1586:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
1587:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h **** {
1588:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   if(IRQn < 0) {
1589:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****     SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set 
1590:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****   else {
1591:./Libraries/NXP/Core/CM3/CoreSupport/core_cm3.h ****     NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set 
 207              	oc 1 393 0
 208 00a0 0C4A     		str	r6, [r3, #0]
 209              		.loc 1 394 0
 210              		str	r6, [r3, #4]
 211              	.LBB13:
 212 00a2 1E70     	.LBB12:
 213              		.loc 2 1591 0
 214 00a4 0C4B     		movs	r3, #72
 215 00a6 9E60     		strb	r3, [r2, #773]
 216              	.LBE12:
 217 00a8 DE60     	.LBE13:
 218              	.LBB14:
 219 00aa 1E60     	.LBB15:
 220              		.loc 2 1504 0
 221 00ac 5E60     		movs	r3, #32
 222              		str	r3, [r2, #0]
 223              	.LBE15:
 224              	.LBE14:
 225 00ae 4823     	.LBE9:
 226 00b0 82F80533 	.LBE8:
 227              		.loc 1 447 0
 228              		add	sp, sp, #28
 229              		pop	{r4, r5, r6, r8, r9, sl, pc}
 230              	.L16:
 231              		.align	2
 232 00b4 2023     	.L15:
 233 00b6 1360     		.word	1073790976
 234              		.word	UART_IntReceive
 235              		.word	UART_IntTransmit
 236              		.word	UART_IntErr
 237              		.word	.LANCHOR1
 238              		.word	-536813312
 239 00b8 07B0     		.word	.LANCHOR0
 240 00ba BDE87087 	.LFE42:
 242 00be C046     		.section	.text.comm_get,"ax",%progbits
 243              		.align	2
 244 00c0 00C00040 		.global	comm_get
 245 00c4 00000000 		.thumb
 246 00c8 00000000 		.thumb_func
 248 00d0 00000000 	comm_get:
 249 00d4 00E100E0 	.LFB39:
 250 00d8 00000000 		.loc 1 422 0
 251              		@ args = 0, pretend = 0, frame = 8
 252              		@ frame_needed = 0, uses_anonymous_args = 0
 253              		push	{r0, r1, r4, lr}
 254              	.LCFI3:
 255              		.loc 1 423 0
 256              		movs	r2, #2
 257              		add	r0, sp, #6
 258              		ldr	r1, .L24
 259              		bl	memcpy
 260              	.LVL1:
 261              	.L18:
 262              	.LBB18:
 263              	.LBB19:
 264 0000 13B5     		.loc 1 279 0
 265              		movs	r1, #0
 266              		mov	r2, r1
 267 0002 0222     		ldr	r0, .L24+4
 268 0004 0DF10600 		bl	UART_IntConfig
 269 0008 1449     		.loc 1 283 0
 270 000a FFF7FEFF 		ldr	r1, .L24+8
 271              		ldr	r2, [r1, #8]
 272              		ldr	r3, [r1, #12]
 273              		and	r2, r2, #255
 274              		and	r3, r3, #255
 275              		cmp	r2, r3
 276 000e 0021     		bne	.L19
 277 0010 0A46     		movs	r4, #0
 278 0012 1348     		b	.L21
 279 0014 FFF7FEFF 	.L19:
 280              		.loc 1 286 0
 281 0018 1249     		ldr	r3, [r1, #12]
 282 001a 8A68     		.loc 1 290 0
 283 001c CB68     		movs	r4, #1
 284 001e 02F0FF02 		.loc 1 286 0
 285 0022 03F0FF03 		adds	r3, r3, r1
 286 0026 9A42     		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 287 0028 01D1     		strb	r3, [sp, #6]
 288 002a 0024     		.loc 1 290 0
 289 002c 0BE0     		ldr	r3, [r1, #12]
 290              		adds	r3, r3, #1
 291              		and	r3, r3, #255
 292 002e CB68     		str	r3, [r1, #12]
 293              	.L21:
 294 0030 0124     		.loc 1 298 0
 295              		ldr	r0, .L24+4
 296 0032 5B18     		movs	r1, #0
 297 0034 93F81031 		movs	r2, #1
 298 0038 8DF80630 		bl	UART_IntConfig
 299              	.LBE19:
 300 003c CB68     	.LBE18:
 301 003e 0133     		.loc 1 424 0
 302 0040 03F0FF03 		cmp	r4, #0
 303 0044 CB60     		beq	.L18
 304              		.loc 1 426 0
 305              		ldrb	r0, [sp, #6]	@ zero_extendqisi2
 306 0046 0648     		pop	{r2, r3, r4, pc}
 307 0048 0021     	.L25:
 308 004a 0122     		.align	2
 309 004c FFF7FEFF 	.L24:
 310              		.word	.LANCHOR2
 311              		.word	1073790976
 312              		.word	.LANCHOR0
 313 0050 002C     	.LFE39:
 315              		.section	.text.xcomm_get,"ax",%progbits
 316 0054 9DF80600 		.align	2
 317 0058 1CBD     		.global	xcomm_get
 318              		.thumb
 319 005a C046     		.thumb_func
 321 005c 00000000 	xcomm_get:
 322 0060 00C00040 	.LFB45:
 323 0064 00000000 		.loc 1 460 0
 324              		@ args = 0, pretend = 0, frame = 0
 325              		@ frame_needed = 0, uses_anonymous_args = 0
 326              		push	{r4, lr}
 327              	.LCFI4:
 328              		.loc 1 461 0
 329              		bl	comm_get
 330              		.loc 1 462 0
 331              		pop	{r4, pc}
 332              	.LFE45:
 453:comm.c        **** 
 454:comm.c        **** void xcomm_put(unsigned char c)
 455:comm.c        **** {
 456:comm.c        **** 	comm_put((char)c);
 457:comm.c        **** }
 458:comm.c        **** 
 459:comm.c        **** unsigned char xcomm_get(void)
 460:comm.c        **** {
 334              	mit:
 335              	.LFB33:
 336              		.loc 1 151 0
 337 0000 10B5     		@ args = 0, pretend = 0, frame = 0
 338              		@ frame_needed = 0, uses_anonymous_args = 0
 461:comm.c        **** 	return (unsigned char) comm_get();
 339              		{r4, lr}
 340 0002 FFF7FEFF 	.LCFI5:
 462:comm.c        **** }
 341              	loc 1 153 0
 342 0006 10BD     		ldr	r0, .L38
 343              		movs	r1, #1
 344              		movs	r2, #0
 345              		bl	UART_IntConfig
 346              	.L29:
 347              		.loc 1 158 0
 348              		ldr	r0, .L38
 349              		bl	UART_CheckBusy
 350              		cmp	r0, #1
 351              		beq	.L29
 352              		b	.L30
 353              	.L31:
 354              		.loc 1 164 0
 355 0000 10B5     		ldr	r3, [r4, #4]
 356              		add	r1, r4, #16
 357              		adds	r1, r3, r1
 358 0002 1E48     		ldr	r0, .L38
 359 0004 0121     		movs	r2, #1
 360 0006 0022     		movs	r3, #0
 361 0008 FFF7FEFF 		bl	UART_Send
 362              		cbz	r0, .L32
 363              		.loc 1 168 0
 364 000c 1B48     		ldr	r3, [r4, #4]
 365 000e FFF7FEFF 		adds	r3, r3, #1
 366 0012 0128     		and	r3, r3, #255
 367 0014 FAD0     		str	r3, [r4, #4]
 368 0016 0EE0     	.L30:
 369              		.loc 1 161 0
 370              		ldr	r4, .L38+4
 371 0018 6368     		ldr	r2, [r4, #0]
 372 001a 04F11001 		ldr	r3, [r4, #4]
 373 001e 5918     		and	r2, r2, #255
 374 0020 1648     		and	r3, r3, #255
 375 0022 0122     		cmp	r2, r3
 376 0024 0023     		bne	.L31
 377 0026 FFF7FEFF 	.L32:
 378 002a 68B1     		.loc 1 178 0
 379              		ldr	r3, .L38+4
 380 002c 6368     		ldr	r4, .L38+8
 381 002e 0133     		ldr	r2, [r3, #0]
 382 0030 03F0FF03 		ldr	r3, [r3, #4]
 383 0034 6360     		and	r2, r2, #255
 384              		and	r3, r3, #255
 385              		cmp	r2, r3
 386 0036 124C     		bne	.L34
 387 0038 2268     		.loc 1 180 0
 388 003a 6368     		ldr	r0, .L38
 389 003c 02F0FF02 		movs	r1, #1
 390 0040 03F0FF03 		movs	r2, #0
 391 0044 9A42     		bl	UART_IntConfig
 392 0046 E7D1     		.loc 1 182 0
 393              		movs	r3, #0
 394              		strb	r3, [r4, #0]
 395 0048 0D4B     		b	.L37
 396 004a 0E4C     	.L34:
 397 004c 1A68     		.loc 1 187 0
 398 004e 5B68     		movs	r1, #1
 399 0050 02F0FF02 		strb	r1, [r4, #0]
 400 0054 03F0FF03 		.loc 1 188 0
 401 0058 9A42     		ldr	r0, .L38
 402 005a 07D1     		mov	r2, r1
 403              		bl	UART_IntConfig
 404 005c 0748     	.L37:
 405 005e 0121     		.loc 1 190 0
 406 0060 0022     		pop	{r4, pc}
 407 0062 FFF7FEFF 	.L39:
 408              		.align	2
 409 0066 0023     	.L38:
 410 0068 2370     		.word	1073790976
 411 006a 05E0     		.word	.LANCHOR0
 412              		.word	.LANCHOR1
 413              	.LFE33:
 415 006e 2170     		.section	.text.comm_put,"ax",%progbits
 416              		.align	2
 417 0070 0248     		.global	comm_put
 418 0072 0A46     		.thumb
 419 0074 FFF7FEFF 		.thumb_func
 421              	comm_put:
 422 0078 10BD     	.LFB40:
 423              		.loc 1 429 0
 424 007a C046     		@ args = 0, pretend = 0, frame = 8
 425              		@ frame_needed = 0, uses_anonymous_args = 0
 426 007c 00C00040 	.LVL2:
 427 0080 00000000 		push	{r0, r1, r4, lr}
 428 0084 00000000 	.LCFI6:
 429              	.LVL3:
 430              		.loc 1 432 0
 431              		strb	r0, [sp, #6]
 432              	.LVL4:
 433              	.L41:
 434              	.LBB22:
 435              	.LBB23:
 436              		.loc 1 224 0
 437              		movs	r1, #1
 438              		movs	r2, #0
 439              		ldr	r0, .L50
 440              	.LVL5:
 441              		bl	UART_IntConfig
 442              		.loc 1 228 0
 443 0000 13B5     		ldr	r1, .L50+4
 444              		ldr	r2, [r1, #4]
 445              		ldr	r3, [r1, #0]
 446              		and	r2, r2, #255
 447 0002 8DF80600 		adds	r3, r3, #1
 448              		and	r3, r3, #255
 449              		cmp	r2, r3
 450              		bne	.L42
 451              		movs	r4, #0
 452              		b	.L44
 453 0006 0121     	.L42:
 454 0008 0022     		.loc 1 231 0
 455 000a 1448     		ldr	r3, [r1, #0]
 456              		ldrb	r2, [sp, #6]	@ zero_extendqisi2
 457 000c FFF7FEFF 		adds	r3, r3, r1
 458              		strb	r2, [r3, #16]
 459 0010 1349     		.loc 1 235 0
 460 0012 4A68     		ldr	r3, [r1, #0]
 461 0014 0B68     		movs	r4, #1
 462 0016 02F0FF02 		adds	r3, r3, #1
 463 001a 0133     		and	r3, r3, #255
 464 001c 03F0FF03 		str	r3, [r1, #0]
 465 0020 9A42     	.L44:
 466 0022 01D1     		.loc 1 248 0
 467 0024 0024     		ldr	r3, .L50+8
 468 0026 0AE0     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 469              		cbnz	r3, .L45
 470              		.loc 1 250 0
 471 0028 0B68     		bl	UART_IntTransmit
 472 002a 9DF80620 		b	.L47
 473 002e 5B18     	.L45:
 474 0030 1A74     		.loc 1 257 0
 475              		movs	r1, #1
 476 0032 0B68     		ldr	r0, .L50
 477 0034 0124     		mov	r2, r1
 478 0036 0133     		bl	UART_IntConfig
 479 0038 03F0FF03 	.L47:
 480 003c 0B60     	.LBE23:
 481              	.LBE22:
 482              		.loc 1 433 0
 483 003e 094B     		cmp	r4, #0
 484 0040 1B78     		beq	.L41
 485 0042 13B9     		.loc 1 434 0
 486              		pop	{r2, r3, r4, pc}
 487 0044 FFF7FEFF 	.L51:
 488 0048 04E0     		.align	2
 489              	.L50:
 490              		.word	1073790976
 491 004a 0121     		.word	.LANCHOR0
 492 004c 0348     		.word	.LANCHOR1
 493 004e 0A46     	.LFE40:
 495              		.section	.text.xcomm_put,"ax",%progbits
 496              		.align	2
 497              		.global	xcomm_put
 498              		.thumb
 499 0054 002C     		.thumb_func
 501              	xcomm_put:
 502 0058 1CBD     	.LFB44:
 503              		.loc 1 455 0
 504 005a C046     		@ args = 0, pretend = 0, frame = 0
 505              		@ frame_needed = 0, uses_anonymous_args = 0
 506 005c 00C00040 	.LVL6:
 507 0060 00000000 		push	{r4, lr}
 508 0064 00000000 	.LCFI7:
 509              		.loc 1 456 0
 510              		bl	comm_put
 511              	.LVL7:
 512              		.loc 1 457 0
 513              		pop	{r4, pc}
 514              	.LFE44:
 516              		.section	.text.comm_puts,"ax",%progbits
 517              		.align	2
 518              		.global	comm_puts
 519              		.thumb
 520              		.thumb_func
 522              	comm_puts:
 523 0000 10B5     	.LFB41:
 524              		.loc 1 437 0
 525              		@ args = 0, pretend = 0, frame = 0
 526 0002 FFF7FEFF 		@ frame_needed = 0, uses_anonymous_args = 0
 527              	.LVL8:
 528              		push	{r4, lr}
 529 0006 10BD     	.LCFI8:
 530              		.loc 1 437 0
 531              		mov	r4, r0
 532              		.loc 1 439 0
 533              		b	.L55
 534              	.LVL9:
 535              	.L56:
 536              		.loc 1 440 0
 537              		bl	comm_put
 538              	.LVL10:
 539              	.L55:
 540              		.loc 1 439 0
 541              		ldrb	r0, [r4], #1	@ zero_extendqisi2
 542              	.LVL11:
 543              		cmp	r0, #0
 544 0000 10B5     		bne	.L56
 545              		.loc 1 442 0
 546              		pop	{r4, pc}
 547 0002 0446     	.LFE41:
 549 0004 01E0     		.section	.text.UART_IntReceive,"ax",%progbits
 550              		.align	2
 551              		.thumb
 552              		.thumb_func
 554              	UART_IntReceive:
 555              	.LFB32:
 556              		.loc 1 117 0
 557 000a 14F8010B 		@ args = 0, pretend = 0, frame = 8
 558              		@ frame_needed = 0, uses_anonymous_args = 0
 559 000e 0028     		push	{r0, r1, r2, lr}
 560 0010 F9D1     	.LCFI9:
 561              	.LVL12:
 562 0012 10BD     	.L68:
 563              		.loc 1 124 0
 564              		ldr	r0, .L69
 565              		add	r1, sp, #7
 566              		movs	r2, #1
 567              		movs	r3, #0
 568              		bl	UART_Receive
 569              		.loc 1 126 0
 570              		cbz	r0, .L65
 571              		.loc 1 131 0
 572              		ldr	r1, .L69+4
 573              		ldr	r2, [r1, #12]
 574              		ldr	r3, [r1, #8]
 575 0000 07B5     		and	r2, r2, #255
 576              		adds	r3, r3, #1
 577              		and	r3, r3, #255
 578              		cmp	r2, r3
 579              		beq	.L68
 580 0002 0F48     		.loc 1 133 0
 581 0004 0DF10701 		ldr	r3, [r1, #8]
 582 0008 0122     		ldrb	r2, [sp, #7]	@ zero_extendqisi2
 583 000a 0023     		adds	r3, r3, r1
 584 000c FFF7FEFF 		strb	r2, [r3, #272]
 585              		.loc 1 134 0
 586 0010 A8B1     		ldr	r3, [r1, #8]
 587              		adds	r3, r3, #1
 588 0012 0C49     		and	r3, r3, #255
 589 0014 CA68     		str	r3, [r1, #8]
 590 0016 8B68     		b	.L68
 591 0018 02F0FF02 	.L65:
 592 001c 0133     		.loc 1 143 0
 593 001e 03F0FF03 		pop	{r1, r2, r3, pc}
 594 0022 9A42     	.L70:
 595 0024 EDD0     		.align	2
 596              	.L69:
 597 0026 8B68     		.word	1073790976
 598 0028 9DF80720 		.word	.LANCHOR0
 599 002c 5B18     	.LFE32:
 601              		.section	.text.UART0_IRQHandler,"ax",%progbits
 602 0032 8B68     		.align	2
 603 0034 0133     		.global	UART0_IRQHandler
 604 0036 03F0FF03 		.thumb
 605 003a 8B60     		.thumb_func
 607              	UART0_IRQHandler:
 608              	.LFB31:
 609 003e 0EBD     		.loc 1 91 0
 610              		@ args = 0, pretend = 0, frame = 0
 611              		@ frame_needed = 0, uses_anonymous_args = 0
 612              		push	{r4, lr}
 613 0040 00C00040 	.LCFI10:
 614 0044 00000000 		.loc 1 93 0
 615              		bl	UART0_StdIntHandler
 616              		.loc 1 94 0
 617              		pop	{r4, pc}
 618              	.LFE31:
 620              		.section	.bss.TxIntStat,"aw",%nobits
 621              		.set	.LANCHOR1,. + 0
 624              	TxIntStat:
 625              		.space	1
 626              		.section	.bss.rb,"aw",%nobits
 627              		.align	2
 628 0000 10B5     		.set	.LANCHOR0,. + 0
 631 0002 FFF7FEFF 	rb:
 632              		.space	528
 633 0006 10BD     		.section	.rodata.C.18.3238,"a",%progbits
 634              		.set	.LANCHOR2,. + 0
 637              	C.18.3238:
 638              		.space	2
 639              		.section	.debug_frame,"",%progbits
 640              	.Lframe0:
 641 0000 00       		.4byte	.LECIE0-.LSCIE0
 642              	.LSCIE0:
 643              		.4byte	0xffffffff
 644              		.byte	0x1
 645              		.ascii	"\000"
 646              		.uleb128 0x1
 647              		.sleb128 -4
 648 0000 00000000 		.byte	0xe
 648      00000000 
 648      00000000 
 648      00000000 
 648      00000000 
 649              		.byte	0xc
 650              		.uleb128 0xd
 651              		.uleb128 0x0
 652              		.align	2
 653              	.LECIE0:
 654 0000 0000     	.LSFDE0:
 873              		.4byte	.LFB42
DEFINED SYMBOLS
                            *ABS*:00000000 comm.c
                            .text:00000000 $t
C:\Users\KVIN~1\AppData\Local\Temp/ccGaaaaa.s:24     .text.UART_IntErr:00000000 $t
C:\Users\KVIN~1\AppData\Local\Temp/ccGaaaaa.s:27     .text.UART_IntErr:00000000 UART_IntErr
C:\Users\KVIN~1\AppData\Local\Temp/ccGaaaaa.s:47     .text.comm_test:00000000 comm_test
C:\Users\KVIN~1\AppData\Local\Temp/ccGaaaaa.s:44     .text.comm_test:00000000 $t
C:\Users\KVIN~1\AppData\Local\Temp/ccGaaaaa.s:70     .text.comm_test:00000018 $d
C:\Users\KVIN~1\AppData\Local\Temp/ccGaaaaa.s:79     .text.comm_txbusy:00000000 comm_txbusy
C:\Users\KVIN~1\AppData\Local\Temp/ccGaaaaa.s:76     .text.comm_txbusy:00000000 $t
C:\Users\KVIN~1\AppData\Local\Temp/ccGaaaaa.s:98     .text.comm_txbusy:00000014 $d
C:\Users\KVIN~1\AppData\Local\Temp/ccGaaaaa.s:107    .text.comm_init:00000000 comm_init
C:\Users\KVIN~1\AppData\Local\Temp/ccGaaaaa.s:104    .text.comm_init:00000000 $t
C:\Users\KVIN~1\AppData\Local\Temp/ccGaaaaa.s:244    .text.comm_init:000000c0 $d
C:\Users\KVIN~1\AppData\Local\Temp/ccGaaaaa.s:570    .text.UART_IntReceive:00000000 UART_IntReceive
C:\Users\KVIN~1\AppData\Local\Temp/ccGaaaaa.s:350    .text.UART_IntTransmit:00000000 UART_IntTransmit
C:\Users\KVIN~1\AppData\Local\Temp/ccGaaaaa.s:259    .text.comm_get:00000000 comm_get
C:\Users\KVIN~1\AppData\Local\Temp/ccGaaaaa.s:256    .text.comm_get:00000000 $t
C:\Users\KVIN~1\AppData\Local\Temp/ccGaaaaa.s:321    .text.comm_get:0000005c $d
C:\Users\KVIN~1\AppData\Local\Temp/ccGaaaaa.s:332    .text.xcomm_get:00000000 xcomm_get
C:\Users\KVIN~1\AppData\Local\Temp/ccGaaaaa.s:329    .text.xcomm_get:00000000 $t
C:\Users\KVIN~1\AppData\Local\Temp/ccGaaaaa.s:347    .text.UART_IntTransmit:00000000 $t
C:\Users\KVIN~1\AppData\Local\Temp/ccGaaaaa.s:426    .text.UART_IntTransmit:0000007c $d
C:\Users\KVIN~1\AppData\Local\Temp/ccGaaaaa.s:437    .text.comm_put:00000000 comm_put
C:\Users\KVIN~1\AppData\Local\Temp/ccGaaaaa.s:434    .text.comm_put:00000000 $t
C:\Users\KVIN~1\AppData\Local\Temp/ccGaaaaa.s:506    .text.comm_put:0000005c $d
C:\Users\KVIN~1\AppData\Local\Temp/ccGaaaaa.s:517    .text.xcomm_put:00000000 xcomm_put
C:\Users\KVIN~1\AppData\Local\Temp/ccGaaaaa.s:514    .text.xcomm_put:00000000 $t
C:\Users\KVIN~1\AppData\Local\Temp/ccGaaaaa.s:538    .text.comm_puts:00000000 comm_puts
C:\Users\KVIN~1\AppData\Local\Temp/ccGaaaaa.s:535    .text.comm_puts:00000000 $t
C:\Users\KVIN~1\AppData\Local\Temp/ccGaaaaa.s:567    .text.UART_IntReceive:00000000 $t
C:\Users\KVIN~1\AppData\Local\Temp/ccGaaaaa.s:613    .text.UART_IntReceive:00000040 $d
C:\Users\KVIN~1\AppData\Local\Temp/ccGaaaaa.s:623    .text.UART0_IRQHandler:00000000 UART0_IRQHandler
C:\Users\KVIN~1\AppData\Local\Temp/ccGaaaaa.s:620    .text.UART0_IRQHandler:00000000 $t
C:\Users\KVIN~1\AppData\Local\Temp/ccGaaaaa.s:640    .bss.TxIntStat:00000000 TxIntStat
C:\Users\KVIN~1\AppData\Local\Temp/ccGaaaaa.s:647    .bss.rb:00000000 rb
C:\Users\KVIN~1\AppData\Local\Temp/ccGaaaaa.s:653    .rodata.C.18.3238:00000000 C.18.3238
C:\Users\KVIN~1\AppData\Local\Temp/ccGaaaaa.s:657    .debug_frame:00000000 $d
C:\Users\KVIN~1\AppData\Local\Temp/ccGaaaaa.s:877    .debug_loc:00000000 $d

UNDEFINED SYMBOLS
UART_CheckBusy
PINSEL_ConfigPin
UART_ConfigStructInit
UART_Init
UART_FIFOConfigStructInit
UART_FIFOConfig
UART_SetupCbs
UART_TxCmd
UART_IntConfig
memcpy
UART_Send
UART_Receive
UART0_StdIntHandler
